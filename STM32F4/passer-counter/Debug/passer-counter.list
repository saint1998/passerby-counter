
passer-counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000816c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080082f4  080082f4  000182f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008310  08008310  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008310  08008310  00018310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008318  08008318  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008318  08008318  00018318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800831c  0800831c  0001831c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008320  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007fc  20000090  080083b0  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000088c  080083b0  0002088c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a2c2  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000382d  00000000  00000000  0003a382  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012e0  00000000  00000000  0003dbb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001168  00000000  00000000  0003ee90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024afc  00000000  00000000  0003fff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000121cf  00000000  00000000  00064af4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cca2f  00000000  00000000  00076cc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001436f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005028  00000000  00000000  00143770  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080082dc 	.word	0x080082dc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	080082dc 	.word	0x080082dc

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_Init+0x40>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a0d      	ldr	r2, [pc, #52]	; (8000518 <HAL_Init+0x40>)
 80004e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e8:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <HAL_Init+0x40>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a0a      	ldr	r2, [pc, #40]	; (8000518 <HAL_Init+0x40>)
 80004ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f4:	4b08      	ldr	r3, [pc, #32]	; (8000518 <HAL_Init+0x40>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a07      	ldr	r2, [pc, #28]	; (8000518 <HAL_Init+0x40>)
 80004fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 f94d 	bl	80007a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000506:	2000      	movs	r0, #0
 8000508:	f000 f808 	bl	800051c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800050c:	f007 f8d6 	bl	80076bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000510:	2300      	movs	r3, #0
}
 8000512:	4618      	mov	r0, r3
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40023c00 	.word	0x40023c00

0800051c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <HAL_InitTick+0x54>)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <HAL_InitTick+0x58>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	4619      	mov	r1, r3
 800052e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000532:	fbb3 f3f1 	udiv	r3, r3, r1
 8000536:	fbb2 f3f3 	udiv	r3, r2, r3
 800053a:	4618      	mov	r0, r3
 800053c:	f000 f965 	bl	800080a <HAL_SYSTICK_Config>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000546:	2301      	movs	r3, #1
 8000548:	e00e      	b.n	8000568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2b0f      	cmp	r3, #15
 800054e:	d80a      	bhi.n	8000566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000550:	2200      	movs	r2, #0
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	f04f 30ff 	mov.w	r0, #4294967295
 8000558:	f000 f92d 	bl	80007b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800055c:	4a06      	ldr	r2, [pc, #24]	; (8000578 <HAL_InitTick+0x5c>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000562:	2300      	movs	r3, #0
 8000564:	e000      	b.n	8000568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000566:	2301      	movs	r3, #1
}
 8000568:	4618      	mov	r0, r3
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000028 	.word	0x20000028
 8000574:	20000004 	.word	0x20000004
 8000578:	20000000 	.word	0x20000000

0800057c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <HAL_IncTick+0x20>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	461a      	mov	r2, r3
 8000586:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <HAL_IncTick+0x24>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4413      	add	r3, r2
 800058c:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <HAL_IncTick+0x24>)
 800058e:	6013      	str	r3, [r2, #0]
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000004 	.word	0x20000004
 80005a0:	200000c0 	.word	0x200000c0

080005a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  return uwTick;
 80005a8:	4b03      	ldr	r3, [pc, #12]	; (80005b8 <HAL_GetTick+0x14>)
 80005aa:	681b      	ldr	r3, [r3, #0]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	200000c0 	.word	0x200000c0

080005bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005c4:	f7ff ffee 	bl	80005a4 <HAL_GetTick>
 80005c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d4:	d005      	beq.n	80005e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005d6:	4b09      	ldr	r3, [pc, #36]	; (80005fc <HAL_Delay+0x40>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	461a      	mov	r2, r3
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	4413      	add	r3, r2
 80005e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005e2:	bf00      	nop
 80005e4:	f7ff ffde 	bl	80005a4 <HAL_GetTick>
 80005e8:	4602      	mov	r2, r0
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	1ad3      	subs	r3, r2, r3
 80005ee:	68fa      	ldr	r2, [r7, #12]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d8f7      	bhi.n	80005e4 <HAL_Delay+0x28>
  {
  }
}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000004 	.word	0x20000004

08000600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	f003 0307 	and.w	r3, r3, #7
 800060e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <__NVIC_SetPriorityGrouping+0x44>)
 8000612:	68db      	ldr	r3, [r3, #12]
 8000614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800061c:	4013      	ands	r3, r2
 800061e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000628:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800062c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000632:	4a04      	ldr	r2, [pc, #16]	; (8000644 <__NVIC_SetPriorityGrouping+0x44>)
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	60d3      	str	r3, [r2, #12]
}
 8000638:	bf00      	nop
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	e000ed00 	.word	0xe000ed00

08000648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800064c:	4b04      	ldr	r3, [pc, #16]	; (8000660 <__NVIC_GetPriorityGrouping+0x18>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	0a1b      	lsrs	r3, r3, #8
 8000652:	f003 0307 	and.w	r3, r3, #7
}
 8000656:	4618      	mov	r0, r3
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	2b00      	cmp	r3, #0
 8000674:	db0b      	blt.n	800068e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	f003 021f 	and.w	r2, r3, #31
 800067c:	4907      	ldr	r1, [pc, #28]	; (800069c <__NVIC_EnableIRQ+0x38>)
 800067e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000682:	095b      	lsrs	r3, r3, #5
 8000684:	2001      	movs	r0, #1
 8000686:	fa00 f202 	lsl.w	r2, r0, r2
 800068a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800068e:	bf00      	nop
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	e000e100 	.word	0xe000e100

080006a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	6039      	str	r1, [r7, #0]
 80006aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	db0a      	blt.n	80006ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	b2da      	uxtb	r2, r3
 80006b8:	490c      	ldr	r1, [pc, #48]	; (80006ec <__NVIC_SetPriority+0x4c>)
 80006ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006be:	0112      	lsls	r2, r2, #4
 80006c0:	b2d2      	uxtb	r2, r2
 80006c2:	440b      	add	r3, r1
 80006c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c8:	e00a      	b.n	80006e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	4908      	ldr	r1, [pc, #32]	; (80006f0 <__NVIC_SetPriority+0x50>)
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	f003 030f 	and.w	r3, r3, #15
 80006d6:	3b04      	subs	r3, #4
 80006d8:	0112      	lsls	r2, r2, #4
 80006da:	b2d2      	uxtb	r2, r2
 80006dc:	440b      	add	r3, r1
 80006de:	761a      	strb	r2, [r3, #24]
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000e100 	.word	0xe000e100
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b089      	sub	sp, #36	; 0x24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	f003 0307 	and.w	r3, r3, #7
 8000706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	f1c3 0307 	rsb	r3, r3, #7
 800070e:	2b04      	cmp	r3, #4
 8000710:	bf28      	it	cs
 8000712:	2304      	movcs	r3, #4
 8000714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	3304      	adds	r3, #4
 800071a:	2b06      	cmp	r3, #6
 800071c:	d902      	bls.n	8000724 <NVIC_EncodePriority+0x30>
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	3b03      	subs	r3, #3
 8000722:	e000      	b.n	8000726 <NVIC_EncodePriority+0x32>
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000728:	f04f 32ff 	mov.w	r2, #4294967295
 800072c:	69bb      	ldr	r3, [r7, #24]
 800072e:	fa02 f303 	lsl.w	r3, r2, r3
 8000732:	43da      	mvns	r2, r3
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	401a      	ands	r2, r3
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800073c:	f04f 31ff 	mov.w	r1, #4294967295
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	fa01 f303 	lsl.w	r3, r1, r3
 8000746:	43d9      	mvns	r1, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800074c:	4313      	orrs	r3, r2
         );
}
 800074e:	4618      	mov	r0, r3
 8000750:	3724      	adds	r7, #36	; 0x24
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
	...

0800075c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3b01      	subs	r3, #1
 8000768:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800076c:	d301      	bcc.n	8000772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800076e:	2301      	movs	r3, #1
 8000770:	e00f      	b.n	8000792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000772:	4a0a      	ldr	r2, [pc, #40]	; (800079c <SysTick_Config+0x40>)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	3b01      	subs	r3, #1
 8000778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800077a:	210f      	movs	r1, #15
 800077c:	f04f 30ff 	mov.w	r0, #4294967295
 8000780:	f7ff ff8e 	bl	80006a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <SysTick_Config+0x40>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800078a:	4b04      	ldr	r3, [pc, #16]	; (800079c <SysTick_Config+0x40>)
 800078c:	2207      	movs	r2, #7
 800078e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000790:	2300      	movs	r3, #0
}
 8000792:	4618      	mov	r0, r3
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	e000e010 	.word	0xe000e010

080007a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f7ff ff29 	bl	8000600 <__NVIC_SetPriorityGrouping>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b086      	sub	sp, #24
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	4603      	mov	r3, r0
 80007be:	60b9      	str	r1, [r7, #8]
 80007c0:	607a      	str	r2, [r7, #4]
 80007c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007c8:	f7ff ff3e 	bl	8000648 <__NVIC_GetPriorityGrouping>
 80007cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	68b9      	ldr	r1, [r7, #8]
 80007d2:	6978      	ldr	r0, [r7, #20]
 80007d4:	f7ff ff8e 	bl	80006f4 <NVIC_EncodePriority>
 80007d8:	4602      	mov	r2, r0
 80007da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007de:	4611      	mov	r1, r2
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff ff5d 	bl	80006a0 <__NVIC_SetPriority>
}
 80007e6:	bf00      	nop
 80007e8:	3718      	adds	r7, #24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff ff31 	bl	8000664 <__NVIC_EnableIRQ>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b082      	sub	sp, #8
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f7ff ffa2 	bl	800075c <SysTick_Config>
 8000818:	4603      	mov	r3, r0
}
 800081a:	4618      	mov	r0, r3
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000824:	b480      	push	{r7}
 8000826:	b089      	sub	sp, #36	; 0x24
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000836:	2300      	movs	r3, #0
 8000838:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800083a:	2300      	movs	r3, #0
 800083c:	61fb      	str	r3, [r7, #28]
 800083e:	e16b      	b.n	8000b18 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000840:	2201      	movs	r2, #1
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	fa02 f303 	lsl.w	r3, r2, r3
 8000848:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	697a      	ldr	r2, [r7, #20]
 8000850:	4013      	ands	r3, r2
 8000852:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000854:	693a      	ldr	r2, [r7, #16]
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	429a      	cmp	r2, r3
 800085a:	f040 815a 	bne.w	8000b12 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	2b01      	cmp	r3, #1
 8000864:	d00b      	beq.n	800087e <HAL_GPIO_Init+0x5a>
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	2b02      	cmp	r3, #2
 800086c:	d007      	beq.n	800087e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000872:	2b11      	cmp	r3, #17
 8000874:	d003      	beq.n	800087e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	2b12      	cmp	r3, #18
 800087c:	d130      	bne.n	80008e0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	689b      	ldr	r3, [r3, #8]
 8000882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000884:	69fb      	ldr	r3, [r7, #28]
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	2203      	movs	r2, #3
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
 800088e:	43db      	mvns	r3, r3
 8000890:	69ba      	ldr	r2, [r7, #24]
 8000892:	4013      	ands	r3, r2
 8000894:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	68da      	ldr	r2, [r3, #12]
 800089a:	69fb      	ldr	r3, [r7, #28]
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	69ba      	ldr	r2, [r7, #24]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	69ba      	ldr	r2, [r7, #24]
 80008ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008b4:	2201      	movs	r2, #1
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	fa02 f303 	lsl.w	r3, r2, r3
 80008bc:	43db      	mvns	r3, r3
 80008be:	69ba      	ldr	r2, [r7, #24]
 80008c0:	4013      	ands	r3, r2
 80008c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	091b      	lsrs	r3, r3, #4
 80008ca:	f003 0201 	and.w	r2, r3, #1
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	fa02 f303 	lsl.w	r3, r2, r3
 80008d4:	69ba      	ldr	r2, [r7, #24]
 80008d6:	4313      	orrs	r3, r2
 80008d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	69ba      	ldr	r2, [r7, #24]
 80008de:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	2203      	movs	r2, #3
 80008ec:	fa02 f303 	lsl.w	r3, r2, r3
 80008f0:	43db      	mvns	r3, r3
 80008f2:	69ba      	ldr	r2, [r7, #24]
 80008f4:	4013      	ands	r3, r2
 80008f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	689a      	ldr	r2, [r3, #8]
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	fa02 f303 	lsl.w	r3, r2, r3
 8000904:	69ba      	ldr	r2, [r7, #24]
 8000906:	4313      	orrs	r3, r2
 8000908:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	69ba      	ldr	r2, [r7, #24]
 800090e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	2b02      	cmp	r3, #2
 8000916:	d003      	beq.n	8000920 <HAL_GPIO_Init+0xfc>
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	2b12      	cmp	r3, #18
 800091e:	d123      	bne.n	8000968 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	08da      	lsrs	r2, r3, #3
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	3208      	adds	r2, #8
 8000928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800092c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	f003 0307 	and.w	r3, r3, #7
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	220f      	movs	r2, #15
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	43db      	mvns	r3, r3
 800093e:	69ba      	ldr	r2, [r7, #24]
 8000940:	4013      	ands	r3, r2
 8000942:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	691a      	ldr	r2, [r3, #16]
 8000948:	69fb      	ldr	r3, [r7, #28]
 800094a:	f003 0307 	and.w	r3, r3, #7
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	69ba      	ldr	r2, [r7, #24]
 8000956:	4313      	orrs	r3, r2
 8000958:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	08da      	lsrs	r2, r3, #3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	3208      	adds	r2, #8
 8000962:	69b9      	ldr	r1, [r7, #24]
 8000964:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	2203      	movs	r2, #3
 8000974:	fa02 f303 	lsl.w	r3, r2, r3
 8000978:	43db      	mvns	r3, r3
 800097a:	69ba      	ldr	r2, [r7, #24]
 800097c:	4013      	ands	r3, r2
 800097e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	f003 0203 	and.w	r2, r3, #3
 8000988:	69fb      	ldr	r3, [r7, #28]
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	fa02 f303 	lsl.w	r3, r2, r3
 8000990:	69ba      	ldr	r2, [r7, #24]
 8000992:	4313      	orrs	r3, r2
 8000994:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	69ba      	ldr	r2, [r7, #24]
 800099a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	f000 80b4 	beq.w	8000b12 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	4b5f      	ldr	r3, [pc, #380]	; (8000b2c <HAL_GPIO_Init+0x308>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	4a5e      	ldr	r2, [pc, #376]	; (8000b2c <HAL_GPIO_Init+0x308>)
 80009b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ba:	4b5c      	ldr	r3, [pc, #368]	; (8000b2c <HAL_GPIO_Init+0x308>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009c6:	4a5a      	ldr	r2, [pc, #360]	; (8000b30 <HAL_GPIO_Init+0x30c>)
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	089b      	lsrs	r3, r3, #2
 80009cc:	3302      	adds	r3, #2
 80009ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	f003 0303 	and.w	r3, r3, #3
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	220f      	movs	r2, #15
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	43db      	mvns	r3, r3
 80009e4:	69ba      	ldr	r2, [r7, #24]
 80009e6:	4013      	ands	r3, r2
 80009e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a51      	ldr	r2, [pc, #324]	; (8000b34 <HAL_GPIO_Init+0x310>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d02b      	beq.n	8000a4a <HAL_GPIO_Init+0x226>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a50      	ldr	r2, [pc, #320]	; (8000b38 <HAL_GPIO_Init+0x314>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d025      	beq.n	8000a46 <HAL_GPIO_Init+0x222>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a4f      	ldr	r2, [pc, #316]	; (8000b3c <HAL_GPIO_Init+0x318>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d01f      	beq.n	8000a42 <HAL_GPIO_Init+0x21e>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a4e      	ldr	r2, [pc, #312]	; (8000b40 <HAL_GPIO_Init+0x31c>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d019      	beq.n	8000a3e <HAL_GPIO_Init+0x21a>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a4d      	ldr	r2, [pc, #308]	; (8000b44 <HAL_GPIO_Init+0x320>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d013      	beq.n	8000a3a <HAL_GPIO_Init+0x216>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a4c      	ldr	r2, [pc, #304]	; (8000b48 <HAL_GPIO_Init+0x324>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d00d      	beq.n	8000a36 <HAL_GPIO_Init+0x212>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a4b      	ldr	r2, [pc, #300]	; (8000b4c <HAL_GPIO_Init+0x328>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d007      	beq.n	8000a32 <HAL_GPIO_Init+0x20e>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a4a      	ldr	r2, [pc, #296]	; (8000b50 <HAL_GPIO_Init+0x32c>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d101      	bne.n	8000a2e <HAL_GPIO_Init+0x20a>
 8000a2a:	2307      	movs	r3, #7
 8000a2c:	e00e      	b.n	8000a4c <HAL_GPIO_Init+0x228>
 8000a2e:	2308      	movs	r3, #8
 8000a30:	e00c      	b.n	8000a4c <HAL_GPIO_Init+0x228>
 8000a32:	2306      	movs	r3, #6
 8000a34:	e00a      	b.n	8000a4c <HAL_GPIO_Init+0x228>
 8000a36:	2305      	movs	r3, #5
 8000a38:	e008      	b.n	8000a4c <HAL_GPIO_Init+0x228>
 8000a3a:	2304      	movs	r3, #4
 8000a3c:	e006      	b.n	8000a4c <HAL_GPIO_Init+0x228>
 8000a3e:	2303      	movs	r3, #3
 8000a40:	e004      	b.n	8000a4c <HAL_GPIO_Init+0x228>
 8000a42:	2302      	movs	r3, #2
 8000a44:	e002      	b.n	8000a4c <HAL_GPIO_Init+0x228>
 8000a46:	2301      	movs	r3, #1
 8000a48:	e000      	b.n	8000a4c <HAL_GPIO_Init+0x228>
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	69fa      	ldr	r2, [r7, #28]
 8000a4e:	f002 0203 	and.w	r2, r2, #3
 8000a52:	0092      	lsls	r2, r2, #2
 8000a54:	4093      	lsls	r3, r2
 8000a56:	69ba      	ldr	r2, [r7, #24]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a5c:	4934      	ldr	r1, [pc, #208]	; (8000b30 <HAL_GPIO_Init+0x30c>)
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	089b      	lsrs	r3, r3, #2
 8000a62:	3302      	adds	r3, #2
 8000a64:	69ba      	ldr	r2, [r7, #24]
 8000a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a6a:	4b3a      	ldr	r3, [pc, #232]	; (8000b54 <HAL_GPIO_Init+0x330>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	43db      	mvns	r3, r3
 8000a74:	69ba      	ldr	r2, [r7, #24]
 8000a76:	4013      	ands	r3, r2
 8000a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d003      	beq.n	8000a8e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000a86:	69ba      	ldr	r2, [r7, #24]
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a8e:	4a31      	ldr	r2, [pc, #196]	; (8000b54 <HAL_GPIO_Init+0x330>)
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a94:	4b2f      	ldr	r3, [pc, #188]	; (8000b54 <HAL_GPIO_Init+0x330>)
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	43db      	mvns	r3, r3
 8000a9e:	69ba      	ldr	r2, [r7, #24]
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d003      	beq.n	8000ab8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ab0:	69ba      	ldr	r2, [r7, #24]
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ab8:	4a26      	ldr	r2, [pc, #152]	; (8000b54 <HAL_GPIO_Init+0x330>)
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000abe:	4b25      	ldr	r3, [pc, #148]	; (8000b54 <HAL_GPIO_Init+0x330>)
 8000ac0:	689b      	ldr	r3, [r3, #8]
 8000ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	43db      	mvns	r3, r3
 8000ac8:	69ba      	ldr	r2, [r7, #24]
 8000aca:	4013      	ands	r3, r2
 8000acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d003      	beq.n	8000ae2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000ada:	69ba      	ldr	r2, [r7, #24]
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ae2:	4a1c      	ldr	r2, [pc, #112]	; (8000b54 <HAL_GPIO_Init+0x330>)
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ae8:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <HAL_GPIO_Init+0x330>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	43db      	mvns	r3, r3
 8000af2:	69ba      	ldr	r2, [r7, #24]
 8000af4:	4013      	ands	r3, r2
 8000af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d003      	beq.n	8000b0c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000b04:	69ba      	ldr	r2, [r7, #24]
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b0c:	4a11      	ldr	r2, [pc, #68]	; (8000b54 <HAL_GPIO_Init+0x330>)
 8000b0e:	69bb      	ldr	r3, [r7, #24]
 8000b10:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	3301      	adds	r3, #1
 8000b16:	61fb      	str	r3, [r7, #28]
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	2b0f      	cmp	r3, #15
 8000b1c:	f67f ae90 	bls.w	8000840 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b20:	bf00      	nop
 8000b22:	3724      	adds	r7, #36	; 0x24
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40013800 	.word	0x40013800
 8000b34:	40020000 	.word	0x40020000
 8000b38:	40020400 	.word	0x40020400
 8000b3c:	40020800 	.word	0x40020800
 8000b40:	40020c00 	.word	0x40020c00
 8000b44:	40021000 	.word	0x40021000
 8000b48:	40021400 	.word	0x40021400
 8000b4c:	40021800 	.word	0x40021800
 8000b50:	40021c00 	.word	0x40021c00
 8000b54:	40013c00 	.word	0x40013c00

08000b58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	460b      	mov	r3, r1
 8000b62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	691a      	ldr	r2, [r3, #16]
 8000b68:	887b      	ldrh	r3, [r7, #2]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d002      	beq.n	8000b76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b70:	2301      	movs	r3, #1
 8000b72:	73fb      	strb	r3, [r7, #15]
 8000b74:	e001      	b.n	8000b7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b76:	2300      	movs	r3, #0
 8000b78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3714      	adds	r7, #20
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	460b      	mov	r3, r1
 8000b92:	807b      	strh	r3, [r7, #2]
 8000b94:	4613      	mov	r3, r2
 8000b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b98:	787b      	ldrb	r3, [r7, #1]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d003      	beq.n	8000ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b9e:	887a      	ldrh	r2, [r7, #2]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ba4:	e003      	b.n	8000bae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ba6:	887b      	ldrh	r3, [r7, #2]
 8000ba8:	041a      	lsls	r2, r3, #16
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	619a      	str	r2, [r3, #24]
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8000bba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bbc:	b08f      	sub	sp, #60	; 0x3c
 8000bbe:	af0a      	add	r7, sp, #40	; 0x28
 8000bc0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d101      	bne.n	8000bcc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	e054      	b.n	8000c76 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d106      	bne.n	8000bec <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2200      	movs	r2, #0
 8000be2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f006 ffa8 	bl	8007b3c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2203      	movs	r2, #3
 8000bf0:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d102      	bne.n	8000c06 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2200      	movs	r2, #0
 8000c04:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f003 fd36 	bl	800467c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	603b      	str	r3, [r7, #0]
 8000c16:	687e      	ldr	r6, [r7, #4]
 8000c18:	466d      	mov	r5, sp
 8000c1a:	f106 0410 	add.w	r4, r6, #16
 8000c1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c2a:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c2e:	1d33      	adds	r3, r6, #4
 8000c30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c32:	6838      	ldr	r0, [r7, #0]
 8000c34:	f003 fcb0 	bl	8004598 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f003 fd2d 	bl	800469e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	603b      	str	r3, [r7, #0]
 8000c4a:	687e      	ldr	r6, [r7, #4]
 8000c4c:	466d      	mov	r5, sp
 8000c4e:	f106 0410 	add.w	r4, r6, #16
 8000c52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c62:	1d33      	adds	r3, r6, #4
 8000c64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c66:	6838      	ldr	r0, [r7, #0]
 8000c68:	f003 fe40 	bl	80048ec <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2201      	movs	r2, #1
 8000c70:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3714      	adds	r7, #20
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c7e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8000c7e:	b590      	push	{r4, r7, lr}
 8000c80:	b089      	sub	sp, #36	; 0x24
 8000c82:	af04      	add	r7, sp, #16
 8000c84:	6078      	str	r0, [r7, #4]
 8000c86:	4608      	mov	r0, r1
 8000c88:	4611      	mov	r1, r2
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	70fb      	strb	r3, [r7, #3]
 8000c90:	460b      	mov	r3, r1
 8000c92:	70bb      	strb	r3, [r7, #2]
 8000c94:	4613      	mov	r3, r2
 8000c96:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d101      	bne.n	8000ca6 <HAL_HCD_HC_Init+0x28>
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	e07f      	b.n	8000da6 <HAL_HCD_HC_Init+0x128>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2201      	movs	r2, #1
 8000caa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8000cae:	78fa      	ldrb	r2, [r7, #3]
 8000cb0:	6879      	ldr	r1, [r7, #4]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	4413      	add	r3, r2
 8000cb8:	00db      	lsls	r3, r3, #3
 8000cba:	440b      	add	r3, r1
 8000cbc:	333d      	adds	r3, #61	; 0x3d
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8000cc2:	78fa      	ldrb	r2, [r7, #3]
 8000cc4:	6879      	ldr	r1, [r7, #4]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	4413      	add	r3, r2
 8000ccc:	00db      	lsls	r3, r3, #3
 8000cce:	440b      	add	r3, r1
 8000cd0:	3338      	adds	r3, #56	; 0x38
 8000cd2:	787a      	ldrb	r2, [r7, #1]
 8000cd4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8000cd6:	78fa      	ldrb	r2, [r7, #3]
 8000cd8:	6879      	ldr	r1, [r7, #4]
 8000cda:	4613      	mov	r3, r2
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	4413      	add	r3, r2
 8000ce0:	00db      	lsls	r3, r3, #3
 8000ce2:	440b      	add	r3, r1
 8000ce4:	3340      	adds	r3, #64	; 0x40
 8000ce6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000ce8:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8000cea:	78fa      	ldrb	r2, [r7, #3]
 8000cec:	6879      	ldr	r1, [r7, #4]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	4413      	add	r3, r2
 8000cf4:	00db      	lsls	r3, r3, #3
 8000cf6:	440b      	add	r3, r1
 8000cf8:	3339      	adds	r3, #57	; 0x39
 8000cfa:	78fa      	ldrb	r2, [r7, #3]
 8000cfc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8000cfe:	78fa      	ldrb	r2, [r7, #3]
 8000d00:	6879      	ldr	r1, [r7, #4]
 8000d02:	4613      	mov	r3, r2
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	4413      	add	r3, r2
 8000d08:	00db      	lsls	r3, r3, #3
 8000d0a:	440b      	add	r3, r1
 8000d0c:	333f      	adds	r3, #63	; 0x3f
 8000d0e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000d12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8000d14:	78fa      	ldrb	r2, [r7, #3]
 8000d16:	78bb      	ldrb	r3, [r7, #2]
 8000d18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d1c:	b2d8      	uxtb	r0, r3
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	4613      	mov	r3, r2
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	4413      	add	r3, r2
 8000d26:	00db      	lsls	r3, r3, #3
 8000d28:	440b      	add	r3, r1
 8000d2a:	333a      	adds	r3, #58	; 0x3a
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8000d30:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	da0a      	bge.n	8000d4e <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000d38:	78fa      	ldrb	r2, [r7, #3]
 8000d3a:	6879      	ldr	r1, [r7, #4]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	4413      	add	r3, r2
 8000d42:	00db      	lsls	r3, r3, #3
 8000d44:	440b      	add	r3, r1
 8000d46:	333b      	adds	r3, #59	; 0x3b
 8000d48:	2201      	movs	r2, #1
 8000d4a:	701a      	strb	r2, [r3, #0]
 8000d4c:	e009      	b.n	8000d62 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8000d4e:	78fa      	ldrb	r2, [r7, #3]
 8000d50:	6879      	ldr	r1, [r7, #4]
 8000d52:	4613      	mov	r3, r2
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	4413      	add	r3, r2
 8000d58:	00db      	lsls	r3, r3, #3
 8000d5a:	440b      	add	r3, r1
 8000d5c:	333b      	adds	r3, #59	; 0x3b
 8000d5e:	2200      	movs	r2, #0
 8000d60:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8000d62:	78fa      	ldrb	r2, [r7, #3]
 8000d64:	6879      	ldr	r1, [r7, #4]
 8000d66:	4613      	mov	r3, r2
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	4413      	add	r3, r2
 8000d6c:	00db      	lsls	r3, r3, #3
 8000d6e:	440b      	add	r3, r1
 8000d70:	333c      	adds	r3, #60	; 0x3c
 8000d72:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000d76:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6818      	ldr	r0, [r3, #0]
 8000d7c:	787c      	ldrb	r4, [r7, #1]
 8000d7e:	78ba      	ldrb	r2, [r7, #2]
 8000d80:	78f9      	ldrb	r1, [r7, #3]
 8000d82:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d84:	9302      	str	r3, [sp, #8]
 8000d86:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d8a:	9301      	str	r3, [sp, #4]
 8000d8c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d90:	9300      	str	r3, [sp, #0]
 8000d92:	4623      	mov	r3, r4
 8000d94:	f003 ff2c 	bl	8004bf0 <USB_HC_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3714      	adds	r7, #20
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd90      	pop	{r4, r7, pc}

08000dae <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b084      	sub	sp, #16
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
 8000db6:	460b      	mov	r3, r1
 8000db8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d101      	bne.n	8000dcc <HAL_HCD_HC_Halt+0x1e>
 8000dc8:	2302      	movs	r3, #2
 8000dca:	e00f      	b.n	8000dec <HAL_HCD_HC_Halt+0x3e>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2201      	movs	r2, #1
 8000dd0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	78fa      	ldrb	r2, [r7, #3]
 8000dda:	4611      	mov	r1, r2
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f004 f966 	bl	80050ae <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2200      	movs	r2, #0
 8000de6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	4611      	mov	r1, r2
 8000e00:	461a      	mov	r2, r3
 8000e02:	4603      	mov	r3, r0
 8000e04:	70fb      	strb	r3, [r7, #3]
 8000e06:	460b      	mov	r3, r1
 8000e08:	70bb      	strb	r3, [r7, #2]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8000e0e:	78fa      	ldrb	r2, [r7, #3]
 8000e10:	6879      	ldr	r1, [r7, #4]
 8000e12:	4613      	mov	r3, r2
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	4413      	add	r3, r2
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	440b      	add	r3, r1
 8000e1c:	333b      	adds	r3, #59	; 0x3b
 8000e1e:	78ba      	ldrb	r2, [r7, #2]
 8000e20:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8000e22:	78fa      	ldrb	r2, [r7, #3]
 8000e24:	6879      	ldr	r1, [r7, #4]
 8000e26:	4613      	mov	r3, r2
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	4413      	add	r3, r2
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	440b      	add	r3, r1
 8000e30:	333f      	adds	r3, #63	; 0x3f
 8000e32:	787a      	ldrb	r2, [r7, #1]
 8000e34:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8000e36:	7c3b      	ldrb	r3, [r7, #16]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d10a      	bne.n	8000e52 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000e3c:	78fa      	ldrb	r2, [r7, #3]
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	4613      	mov	r3, r2
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	4413      	add	r3, r2
 8000e46:	00db      	lsls	r3, r3, #3
 8000e48:	440b      	add	r3, r1
 8000e4a:	3342      	adds	r3, #66	; 0x42
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	701a      	strb	r2, [r3, #0]
 8000e50:	e009      	b.n	8000e66 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000e52:	78fa      	ldrb	r2, [r7, #3]
 8000e54:	6879      	ldr	r1, [r7, #4]
 8000e56:	4613      	mov	r3, r2
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	4413      	add	r3, r2
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	440b      	add	r3, r1
 8000e60:	3342      	adds	r3, #66	; 0x42
 8000e62:	2202      	movs	r2, #2
 8000e64:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8000e66:	787b      	ldrb	r3, [r7, #1]
 8000e68:	2b03      	cmp	r3, #3
 8000e6a:	f200 80d6 	bhi.w	800101a <HAL_HCD_HC_SubmitRequest+0x226>
 8000e6e:	a201      	add	r2, pc, #4	; (adr r2, 8000e74 <HAL_HCD_HC_SubmitRequest+0x80>)
 8000e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e74:	08000e85 	.word	0x08000e85
 8000e78:	08001005 	.word	0x08001005
 8000e7c:	08000ef1 	.word	0x08000ef1
 8000e80:	08000f7b 	.word	0x08000f7b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8000e84:	7c3b      	ldrb	r3, [r7, #16]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	f040 80c9 	bne.w	800101e <HAL_HCD_HC_SubmitRequest+0x22a>
 8000e8c:	78bb      	ldrb	r3, [r7, #2]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	f040 80c5 	bne.w	800101e <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8000e94:	8b3b      	ldrh	r3, [r7, #24]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d109      	bne.n	8000eae <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8000e9a:	78fa      	ldrb	r2, [r7, #3]
 8000e9c:	6879      	ldr	r1, [r7, #4]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	4413      	add	r3, r2
 8000ea4:	00db      	lsls	r3, r3, #3
 8000ea6:	440b      	add	r3, r1
 8000ea8:	3351      	adds	r3, #81	; 0x51
 8000eaa:	2201      	movs	r2, #1
 8000eac:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000eae:	78fa      	ldrb	r2, [r7, #3]
 8000eb0:	6879      	ldr	r1, [r7, #4]
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	4413      	add	r3, r2
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	440b      	add	r3, r1
 8000ebc:	3351      	adds	r3, #81	; 0x51
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d10a      	bne.n	8000eda <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000ec4:	78fa      	ldrb	r2, [r7, #3]
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	4413      	add	r3, r2
 8000ece:	00db      	lsls	r3, r3, #3
 8000ed0:	440b      	add	r3, r1
 8000ed2:	3342      	adds	r3, #66	; 0x42
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8000ed8:	e0a1      	b.n	800101e <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000eda:	78fa      	ldrb	r2, [r7, #3]
 8000edc:	6879      	ldr	r1, [r7, #4]
 8000ede:	4613      	mov	r3, r2
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	4413      	add	r3, r2
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	440b      	add	r3, r1
 8000ee8:	3342      	adds	r3, #66	; 0x42
 8000eea:	2202      	movs	r2, #2
 8000eec:	701a      	strb	r2, [r3, #0]
      break;
 8000eee:	e096      	b.n	800101e <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8000ef0:	78bb      	ldrb	r3, [r7, #2]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d120      	bne.n	8000f38 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000ef6:	78fa      	ldrb	r2, [r7, #3]
 8000ef8:	6879      	ldr	r1, [r7, #4]
 8000efa:	4613      	mov	r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	4413      	add	r3, r2
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	440b      	add	r3, r1
 8000f04:	3351      	adds	r3, #81	; 0x51
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d10a      	bne.n	8000f22 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f0c:	78fa      	ldrb	r2, [r7, #3]
 8000f0e:	6879      	ldr	r1, [r7, #4]
 8000f10:	4613      	mov	r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	4413      	add	r3, r2
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	440b      	add	r3, r1
 8000f1a:	3342      	adds	r3, #66	; 0x42
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8000f20:	e07e      	b.n	8001020 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f22:	78fa      	ldrb	r2, [r7, #3]
 8000f24:	6879      	ldr	r1, [r7, #4]
 8000f26:	4613      	mov	r3, r2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	4413      	add	r3, r2
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	440b      	add	r3, r1
 8000f30:	3342      	adds	r3, #66	; 0x42
 8000f32:	2202      	movs	r2, #2
 8000f34:	701a      	strb	r2, [r3, #0]
      break;
 8000f36:	e073      	b.n	8001020 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000f38:	78fa      	ldrb	r2, [r7, #3]
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	4413      	add	r3, r2
 8000f42:	00db      	lsls	r3, r3, #3
 8000f44:	440b      	add	r3, r1
 8000f46:	3350      	adds	r3, #80	; 0x50
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d10a      	bne.n	8000f64 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f4e:	78fa      	ldrb	r2, [r7, #3]
 8000f50:	6879      	ldr	r1, [r7, #4]
 8000f52:	4613      	mov	r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	4413      	add	r3, r2
 8000f58:	00db      	lsls	r3, r3, #3
 8000f5a:	440b      	add	r3, r1
 8000f5c:	3342      	adds	r3, #66	; 0x42
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]
      break;
 8000f62:	e05d      	b.n	8001020 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f64:	78fa      	ldrb	r2, [r7, #3]
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	00db      	lsls	r3, r3, #3
 8000f70:	440b      	add	r3, r1
 8000f72:	3342      	adds	r3, #66	; 0x42
 8000f74:	2202      	movs	r2, #2
 8000f76:	701a      	strb	r2, [r3, #0]
      break;
 8000f78:	e052      	b.n	8001020 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8000f7a:	78bb      	ldrb	r3, [r7, #2]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d120      	bne.n	8000fc2 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000f80:	78fa      	ldrb	r2, [r7, #3]
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	4613      	mov	r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	4413      	add	r3, r2
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	440b      	add	r3, r1
 8000f8e:	3351      	adds	r3, #81	; 0x51
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d10a      	bne.n	8000fac <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f96:	78fa      	ldrb	r2, [r7, #3]
 8000f98:	6879      	ldr	r1, [r7, #4]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	4413      	add	r3, r2
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	440b      	add	r3, r1
 8000fa4:	3342      	adds	r3, #66	; 0x42
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8000faa:	e039      	b.n	8001020 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000fac:	78fa      	ldrb	r2, [r7, #3]
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	4413      	add	r3, r2
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	440b      	add	r3, r1
 8000fba:	3342      	adds	r3, #66	; 0x42
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	701a      	strb	r2, [r3, #0]
      break;
 8000fc0:	e02e      	b.n	8001020 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000fc2:	78fa      	ldrb	r2, [r7, #3]
 8000fc4:	6879      	ldr	r1, [r7, #4]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	4413      	add	r3, r2
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	440b      	add	r3, r1
 8000fd0:	3350      	adds	r3, #80	; 0x50
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d10a      	bne.n	8000fee <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000fd8:	78fa      	ldrb	r2, [r7, #3]
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	4413      	add	r3, r2
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	440b      	add	r3, r1
 8000fe6:	3342      	adds	r3, #66	; 0x42
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]
      break;
 8000fec:	e018      	b.n	8001020 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000fee:	78fa      	ldrb	r2, [r7, #3]
 8000ff0:	6879      	ldr	r1, [r7, #4]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	4413      	add	r3, r2
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	440b      	add	r3, r1
 8000ffc:	3342      	adds	r3, #66	; 0x42
 8000ffe:	2202      	movs	r2, #2
 8001000:	701a      	strb	r2, [r3, #0]
      break;
 8001002:	e00d      	b.n	8001020 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001004:	78fa      	ldrb	r2, [r7, #3]
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	4613      	mov	r3, r2
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	4413      	add	r3, r2
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	440b      	add	r3, r1
 8001012:	3342      	adds	r3, #66	; 0x42
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
      break;
 8001018:	e002      	b.n	8001020 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 800101a:	bf00      	nop
 800101c:	e000      	b.n	8001020 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 800101e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001020:	78fa      	ldrb	r2, [r7, #3]
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	4613      	mov	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	4413      	add	r3, r2
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	440b      	add	r3, r1
 800102e:	3344      	adds	r3, #68	; 0x44
 8001030:	697a      	ldr	r2, [r7, #20]
 8001032:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001034:	78fa      	ldrb	r2, [r7, #3]
 8001036:	8b39      	ldrh	r1, [r7, #24]
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	4613      	mov	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4413      	add	r3, r2
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	4403      	add	r3, r0
 8001044:	3348      	adds	r3, #72	; 0x48
 8001046:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001048:	78fa      	ldrb	r2, [r7, #3]
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	4613      	mov	r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	4413      	add	r3, r2
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	440b      	add	r3, r1
 8001056:	335c      	adds	r3, #92	; 0x5c
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800105c:	78fa      	ldrb	r2, [r7, #3]
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	4613      	mov	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	4413      	add	r3, r2
 8001066:	00db      	lsls	r3, r3, #3
 8001068:	440b      	add	r3, r1
 800106a:	334c      	adds	r3, #76	; 0x4c
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001070:	78fa      	ldrb	r2, [r7, #3]
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	4613      	mov	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	4413      	add	r3, r2
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	440b      	add	r3, r1
 800107e:	3339      	adds	r3, #57	; 0x39
 8001080:	78fa      	ldrb	r2, [r7, #3]
 8001082:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001084:	78fa      	ldrb	r2, [r7, #3]
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	4613      	mov	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	440b      	add	r3, r1
 8001092:	335d      	adds	r3, #93	; 0x5d
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6818      	ldr	r0, [r3, #0]
 800109c:	78fa      	ldrb	r2, [r7, #3]
 800109e:	4613      	mov	r3, r2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	4413      	add	r3, r2
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	3338      	adds	r3, #56	; 0x38
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	18d1      	adds	r1, r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	691b      	ldr	r3, [r3, #16]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	461a      	mov	r2, r3
 80010b4:	f003 fea6 	bl	8004e04 <USB_HC_StartXfer>
 80010b8:	4603      	mov	r3, r0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop

080010c4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f003 fbc3 	bl	8004866 <USB_GetMode>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	f040 80f1 	bne.w	80012ca <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f003 fba7 	bl	8004840 <USB_ReadInterrupts>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f000 80e7 	beq.w	80012c8 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4618      	mov	r0, r3
 8001100:	f003 fb9e 	bl	8004840 <USB_ReadInterrupts>
 8001104:	4603      	mov	r3, r0
 8001106:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800110a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800110e:	d104      	bne.n	800111a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001118:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f003 fb8e 	bl	8004840 <USB_ReadInterrupts>
 8001124:	4603      	mov	r3, r0
 8001126:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800112a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800112e:	d104      	bne.n	800113a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001138:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4618      	mov	r0, r3
 8001140:	f003 fb7e 	bl	8004840 <USB_ReadInterrupts>
 8001144:	4603      	mov	r3, r0
 8001146:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800114a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800114e:	d104      	bne.n	800115a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001158:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4618      	mov	r0, r3
 8001160:	f003 fb6e 	bl	8004840 <USB_ReadInterrupts>
 8001164:	4603      	mov	r3, r0
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	2b02      	cmp	r3, #2
 800116c:	d103      	bne.n	8001176 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2202      	movs	r2, #2
 8001174:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4618      	mov	r0, r3
 800117c:	f003 fb60 	bl	8004840 <USB_ReadInterrupts>
 8001180:	4603      	mov	r3, r0
 8001182:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001186:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800118a:	d117      	bne.n	80011bc <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800119a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800119e:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f006 fd49 	bl	8007c38 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2101      	movs	r1, #1
 80011ac:	4618      	mov	r0, r3
 80011ae:	f003 fc59 	bl	8004a64 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80011ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f003 fb3d 	bl	8004840 <USB_ReadInterrupts>
 80011c6:	4603      	mov	r3, r0
 80011c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80011cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011d0:	d102      	bne.n	80011d8 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f001 f8c8 	bl	8002368 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	f003 fb2f 	bl	8004840 <USB_ReadInterrupts>
 80011e2:	4603      	mov	r3, r0
 80011e4:	f003 0308 	and.w	r3, r3, #8
 80011e8:	2b08      	cmp	r3, #8
 80011ea:	d106      	bne.n	80011fa <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f006 fd07 	bl	8007c00 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2208      	movs	r2, #8
 80011f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f003 fb1e 	bl	8004840 <USB_ReadInterrupts>
 8001204:	4603      	mov	r3, r0
 8001206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800120a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800120e:	d138      	bne.n	8001282 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4618      	mov	r0, r3
 8001216:	f003 ff39 	bl	800508c <USB_HC_ReadInterrupt>
 800121a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	e025      	b.n	800126e <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	f003 030f 	and.w	r3, r3, #15
 8001228:	68ba      	ldr	r2, [r7, #8]
 800122a:	fa22 f303 	lsr.w	r3, r2, r3
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	2b00      	cmp	r3, #0
 8001234:	d018      	beq.n	8001268 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	015a      	lsls	r2, r3, #5
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	4413      	add	r3, r2
 800123e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001248:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800124c:	d106      	bne.n	800125c <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	b2db      	uxtb	r3, r3
 8001252:	4619      	mov	r1, r3
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f000 f8cf 	bl	80013f8 <HCD_HC_IN_IRQHandler>
 800125a:	e005      	b.n	8001268 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	b2db      	uxtb	r3, r3
 8001260:	4619      	mov	r1, r3
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f000 fc5f 	bl	8001b26 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	3301      	adds	r3, #1
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	429a      	cmp	r2, r3
 8001276:	d3d4      	bcc.n	8001222 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001280:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f003 fada 	bl	8004840 <USB_ReadInterrupts>
 800128c:	4603      	mov	r3, r0
 800128e:	f003 0310 	and.w	r3, r3, #16
 8001292:	2b10      	cmp	r3, #16
 8001294:	d101      	bne.n	800129a <HAL_HCD_IRQHandler+0x1d6>
 8001296:	2301      	movs	r3, #1
 8001298:	e000      	b.n	800129c <HAL_HCD_IRQHandler+0x1d8>
 800129a:	2300      	movs	r3, #0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d014      	beq.n	80012ca <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	699a      	ldr	r2, [r3, #24]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f022 0210 	bic.w	r2, r2, #16
 80012ae:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f000 ffad 	bl	8002210 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	699a      	ldr	r2, [r3, #24]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f042 0210 	orr.w	r2, r2, #16
 80012c4:	619a      	str	r2, [r3, #24]
 80012c6:	e000      	b.n	80012ca <HAL_HCD_IRQHandler+0x206>
      return;
 80012c8:	bf00      	nop
    }
  }
}
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d101      	bne.n	80012e6 <HAL_HCD_Start+0x16>
 80012e2:	2302      	movs	r3, #2
 80012e4:	e013      	b.n	800130e <HAL_HCD_Start+0x3e>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2201      	movs	r2, #1
 80012ea:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f003 f9b1 	bl	800465a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2101      	movs	r1, #1
 80012fe:	4618      	mov	r0, r3
 8001300:	f003 fc14 	bl	8004b2c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001324:	2b01      	cmp	r3, #1
 8001326:	d101      	bne.n	800132c <HAL_HCD_Stop+0x16>
 8001328:	2302      	movs	r3, #2
 800132a:	e00d      	b.n	8001348 <HAL_HCD_Stop+0x32>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2201      	movs	r2, #1
 8001330:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f003 fff3 	bl	8005324 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001346:	2300      	movs	r3, #0
}
 8001348:	4618      	mov	r0, r3
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f003 fbbb 	bl	8004ad8 <USB_ResetPort>
 8001362:	4603      	mov	r3, r0
}
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001378:	78fa      	ldrb	r2, [r7, #3]
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	4613      	mov	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	440b      	add	r3, r1
 8001386:	335c      	adds	r3, #92	; 0x5c
 8001388:	781b      	ldrb	r3, [r3, #0]
}
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	460b      	mov	r3, r1
 80013a0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80013a2:	78fa      	ldrb	r2, [r7, #3]
 80013a4:	6879      	ldr	r1, [r7, #4]
 80013a6:	4613      	mov	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	440b      	add	r3, r1
 80013b0:	334c      	adds	r3, #76	; 0x4c
 80013b2:	681b      	ldr	r3, [r3, #0]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f003 fbfd 	bl	8004bcc <USB_GetCurrentFrame>
 80013d2:	4603      	mov	r3, r0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f003 fbd8 	bl	8004b9e <USB_GetHostSpeed>
 80013ee:	4603      	mov	r3, r0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	460b      	mov	r3, r1
 8001402:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800140e:	78fb      	ldrb	r3, [r7, #3]
 8001410:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	015a      	lsls	r2, r3, #5
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	4413      	add	r3, r2
 800141a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	2b04      	cmp	r3, #4
 8001426:	d119      	bne.n	800145c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	015a      	lsls	r2, r3, #5
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	4413      	add	r3, r2
 8001430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001434:	461a      	mov	r2, r3
 8001436:	2304      	movs	r3, #4
 8001438:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	015a      	lsls	r2, r3, #5
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	4413      	add	r3, r2
 8001442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	68fa      	ldr	r2, [r7, #12]
 800144a:	0151      	lsls	r1, r2, #5
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	440a      	add	r2, r1
 8001450:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	60d3      	str	r3, [r2, #12]
 800145a:	e095      	b.n	8001588 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	015a      	lsls	r2, r3, #5
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	4413      	add	r3, r2
 8001464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f003 0320 	and.w	r3, r3, #32
 800146e:	2b20      	cmp	r3, #32
 8001470:	d109      	bne.n	8001486 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	015a      	lsls	r2, r3, #5
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	4413      	add	r3, r2
 800147a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800147e:	461a      	mov	r2, r3
 8001480:	2320      	movs	r3, #32
 8001482:	6093      	str	r3, [r2, #8]
 8001484:	e080      	b.n	8001588 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	015a      	lsls	r2, r3, #5
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	4413      	add	r3, r2
 800148e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f003 0308 	and.w	r3, r3, #8
 8001498:	2b08      	cmp	r3, #8
 800149a:	d134      	bne.n	8001506 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	015a      	lsls	r2, r3, #5
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	4413      	add	r3, r2
 80014a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	0151      	lsls	r1, r2, #5
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	440a      	add	r2, r1
 80014b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80014b6:	f043 0302 	orr.w	r3, r3, #2
 80014ba:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80014bc:	6879      	ldr	r1, [r7, #4]
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	4613      	mov	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	440b      	add	r3, r1
 80014ca:	335d      	adds	r3, #93	; 0x5d
 80014cc:	2205      	movs	r2, #5
 80014ce:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	015a      	lsls	r2, r3, #5
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	4413      	add	r3, r2
 80014d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014dc:	461a      	mov	r2, r3
 80014de:	2310      	movs	r3, #16
 80014e0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	015a      	lsls	r2, r3, #5
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4413      	add	r3, r2
 80014ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014ee:	461a      	mov	r2, r3
 80014f0:	2308      	movs	r3, #8
 80014f2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	4611      	mov	r1, r2
 80014fe:	4618      	mov	r0, r3
 8001500:	f003 fdd5 	bl	80050ae <USB_HC_Halt>
 8001504:	e040      	b.n	8001588 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	015a      	lsls	r2, r3, #5
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	4413      	add	r3, r2
 800150e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001518:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800151c:	d134      	bne.n	8001588 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	015a      	lsls	r2, r3, #5
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	4413      	add	r3, r2
 8001526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	68fa      	ldr	r2, [r7, #12]
 800152e:	0151      	lsls	r1, r2, #5
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	440a      	add	r2, r1
 8001534:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	b2d2      	uxtb	r2, r2
 8001546:	4611      	mov	r1, r2
 8001548:	4618      	mov	r0, r3
 800154a:	f003 fdb0 	bl	80050ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	015a      	lsls	r2, r3, #5
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	4413      	add	r3, r2
 8001556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800155a:	461a      	mov	r2, r3
 800155c:	2310      	movs	r3, #16
 800155e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	4613      	mov	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	440b      	add	r3, r1
 800156e:	335d      	adds	r3, #93	; 0x5d
 8001570:	2208      	movs	r2, #8
 8001572:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	015a      	lsls	r2, r3, #5
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	4413      	add	r3, r2
 800157c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001580:	461a      	mov	r2, r3
 8001582:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001586:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	015a      	lsls	r2, r3, #5
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	4413      	add	r3, r2
 8001590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800159a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800159e:	d122      	bne.n	80015e6 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	015a      	lsls	r2, r3, #5
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	4413      	add	r3, r2
 80015a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	0151      	lsls	r1, r2, #5
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	440a      	add	r2, r1
 80015b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80015ba:	f043 0302 	orr.w	r3, r3, #2
 80015be:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	4611      	mov	r1, r2
 80015ca:	4618      	mov	r0, r3
 80015cc:	f003 fd6f 	bl	80050ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	015a      	lsls	r2, r3, #5
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	4413      	add	r3, r2
 80015d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015dc:	461a      	mov	r2, r3
 80015de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015e2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80015e4:	e29b      	b.n	8001b1e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	015a      	lsls	r2, r3, #5
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	4413      	add	r3, r2
 80015ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	f040 80c1 	bne.w	8001780 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d01b      	beq.n	800163e <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	4613      	mov	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4413      	add	r3, r2
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	440b      	add	r3, r1
 8001614:	3348      	adds	r3, #72	; 0x48
 8001616:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	0159      	lsls	r1, r3, #5
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	440b      	add	r3, r1
 8001620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800162a:	1ad1      	subs	r1, r2, r3
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	4613      	mov	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	4403      	add	r3, r0
 800163a:	334c      	adds	r3, #76	; 0x4c
 800163c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	68fa      	ldr	r2, [r7, #12]
 8001642:	4613      	mov	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	440b      	add	r3, r1
 800164c:	335d      	adds	r3, #93	; 0x5d
 800164e:	2201      	movs	r2, #1
 8001650:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	4613      	mov	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	440b      	add	r3, r1
 8001660:	3358      	adds	r3, #88	; 0x58
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	015a      	lsls	r2, r3, #5
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	4413      	add	r3, r2
 800166e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001672:	461a      	mov	r2, r3
 8001674:	2301      	movs	r3, #1
 8001676:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001678:	6879      	ldr	r1, [r7, #4]
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	4613      	mov	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4413      	add	r3, r2
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	440b      	add	r3, r1
 8001686:	333f      	adds	r3, #63	; 0x3f
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d00a      	beq.n	80016a4 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	68fa      	ldr	r2, [r7, #12]
 8001692:	4613      	mov	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	440b      	add	r3, r1
 800169c:	333f      	adds	r3, #63	; 0x3f
 800169e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d121      	bne.n	80016e8 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	015a      	lsls	r2, r3, #5
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	4413      	add	r3, r2
 80016ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	0151      	lsls	r1, r2, #5
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	440a      	add	r2, r1
 80016ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80016be:	f043 0302 	orr.w	r3, r3, #2
 80016c2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	68fa      	ldr	r2, [r7, #12]
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	4611      	mov	r1, r2
 80016ce:	4618      	mov	r0, r3
 80016d0:	f003 fced 	bl	80050ae <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	015a      	lsls	r2, r3, #5
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	4413      	add	r3, r2
 80016dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016e0:	461a      	mov	r2, r3
 80016e2:	2310      	movs	r3, #16
 80016e4:	6093      	str	r3, [r2, #8]
 80016e6:	e034      	b.n	8001752 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80016e8:	6879      	ldr	r1, [r7, #4]
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	4613      	mov	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	440b      	add	r3, r1
 80016f6:	333f      	adds	r3, #63	; 0x3f
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b03      	cmp	r3, #3
 80016fc:	d129      	bne.n	8001752 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	015a      	lsls	r2, r3, #5
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	4413      	add	r3, r2
 8001706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68fa      	ldr	r2, [r7, #12]
 800170e:	0151      	lsls	r1, r2, #5
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	440a      	add	r2, r1
 8001714:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001718:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800171c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	68fa      	ldr	r2, [r7, #12]
 8001722:	4613      	mov	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	440b      	add	r3, r1
 800172c:	335c      	adds	r3, #92	; 0x5c
 800172e:	2201      	movs	r2, #1
 8001730:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	b2d8      	uxtb	r0, r3
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	68fa      	ldr	r2, [r7, #12]
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	440b      	add	r3, r1
 8001744:	335c      	adds	r3, #92	; 0x5c
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	461a      	mov	r2, r3
 800174a:	4601      	mov	r1, r0
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f006 fa81 	bl	8007c54 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	440b      	add	r3, r1
 8001760:	3350      	adds	r3, #80	; 0x50
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	f083 0301 	eor.w	r3, r3, #1
 8001768:	b2d8      	uxtb	r0, r3
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	4613      	mov	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	440b      	add	r3, r1
 8001778:	3350      	adds	r3, #80	; 0x50
 800177a:	4602      	mov	r2, r0
 800177c:	701a      	strb	r2, [r3, #0]
}
 800177e:	e1ce      	b.n	8001b1e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	015a      	lsls	r2, r3, #5
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	4413      	add	r3, r2
 8001788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b02      	cmp	r3, #2
 8001794:	f040 80f1 	bne.w	800197a <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	015a      	lsls	r2, r3, #5
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	4413      	add	r3, r2
 80017a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	0151      	lsls	r1, r2, #5
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	440a      	add	r2, r1
 80017ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80017b2:	f023 0302 	bic.w	r3, r3, #2
 80017b6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80017b8:	6879      	ldr	r1, [r7, #4]
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	4613      	mov	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4413      	add	r3, r2
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	440b      	add	r3, r1
 80017c6:	335d      	adds	r3, #93	; 0x5d
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d10a      	bne.n	80017e4 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	4613      	mov	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	440b      	add	r3, r1
 80017dc:	335c      	adds	r3, #92	; 0x5c
 80017de:	2201      	movs	r2, #1
 80017e0:	701a      	strb	r2, [r3, #0]
 80017e2:	e0b0      	b.n	8001946 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80017e4:	6879      	ldr	r1, [r7, #4]
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	4613      	mov	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	440b      	add	r3, r1
 80017f2:	335d      	adds	r3, #93	; 0x5d
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b05      	cmp	r3, #5
 80017f8:	d10a      	bne.n	8001810 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	4613      	mov	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	440b      	add	r3, r1
 8001808:	335c      	adds	r3, #92	; 0x5c
 800180a:	2205      	movs	r2, #5
 800180c:	701a      	strb	r2, [r3, #0]
 800180e:	e09a      	b.n	8001946 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001810:	6879      	ldr	r1, [r7, #4]
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	4613      	mov	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	440b      	add	r3, r1
 800181e:	335d      	adds	r3, #93	; 0x5d
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b06      	cmp	r3, #6
 8001824:	d00a      	beq.n	800183c <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	440b      	add	r3, r1
 8001834:	335d      	adds	r3, #93	; 0x5d
 8001836:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001838:	2b08      	cmp	r3, #8
 800183a:	d156      	bne.n	80018ea <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 800183c:	6879      	ldr	r1, [r7, #4]
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	4613      	mov	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	440b      	add	r3, r1
 800184a:	3358      	adds	r3, #88	; 0x58
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	1c59      	adds	r1, r3, #1
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	4613      	mov	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	4403      	add	r3, r0
 800185e:	3358      	adds	r3, #88	; 0x58
 8001860:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	440b      	add	r3, r1
 8001870:	3358      	adds	r3, #88	; 0x58
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b03      	cmp	r3, #3
 8001876:	d914      	bls.n	80018a2 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	4613      	mov	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	440b      	add	r3, r1
 8001886:	3358      	adds	r3, #88	; 0x58
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	4613      	mov	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	440b      	add	r3, r1
 800189a:	335c      	adds	r3, #92	; 0x5c
 800189c:	2204      	movs	r2, #4
 800189e:	701a      	strb	r2, [r3, #0]
 80018a0:	e009      	b.n	80018b6 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	4613      	mov	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	440b      	add	r3, r1
 80018b0:	335c      	adds	r3, #92	; 0x5c
 80018b2:	2202      	movs	r2, #2
 80018b4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	015a      	lsls	r2, r3, #5
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	4413      	add	r3, r2
 80018be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80018cc:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80018d4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	015a      	lsls	r2, r3, #5
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	4413      	add	r3, r2
 80018de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018e2:	461a      	mov	r2, r3
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	e02d      	b.n	8001946 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	4613      	mov	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	440b      	add	r3, r1
 80018f8:	335d      	adds	r3, #93	; 0x5d
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b03      	cmp	r3, #3
 80018fe:	d122      	bne.n	8001946 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	4613      	mov	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	440b      	add	r3, r1
 800190e:	335c      	adds	r3, #92	; 0x5c
 8001910:	2202      	movs	r2, #2
 8001912:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	015a      	lsls	r2, r3, #5
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	4413      	add	r3, r2
 800191c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800192a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001932:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	015a      	lsls	r2, r3, #5
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	4413      	add	r3, r2
 800193c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001940:	461a      	mov	r2, r3
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	015a      	lsls	r2, r3, #5
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	4413      	add	r3, r2
 800194e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001952:	461a      	mov	r2, r3
 8001954:	2302      	movs	r3, #2
 8001956:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	b2d8      	uxtb	r0, r3
 800195c:	6879      	ldr	r1, [r7, #4]
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	4613      	mov	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4413      	add	r3, r2
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	440b      	add	r3, r1
 800196a:	335c      	adds	r3, #92	; 0x5c
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	461a      	mov	r2, r3
 8001970:	4601      	mov	r1, r0
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f006 f96e 	bl	8007c54 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001978:	e0d1      	b.n	8001b1e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	015a      	lsls	r2, r3, #5
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	4413      	add	r3, r2
 8001982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800198c:	2b80      	cmp	r3, #128	; 0x80
 800198e:	d13e      	bne.n	8001a0e <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	015a      	lsls	r2, r3, #5
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	4413      	add	r3, r2
 8001998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	0151      	lsls	r1, r2, #5
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	440a      	add	r2, r1
 80019a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80019aa:	f043 0302 	orr.w	r3, r3, #2
 80019ae:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80019b0:	6879      	ldr	r1, [r7, #4]
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	4613      	mov	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	440b      	add	r3, r1
 80019be:	3358      	adds	r3, #88	; 0x58
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	1c59      	adds	r1, r3, #1
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	4613      	mov	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	4403      	add	r3, r0
 80019d2:	3358      	adds	r3, #88	; 0x58
 80019d4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	440b      	add	r3, r1
 80019e4:	335d      	adds	r3, #93	; 0x5d
 80019e6:	2206      	movs	r2, #6
 80019e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	b2d2      	uxtb	r2, r2
 80019f2:	4611      	mov	r1, r2
 80019f4:	4618      	mov	r0, r3
 80019f6:	f003 fb5a 	bl	80050ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	015a      	lsls	r2, r3, #5
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	4413      	add	r3, r2
 8001a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a06:	461a      	mov	r2, r3
 8001a08:	2380      	movs	r3, #128	; 0x80
 8001a0a:	6093      	str	r3, [r2, #8]
}
 8001a0c:	e087      	b.n	8001b1e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	015a      	lsls	r2, r3, #5
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	4413      	add	r3, r2
 8001a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 0310 	and.w	r3, r3, #16
 8001a20:	2b10      	cmp	r3, #16
 8001a22:	d17c      	bne.n	8001b1e <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001a24:	6879      	ldr	r1, [r7, #4]
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	440b      	add	r3, r1
 8001a32:	333f      	adds	r3, #63	; 0x3f
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b03      	cmp	r3, #3
 8001a38:	d122      	bne.n	8001a80 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	440b      	add	r3, r1
 8001a48:	3358      	adds	r3, #88	; 0x58
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	015a      	lsls	r2, r3, #5
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	4413      	add	r3, r2
 8001a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	0151      	lsls	r1, r2, #5
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	440a      	add	r2, r1
 8001a64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a68:	f043 0302 	orr.w	r3, r3, #2
 8001a6c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	4611      	mov	r1, r2
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f003 fb18 	bl	80050ae <USB_HC_Halt>
 8001a7e:	e045      	b.n	8001b0c <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001a80:	6879      	ldr	r1, [r7, #4]
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	440b      	add	r3, r1
 8001a8e:	333f      	adds	r3, #63	; 0x3f
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d00a      	beq.n	8001aac <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	440b      	add	r3, r1
 8001aa4:	333f      	adds	r3, #63	; 0x3f
 8001aa6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d12f      	bne.n	8001b0c <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	440b      	add	r3, r1
 8001aba:	3358      	adds	r3, #88	; 0x58
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d121      	bne.n	8001b0c <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8001ac8:	6879      	ldr	r1, [r7, #4]
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	4613      	mov	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	440b      	add	r3, r1
 8001ad6:	335d      	adds	r3, #93	; 0x5d
 8001ad8:	2203      	movs	r2, #3
 8001ada:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	015a      	lsls	r2, r3, #5
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	0151      	lsls	r1, r2, #5
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	440a      	add	r2, r1
 8001af2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001af6:	f043 0302 	orr.w	r3, r3, #2
 8001afa:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	4611      	mov	r1, r2
 8001b06:	4618      	mov	r0, r3
 8001b08:	f003 fad1 	bl	80050ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	015a      	lsls	r2, r3, #5
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	4413      	add	r3, r2
 8001b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b18:	461a      	mov	r2, r3
 8001b1a:	2310      	movs	r3, #16
 8001b1c:	6093      	str	r3, [r2, #8]
}
 8001b1e:	bf00      	nop
 8001b20:	3718      	adds	r7, #24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b086      	sub	sp, #24
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	460b      	mov	r3, r1
 8001b30:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001b3c:	78fb      	ldrb	r3, [r7, #3]
 8001b3e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	015a      	lsls	r2, r3, #5
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	4413      	add	r3, r2
 8001b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 0304 	and.w	r3, r3, #4
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d119      	bne.n	8001b8a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	015a      	lsls	r2, r3, #5
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b62:	461a      	mov	r2, r3
 8001b64:	2304      	movs	r3, #4
 8001b66:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	015a      	lsls	r2, r3, #5
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	4413      	add	r3, r2
 8001b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	0151      	lsls	r1, r2, #5
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	440a      	add	r2, r1
 8001b7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b82:	f043 0302 	orr.w	r3, r3, #2
 8001b86:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8001b88:	e33e      	b.n	8002208 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	015a      	lsls	r2, r3, #5
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	4413      	add	r3, r2
 8001b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 0320 	and.w	r3, r3, #32
 8001b9c:	2b20      	cmp	r3, #32
 8001b9e:	d141      	bne.n	8001c24 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	015a      	lsls	r2, r3, #5
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bac:	461a      	mov	r2, r3
 8001bae:	2320      	movs	r3, #32
 8001bb0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	440b      	add	r3, r1
 8001bc0:	333d      	adds	r3, #61	; 0x3d
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	f040 831f 	bne.w	8002208 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	440b      	add	r3, r1
 8001bd8:	333d      	adds	r3, #61	; 0x3d
 8001bda:	2200      	movs	r2, #0
 8001bdc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	4613      	mov	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	440b      	add	r3, r1
 8001bec:	335c      	adds	r3, #92	; 0x5c
 8001bee:	2202      	movs	r2, #2
 8001bf0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	015a      	lsls	r2, r3, #5
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	0151      	lsls	r1, r2, #5
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	440a      	add	r2, r1
 8001c08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c0c:	f043 0302 	orr.w	r3, r3, #2
 8001c10:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	4611      	mov	r1, r2
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f003 fa46 	bl	80050ae <USB_HC_Halt>
}
 8001c22:	e2f1      	b.n	8002208 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	015a      	lsls	r2, r3, #5
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c36:	2b40      	cmp	r3, #64	; 0x40
 8001c38:	d13f      	bne.n	8001cba <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	440b      	add	r3, r1
 8001c48:	335d      	adds	r3, #93	; 0x5d
 8001c4a:	2204      	movs	r2, #4
 8001c4c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	4613      	mov	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	440b      	add	r3, r1
 8001c5c:	333d      	adds	r3, #61	; 0x3d
 8001c5e:	2201      	movs	r2, #1
 8001c60:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	4613      	mov	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	440b      	add	r3, r1
 8001c70:	3358      	adds	r3, #88	; 0x58
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	015a      	lsls	r2, r3, #5
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	0151      	lsls	r1, r2, #5
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	440a      	add	r2, r1
 8001c8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c90:	f043 0302 	orr.w	r3, r3, #2
 8001c94:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f003 fa04 	bl	80050ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	015a      	lsls	r2, r3, #5
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	4413      	add	r3, r2
 8001cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	2340      	movs	r3, #64	; 0x40
 8001cb6:	6093      	str	r3, [r2, #8]
}
 8001cb8:	e2a6      	b.n	8002208 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	015a      	lsls	r2, r3, #5
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cd0:	d122      	bne.n	8001d18 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	015a      	lsls	r2, r3, #5
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	4413      	add	r3, r2
 8001cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	0151      	lsls	r1, r2, #5
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	440a      	add	r2, r1
 8001ce8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cec:	f043 0302 	orr.w	r3, r3, #2
 8001cf0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f003 f9d6 	bl	80050ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	015a      	lsls	r2, r3, #5
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4413      	add	r3, r2
 8001d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d0e:	461a      	mov	r2, r3
 8001d10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d14:	6093      	str	r3, [r2, #8]
}
 8001d16:	e277      	b.n	8002208 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	015a      	lsls	r2, r3, #5
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	4413      	add	r3, r2
 8001d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d135      	bne.n	8001d9a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	440b      	add	r3, r1
 8001d3c:	3358      	adds	r3, #88	; 0x58
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	015a      	lsls	r2, r3, #5
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	4413      	add	r3, r2
 8001d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	0151      	lsls	r1, r2, #5
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	440a      	add	r2, r1
 8001d58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d5c:	f043 0302 	orr.w	r3, r3, #2
 8001d60:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f003 f99e 	bl	80050ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	015a      	lsls	r2, r3, #5
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	4413      	add	r3, r2
 8001d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d7e:	461a      	mov	r2, r3
 8001d80:	2301      	movs	r3, #1
 8001d82:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001d84:	6879      	ldr	r1, [r7, #4]
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	440b      	add	r3, r1
 8001d92:	335d      	adds	r3, #93	; 0x5d
 8001d94:	2201      	movs	r2, #1
 8001d96:	701a      	strb	r2, [r3, #0]
}
 8001d98:	e236      	b.n	8002208 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	015a      	lsls	r2, r3, #5
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	4413      	add	r3, r2
 8001da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 0308 	and.w	r3, r3, #8
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	d12b      	bne.n	8001e08 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	015a      	lsls	r2, r3, #5
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4413      	add	r3, r2
 8001db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	2308      	movs	r3, #8
 8001dc0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	015a      	lsls	r2, r3, #5
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4413      	add	r3, r2
 8001dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	0151      	lsls	r1, r2, #5
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	440a      	add	r2, r1
 8001dd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ddc:	f043 0302 	orr.w	r3, r3, #2
 8001de0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	4611      	mov	r1, r2
 8001dec:	4618      	mov	r0, r3
 8001dee:	f003 f95e 	bl	80050ae <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	4613      	mov	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4413      	add	r3, r2
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	440b      	add	r3, r1
 8001e00:	335d      	adds	r3, #93	; 0x5d
 8001e02:	2205      	movs	r2, #5
 8001e04:	701a      	strb	r2, [r3, #0]
}
 8001e06:	e1ff      	b.n	8002208 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	015a      	lsls	r2, r3, #5
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	4413      	add	r3, r2
 8001e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 0310 	and.w	r3, r3, #16
 8001e1a:	2b10      	cmp	r3, #16
 8001e1c:	d155      	bne.n	8001eca <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	4613      	mov	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4413      	add	r3, r2
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	440b      	add	r3, r1
 8001e2c:	3358      	adds	r3, #88	; 0x58
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	4613      	mov	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4413      	add	r3, r2
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	440b      	add	r3, r1
 8001e40:	335d      	adds	r3, #93	; 0x5d
 8001e42:	2203      	movs	r2, #3
 8001e44:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	440b      	add	r3, r1
 8001e54:	333d      	adds	r3, #61	; 0x3d
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d114      	bne.n	8001e86 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	440b      	add	r3, r1
 8001e6a:	333c      	adds	r3, #60	; 0x3c
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d109      	bne.n	8001e86 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	4613      	mov	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	4413      	add	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	440b      	add	r3, r1
 8001e80:	333d      	adds	r3, #61	; 0x3d
 8001e82:	2201      	movs	r2, #1
 8001e84:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	015a      	lsls	r2, r3, #5
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	0151      	lsls	r1, r2, #5
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	440a      	add	r2, r1
 8001e9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ea0:	f043 0302 	orr.w	r3, r3, #2
 8001ea4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	4611      	mov	r1, r2
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f003 f8fc 	bl	80050ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	015a      	lsls	r2, r3, #5
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	2310      	movs	r3, #16
 8001ec6:	6093      	str	r3, [r2, #8]
}
 8001ec8:	e19e      	b.n	8002208 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	015a      	lsls	r2, r3, #5
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001edc:	2b80      	cmp	r3, #128	; 0x80
 8001ede:	d12b      	bne.n	8001f38 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	015a      	lsls	r2, r3, #5
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	0151      	lsls	r1, r2, #5
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	440a      	add	r2, r1
 8001ef6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001efa:	f043 0302 	orr.w	r3, r3, #2
 8001efe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	4611      	mov	r1, r2
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f003 f8cf 	bl	80050ae <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	4613      	mov	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	440b      	add	r3, r1
 8001f1e:	335d      	adds	r3, #93	; 0x5d
 8001f20:	2206      	movs	r2, #6
 8001f22:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	015a      	lsls	r2, r3, #5
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f30:	461a      	mov	r2, r3
 8001f32:	2380      	movs	r3, #128	; 0x80
 8001f34:	6093      	str	r3, [r2, #8]
}
 8001f36:	e167      	b.n	8002208 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	015a      	lsls	r2, r3, #5
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4413      	add	r3, r2
 8001f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f4e:	d135      	bne.n	8001fbc <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	015a      	lsls	r2, r3, #5
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	4413      	add	r3, r2
 8001f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	0151      	lsls	r1, r2, #5
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	440a      	add	r2, r1
 8001f66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f6a:	f043 0302 	orr.w	r3, r3, #2
 8001f6e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	b2d2      	uxtb	r2, r2
 8001f78:	4611      	mov	r1, r2
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f003 f897 	bl	80050ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	015a      	lsls	r2, r3, #5
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	4413      	add	r3, r2
 8001f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	2310      	movs	r3, #16
 8001f90:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	015a      	lsls	r2, r3, #5
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	4413      	add	r3, r2
 8001f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fa4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	4613      	mov	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	440b      	add	r3, r1
 8001fb4:	335d      	adds	r3, #93	; 0x5d
 8001fb6:	2208      	movs	r2, #8
 8001fb8:	701a      	strb	r2, [r3, #0]
}
 8001fba:	e125      	b.n	8002208 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	015a      	lsls	r2, r3, #5
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	f040 811a 	bne.w	8002208 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	015a      	lsls	r2, r3, #5
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	4413      	add	r3, r2
 8001fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	0151      	lsls	r1, r2, #5
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	440a      	add	r2, r1
 8001fea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fee:	f023 0302 	bic.w	r3, r3, #2
 8001ff2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	440b      	add	r3, r1
 8002002:	335d      	adds	r3, #93	; 0x5d
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d137      	bne.n	800207a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	4613      	mov	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	440b      	add	r3, r1
 8002018:	335c      	adds	r3, #92	; 0x5c
 800201a:	2201      	movs	r2, #1
 800201c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	4613      	mov	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	440b      	add	r3, r1
 800202c:	333f      	adds	r3, #63	; 0x3f
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b02      	cmp	r3, #2
 8002032:	d00b      	beq.n	800204c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	440b      	add	r3, r1
 8002042:	333f      	adds	r3, #63	; 0x3f
 8002044:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002046:	2b03      	cmp	r3, #3
 8002048:	f040 80c5 	bne.w	80021d6 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	4613      	mov	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	440b      	add	r3, r1
 800205a:	3351      	adds	r3, #81	; 0x51
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	f083 0301 	eor.w	r3, r3, #1
 8002062:	b2d8      	uxtb	r0, r3
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	4613      	mov	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	440b      	add	r3, r1
 8002072:	3351      	adds	r3, #81	; 0x51
 8002074:	4602      	mov	r2, r0
 8002076:	701a      	strb	r2, [r3, #0]
 8002078:	e0ad      	b.n	80021d6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	4613      	mov	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4413      	add	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	440b      	add	r3, r1
 8002088:	335d      	adds	r3, #93	; 0x5d
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b03      	cmp	r3, #3
 800208e:	d10a      	bne.n	80020a6 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	440b      	add	r3, r1
 800209e:	335c      	adds	r3, #92	; 0x5c
 80020a0:	2202      	movs	r2, #2
 80020a2:	701a      	strb	r2, [r3, #0]
 80020a4:	e097      	b.n	80021d6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	4613      	mov	r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	4413      	add	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	440b      	add	r3, r1
 80020b4:	335d      	adds	r3, #93	; 0x5d
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	d10a      	bne.n	80020d2 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	4613      	mov	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	440b      	add	r3, r1
 80020ca:	335c      	adds	r3, #92	; 0x5c
 80020cc:	2202      	movs	r2, #2
 80020ce:	701a      	strb	r2, [r3, #0]
 80020d0:	e081      	b.n	80021d6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	4613      	mov	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	440b      	add	r3, r1
 80020e0:	335d      	adds	r3, #93	; 0x5d
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b05      	cmp	r3, #5
 80020e6:	d10a      	bne.n	80020fe <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	440b      	add	r3, r1
 80020f6:	335c      	adds	r3, #92	; 0x5c
 80020f8:	2205      	movs	r2, #5
 80020fa:	701a      	strb	r2, [r3, #0]
 80020fc:	e06b      	b.n	80021d6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	440b      	add	r3, r1
 800210c:	335d      	adds	r3, #93	; 0x5d
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b06      	cmp	r3, #6
 8002112:	d00a      	beq.n	800212a <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	440b      	add	r3, r1
 8002122:	335d      	adds	r3, #93	; 0x5d
 8002124:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002126:	2b08      	cmp	r3, #8
 8002128:	d155      	bne.n	80021d6 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	4613      	mov	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	440b      	add	r3, r1
 8002138:	3358      	adds	r3, #88	; 0x58
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	1c59      	adds	r1, r3, #1
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	4613      	mov	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	4403      	add	r3, r0
 800214c:	3358      	adds	r3, #88	; 0x58
 800214e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	4613      	mov	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	440b      	add	r3, r1
 800215e:	3358      	adds	r3, #88	; 0x58
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2b03      	cmp	r3, #3
 8002164:	d914      	bls.n	8002190 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	4613      	mov	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	440b      	add	r3, r1
 8002174:	3358      	adds	r3, #88	; 0x58
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	440b      	add	r3, r1
 8002188:	335c      	adds	r3, #92	; 0x5c
 800218a:	2204      	movs	r2, #4
 800218c:	701a      	strb	r2, [r3, #0]
 800218e:	e009      	b.n	80021a4 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	440b      	add	r3, r1
 800219e:	335c      	adds	r3, #92	; 0x5c
 80021a0:	2202      	movs	r2, #2
 80021a2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	015a      	lsls	r2, r3, #5
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	4413      	add	r3, r2
 80021ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021ba:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021c2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	015a      	lsls	r2, r3, #5
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	4413      	add	r3, r2
 80021cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d0:	461a      	mov	r2, r3
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	015a      	lsls	r2, r3, #5
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	4413      	add	r3, r2
 80021de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e2:	461a      	mov	r2, r3
 80021e4:	2302      	movs	r3, #2
 80021e6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	b2d8      	uxtb	r0, r3
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	440b      	add	r3, r1
 80021fa:	335c      	adds	r3, #92	; 0x5c
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	461a      	mov	r2, r3
 8002200:	4601      	mov	r1, r0
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f005 fd26 	bl	8007c54 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002208:	bf00      	nop
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08a      	sub	sp, #40	; 0x28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	f003 030f 	and.w	r3, r3, #15
 8002230:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	0c5b      	lsrs	r3, r3, #17
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	091b      	lsrs	r3, r3, #4
 8002240:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002244:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	2b02      	cmp	r3, #2
 800224a:	d003      	beq.n	8002254 <HCD_RXQLVL_IRQHandler+0x44>
 800224c:	2b05      	cmp	r3, #5
 800224e:	f000 8082 	beq.w	8002356 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002252:	e083      	b.n	800235c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d07f      	beq.n	800235a <HCD_RXQLVL_IRQHandler+0x14a>
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4613      	mov	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	4413      	add	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	440b      	add	r3, r1
 8002268:	3344      	adds	r3, #68	; 0x44
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d074      	beq.n	800235a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6818      	ldr	r0, [r3, #0]
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4613      	mov	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	440b      	add	r3, r1
 8002282:	3344      	adds	r3, #68	; 0x44
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	b292      	uxth	r2, r2
 800228a:	4619      	mov	r1, r3
 800228c:	f002 faaf 	bl	80047ee <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4613      	mov	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	440b      	add	r3, r1
 800229e:	3344      	adds	r3, #68	; 0x44
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	18d1      	adds	r1, r2, r3
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	4613      	mov	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4413      	add	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4403      	add	r3, r0
 80022b4:	3344      	adds	r3, #68	; 0x44
 80022b6:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4613      	mov	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	440b      	add	r3, r1
 80022c6:	334c      	adds	r3, #76	; 0x4c
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	18d1      	adds	r1, r2, r3
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4613      	mov	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	4403      	add	r3, r0
 80022dc:	334c      	adds	r3, #76	; 0x4c
 80022de:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	015a      	lsls	r2, r3, #5
 80022e4:	6a3b      	ldr	r3, [r7, #32]
 80022e6:	4413      	add	r3, r2
 80022e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ec:	691a      	ldr	r2, [r3, #16]
 80022ee:	4b1d      	ldr	r3, [pc, #116]	; (8002364 <HCD_RXQLVL_IRQHandler+0x154>)
 80022f0:	4013      	ands	r3, r2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d031      	beq.n	800235a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	015a      	lsls	r2, r3, #5
 80022fa:	6a3b      	ldr	r3, [r7, #32]
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800230c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002314:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	015a      	lsls	r2, r3, #5
 800231a:	6a3b      	ldr	r3, [r7, #32]
 800231c:	4413      	add	r3, r2
 800231e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002322:	461a      	mov	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4613      	mov	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	440b      	add	r3, r1
 8002336:	3350      	adds	r3, #80	; 0x50
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	f083 0301 	eor.w	r3, r3, #1
 800233e:	b2d8      	uxtb	r0, r3
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4613      	mov	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	440b      	add	r3, r1
 800234e:	3350      	adds	r3, #80	; 0x50
 8002350:	4602      	mov	r2, r0
 8002352:	701a      	strb	r2, [r3, #0]
      break;
 8002354:	e001      	b.n	800235a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002356:	bf00      	nop
 8002358:	e000      	b.n	800235c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800235a:	bf00      	nop
  }
}
 800235c:	bf00      	nop
 800235e:	3728      	adds	r7, #40	; 0x28
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	1ff80000 	.word	0x1ff80000

08002368 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002394:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b02      	cmp	r3, #2
 800239e:	d113      	bne.n	80023c8 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d10a      	bne.n	80023c0 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	699a      	ldr	r2, [r3, #24]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80023b8:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f005 fc2e 	bl	8007c1c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	f043 0302 	orr.w	r3, r3, #2
 80023c6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f003 0308 	and.w	r3, r3, #8
 80023ce:	2b08      	cmp	r3, #8
 80023d0:	d147      	bne.n	8002462 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	f043 0308 	orr.w	r3, r3, #8
 80023d8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b04      	cmp	r3, #4
 80023e2:	d129      	bne.n	8002438 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d113      	bne.n	8002414 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80023f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80023f6:	d106      	bne.n	8002406 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2102      	movs	r1, #2
 80023fe:	4618      	mov	r0, r3
 8002400:	f002 fb30 	bl	8004a64 <USB_InitFSLSPClkSel>
 8002404:	e011      	b.n	800242a <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2101      	movs	r1, #1
 800240c:	4618      	mov	r0, r3
 800240e:	f002 fb29 	bl	8004a64 <USB_InitFSLSPClkSel>
 8002412:	e00a      	b.n	800242a <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d106      	bne.n	800242a <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002422:	461a      	mov	r2, r3
 8002424:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002428:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f005 fc20 	bl	8007c70 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f005 fbf3 	bl	8007c1c <HAL_HCD_Connect_Callback>
 8002436:	e014      	b.n	8002462 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f005 fc27 	bl	8007c8c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800244c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002450:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	699a      	ldr	r2, [r3, #24]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002460:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f003 0320 	and.w	r3, r3, #32
 8002468:	2b20      	cmp	r3, #32
 800246a:	d103      	bne.n	8002474 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	f043 0320 	orr.w	r3, r3, #32
 8002472:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800247a:	461a      	mov	r2, r3
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	6013      	str	r3, [r2, #0]
}
 8002480:	bf00      	nop
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e11f      	b.n	80026da <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d106      	bne.n	80024b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f005 f92c 	bl	800770c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2224      	movs	r2, #36	; 0x24
 80024b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 0201 	bic.w	r2, r2, #1
 80024ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024ec:	f001 f9de 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 80024f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	4a7b      	ldr	r2, [pc, #492]	; (80026e4 <HAL_I2C_Init+0x25c>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d807      	bhi.n	800250c <HAL_I2C_Init+0x84>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4a7a      	ldr	r2, [pc, #488]	; (80026e8 <HAL_I2C_Init+0x260>)
 8002500:	4293      	cmp	r3, r2
 8002502:	bf94      	ite	ls
 8002504:	2301      	movls	r3, #1
 8002506:	2300      	movhi	r3, #0
 8002508:	b2db      	uxtb	r3, r3
 800250a:	e006      	b.n	800251a <HAL_I2C_Init+0x92>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4a77      	ldr	r2, [pc, #476]	; (80026ec <HAL_I2C_Init+0x264>)
 8002510:	4293      	cmp	r3, r2
 8002512:	bf94      	ite	ls
 8002514:	2301      	movls	r3, #1
 8002516:	2300      	movhi	r3, #0
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e0db      	b.n	80026da <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	4a72      	ldr	r2, [pc, #456]	; (80026f0 <HAL_I2C_Init+0x268>)
 8002526:	fba2 2303 	umull	r2, r3, r2, r3
 800252a:	0c9b      	lsrs	r3, r3, #18
 800252c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68ba      	ldr	r2, [r7, #8]
 800253e:	430a      	orrs	r2, r1
 8002540:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	4a64      	ldr	r2, [pc, #400]	; (80026e4 <HAL_I2C_Init+0x25c>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d802      	bhi.n	800255c <HAL_I2C_Init+0xd4>
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	3301      	adds	r3, #1
 800255a:	e009      	b.n	8002570 <HAL_I2C_Init+0xe8>
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002562:	fb02 f303 	mul.w	r3, r2, r3
 8002566:	4a63      	ldr	r2, [pc, #396]	; (80026f4 <HAL_I2C_Init+0x26c>)
 8002568:	fba2 2303 	umull	r2, r3, r2, r3
 800256c:	099b      	lsrs	r3, r3, #6
 800256e:	3301      	adds	r3, #1
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6812      	ldr	r2, [r2, #0]
 8002574:	430b      	orrs	r3, r1
 8002576:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002582:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	4956      	ldr	r1, [pc, #344]	; (80026e4 <HAL_I2C_Init+0x25c>)
 800258c:	428b      	cmp	r3, r1
 800258e:	d80d      	bhi.n	80025ac <HAL_I2C_Init+0x124>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	1e59      	subs	r1, r3, #1
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	fbb1 f3f3 	udiv	r3, r1, r3
 800259e:	3301      	adds	r3, #1
 80025a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025a4:	2b04      	cmp	r3, #4
 80025a6:	bf38      	it	cc
 80025a8:	2304      	movcc	r3, #4
 80025aa:	e04f      	b.n	800264c <HAL_I2C_Init+0x1c4>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d111      	bne.n	80025d8 <HAL_I2C_Init+0x150>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	1e58      	subs	r0, r3, #1
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6859      	ldr	r1, [r3, #4]
 80025bc:	460b      	mov	r3, r1
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	440b      	add	r3, r1
 80025c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025c6:	3301      	adds	r3, #1
 80025c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	bf0c      	ite	eq
 80025d0:	2301      	moveq	r3, #1
 80025d2:	2300      	movne	r3, #0
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	e012      	b.n	80025fe <HAL_I2C_Init+0x176>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	1e58      	subs	r0, r3, #1
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6859      	ldr	r1, [r3, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	440b      	add	r3, r1
 80025e6:	0099      	lsls	r1, r3, #2
 80025e8:	440b      	add	r3, r1
 80025ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ee:	3301      	adds	r3, #1
 80025f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	bf0c      	ite	eq
 80025f8:	2301      	moveq	r3, #1
 80025fa:	2300      	movne	r3, #0
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <HAL_I2C_Init+0x17e>
 8002602:	2301      	movs	r3, #1
 8002604:	e022      	b.n	800264c <HAL_I2C_Init+0x1c4>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10e      	bne.n	800262c <HAL_I2C_Init+0x1a4>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	1e58      	subs	r0, r3, #1
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6859      	ldr	r1, [r3, #4]
 8002616:	460b      	mov	r3, r1
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	440b      	add	r3, r1
 800261c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002620:	3301      	adds	r3, #1
 8002622:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002626:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800262a:	e00f      	b.n	800264c <HAL_I2C_Init+0x1c4>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	1e58      	subs	r0, r3, #1
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6859      	ldr	r1, [r3, #4]
 8002634:	460b      	mov	r3, r1
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	440b      	add	r3, r1
 800263a:	0099      	lsls	r1, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002642:	3301      	adds	r3, #1
 8002644:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002648:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	6809      	ldr	r1, [r1, #0]
 8002650:	4313      	orrs	r3, r2
 8002652:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69da      	ldr	r2, [r3, #28]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	430a      	orrs	r2, r1
 800266e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800267a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6911      	ldr	r1, [r2, #16]
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	68d2      	ldr	r2, [r2, #12]
 8002686:	4311      	orrs	r1, r2
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	6812      	ldr	r2, [r2, #0]
 800268c:	430b      	orrs	r3, r1
 800268e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	695a      	ldr	r2, [r3, #20]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0201 	orr.w	r2, r2, #1
 80026ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2220      	movs	r2, #32
 80026c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	000186a0 	.word	0x000186a0
 80026e8:	001e847f 	.word	0x001e847f
 80026ec:	003d08ff 	.word	0x003d08ff
 80026f0:	431bde83 	.word	0x431bde83
 80026f4:	10624dd3 	.word	0x10624dd3

080026f8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b088      	sub	sp, #32
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e128      	b.n	800295c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d109      	bne.n	800272a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a90      	ldr	r2, [pc, #576]	; (8002964 <HAL_I2S_Init+0x26c>)
 8002722:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f005 f839 	bl	800779c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2202      	movs	r2, #2
 800272e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	69db      	ldr	r3, [r3, #28]
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002740:	f023 030f 	bic.w	r3, r3, #15
 8002744:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2202      	movs	r2, #2
 800274c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	2b02      	cmp	r3, #2
 8002754:	d060      	beq.n	8002818 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d102      	bne.n	8002764 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800275e:	2310      	movs	r3, #16
 8002760:	617b      	str	r3, [r7, #20]
 8002762:	e001      	b.n	8002768 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002764:	2320      	movs	r3, #32
 8002766:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2b20      	cmp	r3, #32
 800276e:	d802      	bhi.n	8002776 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002776:	2001      	movs	r0, #1
 8002778:	f001 f9a2 	bl	8003ac0 <HAL_RCCEx_GetPeriphCLKFreq>
 800277c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002786:	d125      	bne.n	80027d4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d010      	beq.n	80027b2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	fbb2 f2f3 	udiv	r2, r2, r3
 800279a:	4613      	mov	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	461a      	mov	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ac:	3305      	adds	r3, #5
 80027ae:	613b      	str	r3, [r7, #16]
 80027b0:	e01f      	b.n	80027f2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80027bc:	4613      	mov	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	461a      	mov	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ce:	3305      	adds	r3, #5
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	e00e      	b.n	80027f2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80027dc:	4613      	mov	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	461a      	mov	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ee:	3305      	adds	r3, #5
 80027f0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	4a5c      	ldr	r2, [pc, #368]	; (8002968 <HAL_I2S_Init+0x270>)
 80027f6:	fba2 2303 	umull	r2, r3, r2, r3
 80027fa:	08db      	lsrs	r3, r3, #3
 80027fc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	085b      	lsrs	r3, r3, #1
 800280e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	021b      	lsls	r3, r3, #8
 8002814:	61bb      	str	r3, [r7, #24]
 8002816:	e003      	b.n	8002820 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002818:	2302      	movs	r3, #2
 800281a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800281c:	2300      	movs	r3, #0
 800281e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d902      	bls.n	800282c <HAL_I2S_Init+0x134>
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	2bff      	cmp	r3, #255	; 0xff
 800282a:	d907      	bls.n	800283c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002830:	f043 0210 	orr.w	r2, r3, #16
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e08f      	b.n	800295c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691a      	ldr	r2, [r3, #16]
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	ea42 0103 	orr.w	r1, r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	69fa      	ldr	r2, [r7, #28]
 800284c:	430a      	orrs	r2, r1
 800284e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800285a:	f023 030f 	bic.w	r3, r3, #15
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6851      	ldr	r1, [r2, #4]
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	6892      	ldr	r2, [r2, #8]
 8002866:	4311      	orrs	r1, r2
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	68d2      	ldr	r2, [r2, #12]
 800286c:	4311      	orrs	r1, r2
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6992      	ldr	r2, [r2, #24]
 8002872:	430a      	orrs	r2, r1
 8002874:	431a      	orrs	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800287e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d161      	bne.n	800294c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a38      	ldr	r2, [pc, #224]	; (800296c <HAL_I2S_Init+0x274>)
 800288c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a37      	ldr	r2, [pc, #220]	; (8002970 <HAL_I2S_Init+0x278>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d101      	bne.n	800289c <HAL_I2S_Init+0x1a4>
 8002898:	4b36      	ldr	r3, [pc, #216]	; (8002974 <HAL_I2S_Init+0x27c>)
 800289a:	e001      	b.n	80028a0 <HAL_I2S_Init+0x1a8>
 800289c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	6812      	ldr	r2, [r2, #0]
 80028a6:	4932      	ldr	r1, [pc, #200]	; (8002970 <HAL_I2S_Init+0x278>)
 80028a8:	428a      	cmp	r2, r1
 80028aa:	d101      	bne.n	80028b0 <HAL_I2S_Init+0x1b8>
 80028ac:	4a31      	ldr	r2, [pc, #196]	; (8002974 <HAL_I2S_Init+0x27c>)
 80028ae:	e001      	b.n	80028b4 <HAL_I2S_Init+0x1bc>
 80028b0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80028b4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80028b8:	f023 030f 	bic.w	r3, r3, #15
 80028bc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a2b      	ldr	r2, [pc, #172]	; (8002970 <HAL_I2S_Init+0x278>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d101      	bne.n	80028cc <HAL_I2S_Init+0x1d4>
 80028c8:	4b2a      	ldr	r3, [pc, #168]	; (8002974 <HAL_I2S_Init+0x27c>)
 80028ca:	e001      	b.n	80028d0 <HAL_I2S_Init+0x1d8>
 80028cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028d0:	2202      	movs	r2, #2
 80028d2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a25      	ldr	r2, [pc, #148]	; (8002970 <HAL_I2S_Init+0x278>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d101      	bne.n	80028e2 <HAL_I2S_Init+0x1ea>
 80028de:	4b25      	ldr	r3, [pc, #148]	; (8002974 <HAL_I2S_Init+0x27c>)
 80028e0:	e001      	b.n	80028e6 <HAL_I2S_Init+0x1ee>
 80028e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028e6:	69db      	ldr	r3, [r3, #28]
 80028e8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028f2:	d003      	beq.n	80028fc <HAL_I2S_Init+0x204>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d103      	bne.n	8002904 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80028fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	e001      	b.n	8002908 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002904:	2300      	movs	r3, #0
 8002906:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	b299      	uxth	r1, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800291e:	4303      	orrs	r3, r0
 8002920:	b29b      	uxth	r3, r3
 8002922:	430b      	orrs	r3, r1
 8002924:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002926:	4313      	orrs	r3, r2
 8002928:	b29a      	uxth	r2, r3
 800292a:	897b      	ldrh	r3, [r7, #10]
 800292c:	4313      	orrs	r3, r2
 800292e:	b29b      	uxth	r3, r3
 8002930:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002934:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a0d      	ldr	r2, [pc, #52]	; (8002970 <HAL_I2S_Init+0x278>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d101      	bne.n	8002944 <HAL_I2S_Init+0x24c>
 8002940:	4b0c      	ldr	r3, [pc, #48]	; (8002974 <HAL_I2S_Init+0x27c>)
 8002942:	e001      	b.n	8002948 <HAL_I2S_Init+0x250>
 8002944:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002948:	897a      	ldrh	r2, [r7, #10]
 800294a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3720      	adds	r7, #32
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	08002a6f 	.word	0x08002a6f
 8002968:	cccccccd 	.word	0xcccccccd
 800296c:	08002b85 	.word	0x08002b85
 8002970:	40003800 	.word	0x40003800
 8002974:	40003400 	.word	0x40003400

08002978 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c0:	881a      	ldrh	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	1c9a      	adds	r2, r3, #2
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	3b01      	subs	r3, #1
 80029da:	b29a      	uxth	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10e      	bne.n	8002a08 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80029f8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7ff ffb8 	bl	8002978 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002a08:	bf00      	nop
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a22:	b292      	uxth	r2, r2
 8002a24:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2a:	1c9a      	adds	r2, r3, #2
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	3b01      	subs	r3, #1
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10e      	bne.n	8002a66 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a56:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7ff ff93 	bl	800298c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002a66:	bf00      	nop
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b086      	sub	sp, #24
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d13a      	bne.n	8002b00 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d109      	bne.n	8002aa8 <I2S_IRQHandler+0x3a>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a9e:	2b40      	cmp	r3, #64	; 0x40
 8002aa0:	d102      	bne.n	8002aa8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7ff ffb4 	bl	8002a10 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aae:	2b40      	cmp	r3, #64	; 0x40
 8002ab0:	d126      	bne.n	8002b00 <I2S_IRQHandler+0x92>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f003 0320 	and.w	r3, r3, #32
 8002abc:	2b20      	cmp	r3, #32
 8002abe:	d11f      	bne.n	8002b00 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ace:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	613b      	str	r3, [r7, #16]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	613b      	str	r3, [r7, #16]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	613b      	str	r3, [r7, #16]
 8002ae4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af2:	f043 0202 	orr.w	r2, r3, #2
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7ff ff50 	bl	80029a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b03      	cmp	r3, #3
 8002b0a:	d136      	bne.n	8002b7a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d109      	bne.n	8002b2a <I2S_IRQHandler+0xbc>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b20:	2b80      	cmp	r3, #128	; 0x80
 8002b22:	d102      	bne.n	8002b2a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f7ff ff45 	bl	80029b4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	f003 0308 	and.w	r3, r3, #8
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	d122      	bne.n	8002b7a <I2S_IRQHandler+0x10c>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f003 0320 	and.w	r3, r3, #32
 8002b3e:	2b20      	cmp	r3, #32
 8002b40:	d11b      	bne.n	8002b7a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b50:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002b52:	2300      	movs	r3, #0
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6c:	f043 0204 	orr.w	r2, r3, #4
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f7ff ff13 	bl	80029a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b7a:	bf00      	nop
 8002b7c:	3718      	adds	r7, #24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
	...

08002b84 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b088      	sub	sp, #32
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4aa2      	ldr	r2, [pc, #648]	; (8002e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d101      	bne.n	8002ba2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002b9e:	4ba2      	ldr	r3, [pc, #648]	; (8002e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002ba0:	e001      	b.n	8002ba6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002ba2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a9b      	ldr	r2, [pc, #620]	; (8002e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d101      	bne.n	8002bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002bbc:	4b9a      	ldr	r3, [pc, #616]	; (8002e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002bbe:	e001      	b.n	8002bc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002bc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bd0:	d004      	beq.n	8002bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f040 8099 	bne.w	8002d0e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d107      	bne.n	8002bf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d002      	beq.n	8002bf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 f925 	bl	8002e40 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d107      	bne.n	8002c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f9c8 	bl	8002fa0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c16:	2b40      	cmp	r3, #64	; 0x40
 8002c18:	d13a      	bne.n	8002c90 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	f003 0320 	and.w	r3, r3, #32
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d035      	beq.n	8002c90 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a7e      	ldr	r2, [pc, #504]	; (8002e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d101      	bne.n	8002c32 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002c2e:	4b7e      	ldr	r3, [pc, #504]	; (8002e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c30:	e001      	b.n	8002c36 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002c32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4979      	ldr	r1, [pc, #484]	; (8002e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c3e:	428b      	cmp	r3, r1
 8002c40:	d101      	bne.n	8002c46 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002c42:	4b79      	ldr	r3, [pc, #484]	; (8002e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c44:	e001      	b.n	8002c4a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002c46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c4a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c4e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c5e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002c60:	2300      	movs	r3, #0
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c82:	f043 0202 	orr.w	r2, r3, #2
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7ff fe88 	bl	80029a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	2b08      	cmp	r3, #8
 8002c98:	f040 80be 	bne.w	8002e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f003 0320 	and.w	r3, r3, #32
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 80b8 	beq.w	8002e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002cb6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a59      	ldr	r2, [pc, #356]	; (8002e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d101      	bne.n	8002cc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002cc2:	4b59      	ldr	r3, [pc, #356]	; (8002e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002cc4:	e001      	b.n	8002cca <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002cc6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4954      	ldr	r1, [pc, #336]	; (8002e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002cd2:	428b      	cmp	r3, r1
 8002cd4:	d101      	bne.n	8002cda <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002cd6:	4b54      	ldr	r3, [pc, #336]	; (8002e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002cd8:	e001      	b.n	8002cde <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002cda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cde:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ce2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	60bb      	str	r3, [r7, #8]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	60bb      	str	r3, [r7, #8]
 8002cf0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfe:	f043 0204 	orr.w	r2, r3, #4
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7ff fe4a 	bl	80029a0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d0c:	e084      	b.n	8002e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d107      	bne.n	8002d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d002      	beq.n	8002d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f8be 	bl	8002ea4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d107      	bne.n	8002d42 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d002      	beq.n	8002d42 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 f8fd 	bl	8002f3c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d48:	2b40      	cmp	r3, #64	; 0x40
 8002d4a:	d12f      	bne.n	8002dac <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	f003 0320 	and.w	r3, r3, #32
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d02a      	beq.n	8002dac <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d64:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a2e      	ldr	r2, [pc, #184]	; (8002e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d101      	bne.n	8002d74 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002d70:	4b2d      	ldr	r3, [pc, #180]	; (8002e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d72:	e001      	b.n	8002d78 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002d74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4929      	ldr	r1, [pc, #164]	; (8002e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d80:	428b      	cmp	r3, r1
 8002d82:	d101      	bne.n	8002d88 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002d84:	4b28      	ldr	r3, [pc, #160]	; (8002e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d86:	e001      	b.n	8002d8c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002d88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d8c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d90:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9e:	f043 0202 	orr.w	r2, r3, #2
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7ff fdfa 	bl	80029a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	f003 0308 	and.w	r3, r3, #8
 8002db2:	2b08      	cmp	r3, #8
 8002db4:	d131      	bne.n	8002e1a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	f003 0320 	and.w	r3, r3, #32
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d02c      	beq.n	8002e1a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a17      	ldr	r2, [pc, #92]	; (8002e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d101      	bne.n	8002dce <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002dca:	4b17      	ldr	r3, [pc, #92]	; (8002e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002dcc:	e001      	b.n	8002dd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002dce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4912      	ldr	r1, [pc, #72]	; (8002e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002dda:	428b      	cmp	r3, r1
 8002ddc:	d101      	bne.n	8002de2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002dde:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002de0:	e001      	b.n	8002de6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002de2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002de6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002dea:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002dfa:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e08:	f043 0204 	orr.w	r2, r3, #4
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7ff fdc5 	bl	80029a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e16:	e000      	b.n	8002e1a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e18:	bf00      	nop
}
 8002e1a:	bf00      	nop
 8002e1c:	3720      	adds	r7, #32
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40003800 	.word	0x40003800
 8002e28:	40003400 	.word	0x40003400

08002e2c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	1c99      	adds	r1, r3, #2
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	6251      	str	r1, [r2, #36]	; 0x24
 8002e52:	881a      	ldrh	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	3b01      	subs	r3, #1
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d113      	bne.n	8002e9a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e80:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d106      	bne.n	8002e9a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f7ff ffc9 	bl	8002e2c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e9a:	bf00      	nop
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
	...

08002ea4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	1c99      	adds	r1, r3, #2
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	6251      	str	r1, [r2, #36]	; 0x24
 8002eb6:	8819      	ldrh	r1, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a1d      	ldr	r2, [pc, #116]	; (8002f34 <I2SEx_TxISR_I2SExt+0x90>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d101      	bne.n	8002ec6 <I2SEx_TxISR_I2SExt+0x22>
 8002ec2:	4b1d      	ldr	r3, [pc, #116]	; (8002f38 <I2SEx_TxISR_I2SExt+0x94>)
 8002ec4:	e001      	b.n	8002eca <I2SEx_TxISR_I2SExt+0x26>
 8002ec6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002eca:	460a      	mov	r2, r1
 8002ecc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d121      	bne.n	8002f2a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a12      	ldr	r2, [pc, #72]	; (8002f34 <I2SEx_TxISR_I2SExt+0x90>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d101      	bne.n	8002ef4 <I2SEx_TxISR_I2SExt+0x50>
 8002ef0:	4b11      	ldr	r3, [pc, #68]	; (8002f38 <I2SEx_TxISR_I2SExt+0x94>)
 8002ef2:	e001      	b.n	8002ef8 <I2SEx_TxISR_I2SExt+0x54>
 8002ef4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	490d      	ldr	r1, [pc, #52]	; (8002f34 <I2SEx_TxISR_I2SExt+0x90>)
 8002f00:	428b      	cmp	r3, r1
 8002f02:	d101      	bne.n	8002f08 <I2SEx_TxISR_I2SExt+0x64>
 8002f04:	4b0c      	ldr	r3, [pc, #48]	; (8002f38 <I2SEx_TxISR_I2SExt+0x94>)
 8002f06:	e001      	b.n	8002f0c <I2SEx_TxISR_I2SExt+0x68>
 8002f08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f0c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f10:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d106      	bne.n	8002f2a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f7ff ff81 	bl	8002e2c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f2a:	bf00      	nop
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40003800 	.word	0x40003800
 8002f38:	40003400 	.word	0x40003400

08002f3c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68d8      	ldr	r0, [r3, #12]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4e:	1c99      	adds	r1, r3, #2
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002f54:	b282      	uxth	r2, r0
 8002f56:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d113      	bne.n	8002f98 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	685a      	ldr	r2, [r3, #4]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f7e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d106      	bne.n	8002f98 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7ff ff4a 	bl	8002e2c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f98:	bf00      	nop
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a20      	ldr	r2, [pc, #128]	; (8003030 <I2SEx_RxISR_I2SExt+0x90>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d101      	bne.n	8002fb6 <I2SEx_RxISR_I2SExt+0x16>
 8002fb2:	4b20      	ldr	r3, [pc, #128]	; (8003034 <I2SEx_RxISR_I2SExt+0x94>)
 8002fb4:	e001      	b.n	8002fba <I2SEx_RxISR_I2SExt+0x1a>
 8002fb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fba:	68d8      	ldr	r0, [r3, #12]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc0:	1c99      	adds	r1, r3, #2
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002fc6:	b282      	uxth	r2, r0
 8002fc8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d121      	bne.n	8003026 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a12      	ldr	r2, [pc, #72]	; (8003030 <I2SEx_RxISR_I2SExt+0x90>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d101      	bne.n	8002ff0 <I2SEx_RxISR_I2SExt+0x50>
 8002fec:	4b11      	ldr	r3, [pc, #68]	; (8003034 <I2SEx_RxISR_I2SExt+0x94>)
 8002fee:	e001      	b.n	8002ff4 <I2SEx_RxISR_I2SExt+0x54>
 8002ff0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	490d      	ldr	r1, [pc, #52]	; (8003030 <I2SEx_RxISR_I2SExt+0x90>)
 8002ffc:	428b      	cmp	r3, r1
 8002ffe:	d101      	bne.n	8003004 <I2SEx_RxISR_I2SExt+0x64>
 8003000:	4b0c      	ldr	r3, [pc, #48]	; (8003034 <I2SEx_RxISR_I2SExt+0x94>)
 8003002:	e001      	b.n	8003008 <I2SEx_RxISR_I2SExt+0x68>
 8003004:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003008:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800300c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003012:	b29b      	uxth	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d106      	bne.n	8003026 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f7ff ff03 	bl	8002e2c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003026:	bf00      	nop
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	40003800 	.word	0x40003800
 8003034:	40003400 	.word	0x40003400

08003038 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e25b      	b.n	8003502 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d075      	beq.n	8003142 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003056:	4ba3      	ldr	r3, [pc, #652]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 030c 	and.w	r3, r3, #12
 800305e:	2b04      	cmp	r3, #4
 8003060:	d00c      	beq.n	800307c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003062:	4ba0      	ldr	r3, [pc, #640]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800306a:	2b08      	cmp	r3, #8
 800306c:	d112      	bne.n	8003094 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800306e:	4b9d      	ldr	r3, [pc, #628]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003076:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800307a:	d10b      	bne.n	8003094 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800307c:	4b99      	ldr	r3, [pc, #612]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d05b      	beq.n	8003140 <HAL_RCC_OscConfig+0x108>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d157      	bne.n	8003140 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e236      	b.n	8003502 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800309c:	d106      	bne.n	80030ac <HAL_RCC_OscConfig+0x74>
 800309e:	4b91      	ldr	r3, [pc, #580]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a90      	ldr	r2, [pc, #576]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80030a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a8:	6013      	str	r3, [r2, #0]
 80030aa:	e01d      	b.n	80030e8 <HAL_RCC_OscConfig+0xb0>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030b4:	d10c      	bne.n	80030d0 <HAL_RCC_OscConfig+0x98>
 80030b6:	4b8b      	ldr	r3, [pc, #556]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a8a      	ldr	r2, [pc, #552]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80030bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	4b88      	ldr	r3, [pc, #544]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a87      	ldr	r2, [pc, #540]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80030c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	e00b      	b.n	80030e8 <HAL_RCC_OscConfig+0xb0>
 80030d0:	4b84      	ldr	r3, [pc, #528]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a83      	ldr	r2, [pc, #524]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80030d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030da:	6013      	str	r3, [r2, #0]
 80030dc:	4b81      	ldr	r3, [pc, #516]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a80      	ldr	r2, [pc, #512]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80030e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d013      	beq.n	8003118 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f0:	f7fd fa58 	bl	80005a4 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030f8:	f7fd fa54 	bl	80005a4 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b64      	cmp	r3, #100	; 0x64
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e1fb      	b.n	8003502 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310a:	4b76      	ldr	r3, [pc, #472]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d0f0      	beq.n	80030f8 <HAL_RCC_OscConfig+0xc0>
 8003116:	e014      	b.n	8003142 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003118:	f7fd fa44 	bl	80005a4 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003120:	f7fd fa40 	bl	80005a4 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b64      	cmp	r3, #100	; 0x64
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e1e7      	b.n	8003502 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003132:	4b6c      	ldr	r3, [pc, #432]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f0      	bne.n	8003120 <HAL_RCC_OscConfig+0xe8>
 800313e:	e000      	b.n	8003142 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d063      	beq.n	8003216 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800314e:	4b65      	ldr	r3, [pc, #404]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 030c 	and.w	r3, r3, #12
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00b      	beq.n	8003172 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800315a:	4b62      	ldr	r3, [pc, #392]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003162:	2b08      	cmp	r3, #8
 8003164:	d11c      	bne.n	80031a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003166:	4b5f      	ldr	r3, [pc, #380]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d116      	bne.n	80031a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003172:	4b5c      	ldr	r3, [pc, #368]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d005      	beq.n	800318a <HAL_RCC_OscConfig+0x152>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d001      	beq.n	800318a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e1bb      	b.n	8003502 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800318a:	4b56      	ldr	r3, [pc, #344]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	4952      	ldr	r1, [pc, #328]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 800319a:	4313      	orrs	r3, r2
 800319c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800319e:	e03a      	b.n	8003216 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d020      	beq.n	80031ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031a8:	4b4f      	ldr	r3, [pc, #316]	; (80032e8 <HAL_RCC_OscConfig+0x2b0>)
 80031aa:	2201      	movs	r2, #1
 80031ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ae:	f7fd f9f9 	bl	80005a4 <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031b6:	f7fd f9f5 	bl	80005a4 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e19c      	b.n	8003502 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c8:	4b46      	ldr	r3, [pc, #280]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0f0      	beq.n	80031b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d4:	4b43      	ldr	r3, [pc, #268]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	4940      	ldr	r1, [pc, #256]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	600b      	str	r3, [r1, #0]
 80031e8:	e015      	b.n	8003216 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ea:	4b3f      	ldr	r3, [pc, #252]	; (80032e8 <HAL_RCC_OscConfig+0x2b0>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f0:	f7fd f9d8 	bl	80005a4 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031f8:	f7fd f9d4 	bl	80005a4 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e17b      	b.n	8003502 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800320a:	4b36      	ldr	r3, [pc, #216]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f0      	bne.n	80031f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	2b00      	cmp	r3, #0
 8003220:	d030      	beq.n	8003284 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d016      	beq.n	8003258 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800322a:	4b30      	ldr	r3, [pc, #192]	; (80032ec <HAL_RCC_OscConfig+0x2b4>)
 800322c:	2201      	movs	r2, #1
 800322e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003230:	f7fd f9b8 	bl	80005a4 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003238:	f7fd f9b4 	bl	80005a4 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e15b      	b.n	8003502 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800324a:	4b26      	ldr	r3, [pc, #152]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 800324c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0f0      	beq.n	8003238 <HAL_RCC_OscConfig+0x200>
 8003256:	e015      	b.n	8003284 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003258:	4b24      	ldr	r3, [pc, #144]	; (80032ec <HAL_RCC_OscConfig+0x2b4>)
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800325e:	f7fd f9a1 	bl	80005a4 <HAL_GetTick>
 8003262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003264:	e008      	b.n	8003278 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003266:	f7fd f99d 	bl	80005a4 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e144      	b.n	8003502 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003278:	4b1a      	ldr	r3, [pc, #104]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 800327a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1f0      	bne.n	8003266 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 80a0 	beq.w	80033d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003292:	2300      	movs	r3, #0
 8003294:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003296:	4b13      	ldr	r3, [pc, #76]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10f      	bne.n	80032c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032a2:	2300      	movs	r3, #0
 80032a4:	60bb      	str	r3, [r7, #8]
 80032a6:	4b0f      	ldr	r3, [pc, #60]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	4a0e      	ldr	r2, [pc, #56]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80032ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032b0:	6413      	str	r3, [r2, #64]	; 0x40
 80032b2:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <HAL_RCC_OscConfig+0x2ac>)
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ba:	60bb      	str	r3, [r7, #8]
 80032bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032be:	2301      	movs	r3, #1
 80032c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c2:	4b0b      	ldr	r3, [pc, #44]	; (80032f0 <HAL_RCC_OscConfig+0x2b8>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d121      	bne.n	8003312 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ce:	4b08      	ldr	r3, [pc, #32]	; (80032f0 <HAL_RCC_OscConfig+0x2b8>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a07      	ldr	r2, [pc, #28]	; (80032f0 <HAL_RCC_OscConfig+0x2b8>)
 80032d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032da:	f7fd f963 	bl	80005a4 <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e0:	e011      	b.n	8003306 <HAL_RCC_OscConfig+0x2ce>
 80032e2:	bf00      	nop
 80032e4:	40023800 	.word	0x40023800
 80032e8:	42470000 	.word	0x42470000
 80032ec:	42470e80 	.word	0x42470e80
 80032f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032f4:	f7fd f956 	bl	80005a4 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e0fd      	b.n	8003502 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003306:	4b81      	ldr	r3, [pc, #516]	; (800350c <HAL_RCC_OscConfig+0x4d4>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0f0      	beq.n	80032f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d106      	bne.n	8003328 <HAL_RCC_OscConfig+0x2f0>
 800331a:	4b7d      	ldr	r3, [pc, #500]	; (8003510 <HAL_RCC_OscConfig+0x4d8>)
 800331c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331e:	4a7c      	ldr	r2, [pc, #496]	; (8003510 <HAL_RCC_OscConfig+0x4d8>)
 8003320:	f043 0301 	orr.w	r3, r3, #1
 8003324:	6713      	str	r3, [r2, #112]	; 0x70
 8003326:	e01c      	b.n	8003362 <HAL_RCC_OscConfig+0x32a>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	2b05      	cmp	r3, #5
 800332e:	d10c      	bne.n	800334a <HAL_RCC_OscConfig+0x312>
 8003330:	4b77      	ldr	r3, [pc, #476]	; (8003510 <HAL_RCC_OscConfig+0x4d8>)
 8003332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003334:	4a76      	ldr	r2, [pc, #472]	; (8003510 <HAL_RCC_OscConfig+0x4d8>)
 8003336:	f043 0304 	orr.w	r3, r3, #4
 800333a:	6713      	str	r3, [r2, #112]	; 0x70
 800333c:	4b74      	ldr	r3, [pc, #464]	; (8003510 <HAL_RCC_OscConfig+0x4d8>)
 800333e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003340:	4a73      	ldr	r2, [pc, #460]	; (8003510 <HAL_RCC_OscConfig+0x4d8>)
 8003342:	f043 0301 	orr.w	r3, r3, #1
 8003346:	6713      	str	r3, [r2, #112]	; 0x70
 8003348:	e00b      	b.n	8003362 <HAL_RCC_OscConfig+0x32a>
 800334a:	4b71      	ldr	r3, [pc, #452]	; (8003510 <HAL_RCC_OscConfig+0x4d8>)
 800334c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334e:	4a70      	ldr	r2, [pc, #448]	; (8003510 <HAL_RCC_OscConfig+0x4d8>)
 8003350:	f023 0301 	bic.w	r3, r3, #1
 8003354:	6713      	str	r3, [r2, #112]	; 0x70
 8003356:	4b6e      	ldr	r3, [pc, #440]	; (8003510 <HAL_RCC_OscConfig+0x4d8>)
 8003358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335a:	4a6d      	ldr	r2, [pc, #436]	; (8003510 <HAL_RCC_OscConfig+0x4d8>)
 800335c:	f023 0304 	bic.w	r3, r3, #4
 8003360:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d015      	beq.n	8003396 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336a:	f7fd f91b 	bl	80005a4 <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003370:	e00a      	b.n	8003388 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003372:	f7fd f917 	bl	80005a4 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003380:	4293      	cmp	r3, r2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e0bc      	b.n	8003502 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003388:	4b61      	ldr	r3, [pc, #388]	; (8003510 <HAL_RCC_OscConfig+0x4d8>)
 800338a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d0ee      	beq.n	8003372 <HAL_RCC_OscConfig+0x33a>
 8003394:	e014      	b.n	80033c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003396:	f7fd f905 	bl	80005a4 <HAL_GetTick>
 800339a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800339c:	e00a      	b.n	80033b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800339e:	f7fd f901 	bl	80005a4 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e0a6      	b.n	8003502 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033b4:	4b56      	ldr	r3, [pc, #344]	; (8003510 <HAL_RCC_OscConfig+0x4d8>)
 80033b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1ee      	bne.n	800339e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033c0:	7dfb      	ldrb	r3, [r7, #23]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d105      	bne.n	80033d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033c6:	4b52      	ldr	r3, [pc, #328]	; (8003510 <HAL_RCC_OscConfig+0x4d8>)
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	4a51      	ldr	r2, [pc, #324]	; (8003510 <HAL_RCC_OscConfig+0x4d8>)
 80033cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 8092 	beq.w	8003500 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033dc:	4b4c      	ldr	r3, [pc, #304]	; (8003510 <HAL_RCC_OscConfig+0x4d8>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 030c 	and.w	r3, r3, #12
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	d05c      	beq.n	80034a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d141      	bne.n	8003474 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f0:	4b48      	ldr	r3, [pc, #288]	; (8003514 <HAL_RCC_OscConfig+0x4dc>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f6:	f7fd f8d5 	bl	80005a4 <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033fc:	e008      	b.n	8003410 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033fe:	f7fd f8d1 	bl	80005a4 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e078      	b.n	8003502 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003410:	4b3f      	ldr	r3, [pc, #252]	; (8003510 <HAL_RCC_OscConfig+0x4d8>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1f0      	bne.n	80033fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	69da      	ldr	r2, [r3, #28]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	431a      	orrs	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342a:	019b      	lsls	r3, r3, #6
 800342c:	431a      	orrs	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003432:	085b      	lsrs	r3, r3, #1
 8003434:	3b01      	subs	r3, #1
 8003436:	041b      	lsls	r3, r3, #16
 8003438:	431a      	orrs	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343e:	061b      	lsls	r3, r3, #24
 8003440:	4933      	ldr	r1, [pc, #204]	; (8003510 <HAL_RCC_OscConfig+0x4d8>)
 8003442:	4313      	orrs	r3, r2
 8003444:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003446:	4b33      	ldr	r3, [pc, #204]	; (8003514 <HAL_RCC_OscConfig+0x4dc>)
 8003448:	2201      	movs	r2, #1
 800344a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344c:	f7fd f8aa 	bl	80005a4 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003454:	f7fd f8a6 	bl	80005a4 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e04d      	b.n	8003502 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003466:	4b2a      	ldr	r3, [pc, #168]	; (8003510 <HAL_RCC_OscConfig+0x4d8>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d0f0      	beq.n	8003454 <HAL_RCC_OscConfig+0x41c>
 8003472:	e045      	b.n	8003500 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003474:	4b27      	ldr	r3, [pc, #156]	; (8003514 <HAL_RCC_OscConfig+0x4dc>)
 8003476:	2200      	movs	r2, #0
 8003478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347a:	f7fd f893 	bl	80005a4 <HAL_GetTick>
 800347e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003480:	e008      	b.n	8003494 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003482:	f7fd f88f 	bl	80005a4 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d901      	bls.n	8003494 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e036      	b.n	8003502 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003494:	4b1e      	ldr	r3, [pc, #120]	; (8003510 <HAL_RCC_OscConfig+0x4d8>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1f0      	bne.n	8003482 <HAL_RCC_OscConfig+0x44a>
 80034a0:	e02e      	b.n	8003500 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d101      	bne.n	80034ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e029      	b.n	8003502 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034ae:	4b18      	ldr	r3, [pc, #96]	; (8003510 <HAL_RCC_OscConfig+0x4d8>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d11c      	bne.n	80034fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d115      	bne.n	80034fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034d6:	4013      	ands	r3, r2
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034dc:	4293      	cmp	r3, r2
 80034de:	d10d      	bne.n	80034fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d106      	bne.n	80034fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d001      	beq.n	8003500 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e000      	b.n	8003502 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3718      	adds	r7, #24
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40007000 	.word	0x40007000
 8003510:	40023800 	.word	0x40023800
 8003514:	42470060 	.word	0x42470060

08003518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e0cc      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800352c:	4b68      	ldr	r3, [pc, #416]	; (80036d0 <HAL_RCC_ClockConfig+0x1b8>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 030f 	and.w	r3, r3, #15
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	429a      	cmp	r2, r3
 8003538:	d90c      	bls.n	8003554 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800353a:	4b65      	ldr	r3, [pc, #404]	; (80036d0 <HAL_RCC_ClockConfig+0x1b8>)
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	b2d2      	uxtb	r2, r2
 8003540:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003542:	4b63      	ldr	r3, [pc, #396]	; (80036d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	429a      	cmp	r2, r3
 800354e:	d001      	beq.n	8003554 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e0b8      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d020      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b00      	cmp	r3, #0
 800356a:	d005      	beq.n	8003578 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800356c:	4b59      	ldr	r3, [pc, #356]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	4a58      	ldr	r2, [pc, #352]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003572:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003576:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0308 	and.w	r3, r3, #8
 8003580:	2b00      	cmp	r3, #0
 8003582:	d005      	beq.n	8003590 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003584:	4b53      	ldr	r3, [pc, #332]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	4a52      	ldr	r2, [pc, #328]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800358a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800358e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003590:	4b50      	ldr	r3, [pc, #320]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	494d      	ldr	r1, [pc, #308]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d044      	beq.n	8003638 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d107      	bne.n	80035c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b6:	4b47      	ldr	r3, [pc, #284]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d119      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e07f      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d003      	beq.n	80035d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035d2:	2b03      	cmp	r3, #3
 80035d4:	d107      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035d6:	4b3f      	ldr	r3, [pc, #252]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d109      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e06f      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e6:	4b3b      	ldr	r3, [pc, #236]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e067      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035f6:	4b37      	ldr	r3, [pc, #220]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f023 0203 	bic.w	r2, r3, #3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	4934      	ldr	r1, [pc, #208]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003604:	4313      	orrs	r3, r2
 8003606:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003608:	f7fc ffcc 	bl	80005a4 <HAL_GetTick>
 800360c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360e:	e00a      	b.n	8003626 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003610:	f7fc ffc8 	bl	80005a4 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	f241 3288 	movw	r2, #5000	; 0x1388
 800361e:	4293      	cmp	r3, r2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e04f      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003626:	4b2b      	ldr	r3, [pc, #172]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 020c 	and.w	r2, r3, #12
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	429a      	cmp	r2, r3
 8003636:	d1eb      	bne.n	8003610 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003638:	4b25      	ldr	r3, [pc, #148]	; (80036d0 <HAL_RCC_ClockConfig+0x1b8>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 030f 	and.w	r3, r3, #15
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	429a      	cmp	r2, r3
 8003644:	d20c      	bcs.n	8003660 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003646:	4b22      	ldr	r3, [pc, #136]	; (80036d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800364e:	4b20      	ldr	r3, [pc, #128]	; (80036d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 030f 	and.w	r3, r3, #15
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	429a      	cmp	r2, r3
 800365a:	d001      	beq.n	8003660 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e032      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b00      	cmp	r3, #0
 800366a:	d008      	beq.n	800367e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800366c:	4b19      	ldr	r3, [pc, #100]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	4916      	ldr	r1, [pc, #88]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800367a:	4313      	orrs	r3, r2
 800367c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0308 	and.w	r3, r3, #8
 8003686:	2b00      	cmp	r3, #0
 8003688:	d009      	beq.n	800369e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800368a:	4b12      	ldr	r3, [pc, #72]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	490e      	ldr	r1, [pc, #56]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800369a:	4313      	orrs	r3, r2
 800369c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800369e:	f000 f821 	bl	80036e4 <HAL_RCC_GetSysClockFreq>
 80036a2:	4601      	mov	r1, r0
 80036a4:	4b0b      	ldr	r3, [pc, #44]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	091b      	lsrs	r3, r3, #4
 80036aa:	f003 030f 	and.w	r3, r3, #15
 80036ae:	4a0a      	ldr	r2, [pc, #40]	; (80036d8 <HAL_RCC_ClockConfig+0x1c0>)
 80036b0:	5cd3      	ldrb	r3, [r2, r3]
 80036b2:	fa21 f303 	lsr.w	r3, r1, r3
 80036b6:	4a09      	ldr	r2, [pc, #36]	; (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 80036b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036ba:	4b09      	ldr	r3, [pc, #36]	; (80036e0 <HAL_RCC_ClockConfig+0x1c8>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fc ff2c 	bl	800051c <HAL_InitTick>

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	40023c00 	.word	0x40023c00
 80036d4:	40023800 	.word	0x40023800
 80036d8:	080082f8 	.word	0x080082f8
 80036dc:	20000028 	.word	0x20000028
 80036e0:	20000000 	.word	0x20000000

080036e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	607b      	str	r3, [r7, #4]
 80036ee:	2300      	movs	r3, #0
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	2300      	movs	r3, #0
 80036f4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80036f6:	2300      	movs	r3, #0
 80036f8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036fa:	4b63      	ldr	r3, [pc, #396]	; (8003888 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 030c 	and.w	r3, r3, #12
 8003702:	2b04      	cmp	r3, #4
 8003704:	d007      	beq.n	8003716 <HAL_RCC_GetSysClockFreq+0x32>
 8003706:	2b08      	cmp	r3, #8
 8003708:	d008      	beq.n	800371c <HAL_RCC_GetSysClockFreq+0x38>
 800370a:	2b00      	cmp	r3, #0
 800370c:	f040 80b4 	bne.w	8003878 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003710:	4b5e      	ldr	r3, [pc, #376]	; (800388c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003712:	60bb      	str	r3, [r7, #8]
       break;
 8003714:	e0b3      	b.n	800387e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003716:	4b5e      	ldr	r3, [pc, #376]	; (8003890 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003718:	60bb      	str	r3, [r7, #8]
      break;
 800371a:	e0b0      	b.n	800387e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800371c:	4b5a      	ldr	r3, [pc, #360]	; (8003888 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003724:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003726:	4b58      	ldr	r3, [pc, #352]	; (8003888 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d04a      	beq.n	80037c8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003732:	4b55      	ldr	r3, [pc, #340]	; (8003888 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	099b      	lsrs	r3, r3, #6
 8003738:	f04f 0400 	mov.w	r4, #0
 800373c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003740:	f04f 0200 	mov.w	r2, #0
 8003744:	ea03 0501 	and.w	r5, r3, r1
 8003748:	ea04 0602 	and.w	r6, r4, r2
 800374c:	4629      	mov	r1, r5
 800374e:	4632      	mov	r2, r6
 8003750:	f04f 0300 	mov.w	r3, #0
 8003754:	f04f 0400 	mov.w	r4, #0
 8003758:	0154      	lsls	r4, r2, #5
 800375a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800375e:	014b      	lsls	r3, r1, #5
 8003760:	4619      	mov	r1, r3
 8003762:	4622      	mov	r2, r4
 8003764:	1b49      	subs	r1, r1, r5
 8003766:	eb62 0206 	sbc.w	r2, r2, r6
 800376a:	f04f 0300 	mov.w	r3, #0
 800376e:	f04f 0400 	mov.w	r4, #0
 8003772:	0194      	lsls	r4, r2, #6
 8003774:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003778:	018b      	lsls	r3, r1, #6
 800377a:	1a5b      	subs	r3, r3, r1
 800377c:	eb64 0402 	sbc.w	r4, r4, r2
 8003780:	f04f 0100 	mov.w	r1, #0
 8003784:	f04f 0200 	mov.w	r2, #0
 8003788:	00e2      	lsls	r2, r4, #3
 800378a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800378e:	00d9      	lsls	r1, r3, #3
 8003790:	460b      	mov	r3, r1
 8003792:	4614      	mov	r4, r2
 8003794:	195b      	adds	r3, r3, r5
 8003796:	eb44 0406 	adc.w	r4, r4, r6
 800379a:	f04f 0100 	mov.w	r1, #0
 800379e:	f04f 0200 	mov.w	r2, #0
 80037a2:	0262      	lsls	r2, r4, #9
 80037a4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80037a8:	0259      	lsls	r1, r3, #9
 80037aa:	460b      	mov	r3, r1
 80037ac:	4614      	mov	r4, r2
 80037ae:	4618      	mov	r0, r3
 80037b0:	4621      	mov	r1, r4
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f04f 0400 	mov.w	r4, #0
 80037b8:	461a      	mov	r2, r3
 80037ba:	4623      	mov	r3, r4
 80037bc:	f7fc fd0c 	bl	80001d8 <__aeabi_uldivmod>
 80037c0:	4603      	mov	r3, r0
 80037c2:	460c      	mov	r4, r1
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	e049      	b.n	800385c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037c8:	4b2f      	ldr	r3, [pc, #188]	; (8003888 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	099b      	lsrs	r3, r3, #6
 80037ce:	f04f 0400 	mov.w	r4, #0
 80037d2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80037d6:	f04f 0200 	mov.w	r2, #0
 80037da:	ea03 0501 	and.w	r5, r3, r1
 80037de:	ea04 0602 	and.w	r6, r4, r2
 80037e2:	4629      	mov	r1, r5
 80037e4:	4632      	mov	r2, r6
 80037e6:	f04f 0300 	mov.w	r3, #0
 80037ea:	f04f 0400 	mov.w	r4, #0
 80037ee:	0154      	lsls	r4, r2, #5
 80037f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80037f4:	014b      	lsls	r3, r1, #5
 80037f6:	4619      	mov	r1, r3
 80037f8:	4622      	mov	r2, r4
 80037fa:	1b49      	subs	r1, r1, r5
 80037fc:	eb62 0206 	sbc.w	r2, r2, r6
 8003800:	f04f 0300 	mov.w	r3, #0
 8003804:	f04f 0400 	mov.w	r4, #0
 8003808:	0194      	lsls	r4, r2, #6
 800380a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800380e:	018b      	lsls	r3, r1, #6
 8003810:	1a5b      	subs	r3, r3, r1
 8003812:	eb64 0402 	sbc.w	r4, r4, r2
 8003816:	f04f 0100 	mov.w	r1, #0
 800381a:	f04f 0200 	mov.w	r2, #0
 800381e:	00e2      	lsls	r2, r4, #3
 8003820:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003824:	00d9      	lsls	r1, r3, #3
 8003826:	460b      	mov	r3, r1
 8003828:	4614      	mov	r4, r2
 800382a:	195b      	adds	r3, r3, r5
 800382c:	eb44 0406 	adc.w	r4, r4, r6
 8003830:	f04f 0100 	mov.w	r1, #0
 8003834:	f04f 0200 	mov.w	r2, #0
 8003838:	02a2      	lsls	r2, r4, #10
 800383a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800383e:	0299      	lsls	r1, r3, #10
 8003840:	460b      	mov	r3, r1
 8003842:	4614      	mov	r4, r2
 8003844:	4618      	mov	r0, r3
 8003846:	4621      	mov	r1, r4
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f04f 0400 	mov.w	r4, #0
 800384e:	461a      	mov	r2, r3
 8003850:	4623      	mov	r3, r4
 8003852:	f7fc fcc1 	bl	80001d8 <__aeabi_uldivmod>
 8003856:	4603      	mov	r3, r0
 8003858:	460c      	mov	r4, r1
 800385a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800385c:	4b0a      	ldr	r3, [pc, #40]	; (8003888 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	0c1b      	lsrs	r3, r3, #16
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	3301      	adds	r3, #1
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	fbb2 f3f3 	udiv	r3, r2, r3
 8003874:	60bb      	str	r3, [r7, #8]
      break;
 8003876:	e002      	b.n	800387e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003878:	4b04      	ldr	r3, [pc, #16]	; (800388c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800387a:	60bb      	str	r3, [r7, #8]
      break;
 800387c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800387e:	68bb      	ldr	r3, [r7, #8]
}
 8003880:	4618      	mov	r0, r3
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003888:	40023800 	.word	0x40023800
 800388c:	00f42400 	.word	0x00f42400
 8003890:	007a1200 	.word	0x007a1200

08003894 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003898:	4b03      	ldr	r3, [pc, #12]	; (80038a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800389a:	681b      	ldr	r3, [r3, #0]
}
 800389c:	4618      	mov	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	20000028 	.word	0x20000028

080038ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038b0:	f7ff fff0 	bl	8003894 <HAL_RCC_GetHCLKFreq>
 80038b4:	4601      	mov	r1, r0
 80038b6:	4b05      	ldr	r3, [pc, #20]	; (80038cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	0a9b      	lsrs	r3, r3, #10
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	4a03      	ldr	r2, [pc, #12]	; (80038d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038c2:	5cd3      	ldrb	r3, [r2, r3]
 80038c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40023800 	.word	0x40023800
 80038d0:	08008308 	.word	0x08008308

080038d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038d8:	f7ff ffdc 	bl	8003894 <HAL_RCC_GetHCLKFreq>
 80038dc:	4601      	mov	r1, r0
 80038de:	4b05      	ldr	r3, [pc, #20]	; (80038f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	0b5b      	lsrs	r3, r3, #13
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	4a03      	ldr	r2, [pc, #12]	; (80038f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038ea:	5cd3      	ldrb	r3, [r2, r3]
 80038ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	40023800 	.word	0x40023800
 80038f8:	08008308 	.word	0x08008308

080038fc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003904:	2300      	movs	r3, #0
 8003906:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003908:	2300      	movs	r3, #0
 800390a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b00      	cmp	r3, #0
 8003916:	d105      	bne.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003920:	2b00      	cmp	r3, #0
 8003922:	d035      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003924:	4b62      	ldr	r3, [pc, #392]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003926:	2200      	movs	r2, #0
 8003928:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800392a:	f7fc fe3b 	bl	80005a4 <HAL_GetTick>
 800392e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003930:	e008      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003932:	f7fc fe37 	bl	80005a4 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d901      	bls.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e0b0      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003944:	4b5b      	ldr	r3, [pc, #364]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1f0      	bne.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	019a      	lsls	r2, r3, #6
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	071b      	lsls	r3, r3, #28
 800395c:	4955      	ldr	r1, [pc, #340]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800395e:	4313      	orrs	r3, r2
 8003960:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003964:	4b52      	ldr	r3, [pc, #328]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003966:	2201      	movs	r2, #1
 8003968:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800396a:	f7fc fe1b 	bl	80005a4 <HAL_GetTick>
 800396e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003970:	e008      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003972:	f7fc fe17 	bl	80005a4 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d901      	bls.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e090      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003984:	4b4b      	ldr	r3, [pc, #300]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0f0      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 8083 	beq.w	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800399e:	2300      	movs	r3, #0
 80039a0:	60fb      	str	r3, [r7, #12]
 80039a2:	4b44      	ldr	r3, [pc, #272]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	4a43      	ldr	r2, [pc, #268]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ac:	6413      	str	r3, [r2, #64]	; 0x40
 80039ae:	4b41      	ldr	r3, [pc, #260]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b6:	60fb      	str	r3, [r7, #12]
 80039b8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80039ba:	4b3f      	ldr	r3, [pc, #252]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a3e      	ldr	r2, [pc, #248]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80039c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80039c6:	f7fc fded 	bl	80005a4 <HAL_GetTick>
 80039ca:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80039cc:	e008      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80039ce:	f7fc fde9 	bl	80005a4 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d901      	bls.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e062      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80039e0:	4b35      	ldr	r3, [pc, #212]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d0f0      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039ec:	4b31      	ldr	r3, [pc, #196]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039f4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d02f      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d028      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a0a:	4b2a      	ldr	r3, [pc, #168]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a12:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a14:	4b29      	ldr	r3, [pc, #164]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003a16:	2201      	movs	r2, #1
 8003a18:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a1a:	4b28      	ldr	r3, [pc, #160]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003a20:	4a24      	ldr	r2, [pc, #144]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a26:	4b23      	ldr	r3, [pc, #140]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d114      	bne.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003a32:	f7fc fdb7 	bl	80005a4 <HAL_GetTick>
 8003a36:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a38:	e00a      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a3a:	f7fc fdb3 	bl	80005a4 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e02a      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a50:	4b18      	ldr	r3, [pc, #96]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0ee      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a68:	d10d      	bne.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003a6a:	4b12      	ldr	r3, [pc, #72]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003a7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a7e:	490d      	ldr	r1, [pc, #52]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	608b      	str	r3, [r1, #8]
 8003a84:	e005      	b.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003a86:	4b0b      	ldr	r3, [pc, #44]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	4a0a      	ldr	r2, [pc, #40]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a8c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a90:	6093      	str	r3, [r2, #8]
 8003a92:	4b08      	ldr	r3, [pc, #32]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a94:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a9e:	4905      	ldr	r1, [pc, #20]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3718      	adds	r7, #24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	42470068 	.word	0x42470068
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	40007000 	.word	0x40007000
 8003abc:	42470e40 	.word	0x42470e40

08003ac0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b087      	sub	sp, #28
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d13d      	bne.n	8003b5a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003ade:	4b22      	ldr	r3, [pc, #136]	; (8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ae6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d004      	beq.n	8003af8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d12f      	bne.n	8003b52 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003af2:	4b1e      	ldr	r3, [pc, #120]	; (8003b6c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003af4:	617b      	str	r3, [r7, #20]
          break;
 8003af6:	e02f      	b.n	8003b58 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003af8:	4b1b      	ldr	r3, [pc, #108]	; (8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b04:	d108      	bne.n	8003b18 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003b06:	4b18      	ldr	r3, [pc, #96]	; (8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b0e:	4a18      	ldr	r2, [pc, #96]	; (8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b14:	613b      	str	r3, [r7, #16]
 8003b16:	e007      	b.n	8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003b18:	4b13      	ldr	r3, [pc, #76]	; (8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b20:	4a14      	ldr	r2, [pc, #80]	; (8003b74 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b26:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003b28:	4b0f      	ldr	r3, [pc, #60]	; (8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b2e:	099b      	lsrs	r3, r3, #6
 8003b30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	fb02 f303 	mul.w	r3, r2, r3
 8003b3a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003b3c:	4b0a      	ldr	r3, [pc, #40]	; (8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b42:	0f1b      	lsrs	r3, r3, #28
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b4e:	617b      	str	r3, [r7, #20]
          break;
 8003b50:	e002      	b.n	8003b58 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	617b      	str	r3, [r7, #20]
          break;
 8003b56:	bf00      	nop
        }
      }
      break;
 8003b58:	bf00      	nop
    }
  }
  return frequency;
 8003b5a:	697b      	ldr	r3, [r7, #20]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	371c      	adds	r7, #28
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	00bb8000 	.word	0x00bb8000
 8003b70:	007a1200 	.word	0x007a1200
 8003b74:	00f42400 	.word	0x00f42400

08003b78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e056      	b.n	8003c38 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d106      	bne.n	8003baa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f003 fe61 	bl	800786c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2202      	movs	r2, #2
 8003bae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bc0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	431a      	orrs	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	ea42 0103 	orr.w	r1, r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	0c1b      	lsrs	r3, r3, #16
 8003c08:	f003 0104 	and.w	r1, r3, #4
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	430a      	orrs	r2, r1
 8003c16:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	69da      	ldr	r2, [r3, #28]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c26:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e03f      	b.n	8003cd2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d106      	bne.n	8003c6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f003 fe48 	bl	80078fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2224      	movs	r2, #36	; 0x24
 8003c70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68da      	ldr	r2, [r3, #12]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 f90b 	bl	8003ea0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	691a      	ldr	r2, [r3, #16]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	695a      	ldr	r2, [r3, #20]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ca8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68da      	ldr	r2, [r3, #12]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b088      	sub	sp, #32
 8003cde:	af02      	add	r7, sp, #8
 8003ce0:	60f8      	str	r0, [r7, #12]
 8003ce2:	60b9      	str	r1, [r7, #8]
 8003ce4:	603b      	str	r3, [r7, #0]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b20      	cmp	r3, #32
 8003cf8:	f040 8083 	bne.w	8003e02 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d002      	beq.n	8003d08 <HAL_UART_Transmit+0x2e>
 8003d02:	88fb      	ldrh	r3, [r7, #6]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d101      	bne.n	8003d0c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e07b      	b.n	8003e04 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d101      	bne.n	8003d1a <HAL_UART_Transmit+0x40>
 8003d16:	2302      	movs	r3, #2
 8003d18:	e074      	b.n	8003e04 <HAL_UART_Transmit+0x12a>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2221      	movs	r2, #33	; 0x21
 8003d2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003d30:	f7fc fc38 	bl	80005a4 <HAL_GetTick>
 8003d34:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	88fa      	ldrh	r2, [r7, #6]
 8003d3a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	88fa      	ldrh	r2, [r7, #6]
 8003d40:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003d4a:	e042      	b.n	8003dd2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	3b01      	subs	r3, #1
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d62:	d122      	bne.n	8003daa <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	2180      	movs	r1, #128	; 0x80
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f000 f84c 	bl	8003e0c <UART_WaitOnFlagUntilTimeout>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e042      	b.n	8003e04 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	881b      	ldrh	r3, [r3, #0]
 8003d86:	461a      	mov	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d90:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d103      	bne.n	8003da2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	3302      	adds	r3, #2
 8003d9e:	60bb      	str	r3, [r7, #8]
 8003da0:	e017      	b.n	8003dd2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	3301      	adds	r3, #1
 8003da6:	60bb      	str	r3, [r7, #8]
 8003da8:	e013      	b.n	8003dd2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	9300      	str	r3, [sp, #0]
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	2200      	movs	r2, #0
 8003db2:	2180      	movs	r1, #128	; 0x80
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f000 f829 	bl	8003e0c <UART_WaitOnFlagUntilTimeout>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e01f      	b.n	8003e04 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	1c5a      	adds	r2, r3, #1
 8003dc8:	60ba      	str	r2, [r7, #8]
 8003dca:	781a      	ldrb	r2, [r3, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1b7      	bne.n	8003d4c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	2200      	movs	r2, #0
 8003de4:	2140      	movs	r1, #64	; 0x40
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 f810 	bl	8003e0c <UART_WaitOnFlagUntilTimeout>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e006      	b.n	8003e04 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2220      	movs	r2, #32
 8003dfa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	e000      	b.n	8003e04 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003e02:	2302      	movs	r3, #2
  }
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3718      	adds	r7, #24
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	603b      	str	r3, [r7, #0]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e1c:	e02c      	b.n	8003e78 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e24:	d028      	beq.n	8003e78 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d007      	beq.n	8003e3c <UART_WaitOnFlagUntilTimeout+0x30>
 8003e2c:	f7fc fbba 	bl	80005a4 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d21d      	bcs.n	8003e78 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68da      	ldr	r2, [r3, #12]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e4a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	695a      	ldr	r2, [r3, #20]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 0201 	bic.w	r2, r2, #1
 8003e5a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2220      	movs	r2, #32
 8003e68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e00f      	b.n	8003e98 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	4013      	ands	r3, r2
 8003e82:	68ba      	ldr	r2, [r7, #8]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	bf0c      	ite	eq
 8003e88:	2301      	moveq	r3, #1
 8003e8a:	2300      	movne	r3, #0
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	461a      	mov	r2, r3
 8003e90:	79fb      	ldrb	r3, [r7, #7]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d0c3      	beq.n	8003e1e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3710      	adds	r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ea4:	b085      	sub	sp, #20
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68da      	ldr	r2, [r3, #12]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689a      	ldr	r2, [r3, #8]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003ee2:	f023 030c 	bic.w	r3, r3, #12
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	6812      	ldr	r2, [r2, #0]
 8003eea:	68f9      	ldr	r1, [r7, #12]
 8003eec:	430b      	orrs	r3, r1
 8003eee:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	699a      	ldr	r2, [r3, #24]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f0e:	f040 818b 	bne.w	8004228 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4ac1      	ldr	r2, [pc, #772]	; (800421c <UART_SetConfig+0x37c>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d005      	beq.n	8003f28 <UART_SetConfig+0x88>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4abf      	ldr	r2, [pc, #764]	; (8004220 <UART_SetConfig+0x380>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	f040 80bd 	bne.w	80040a2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f28:	f7ff fcd4 	bl	80038d4 <HAL_RCC_GetPCLK2Freq>
 8003f2c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	461d      	mov	r5, r3
 8003f32:	f04f 0600 	mov.w	r6, #0
 8003f36:	46a8      	mov	r8, r5
 8003f38:	46b1      	mov	r9, r6
 8003f3a:	eb18 0308 	adds.w	r3, r8, r8
 8003f3e:	eb49 0409 	adc.w	r4, r9, r9
 8003f42:	4698      	mov	r8, r3
 8003f44:	46a1      	mov	r9, r4
 8003f46:	eb18 0805 	adds.w	r8, r8, r5
 8003f4a:	eb49 0906 	adc.w	r9, r9, r6
 8003f4e:	f04f 0100 	mov.w	r1, #0
 8003f52:	f04f 0200 	mov.w	r2, #0
 8003f56:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f5a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f5e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f62:	4688      	mov	r8, r1
 8003f64:	4691      	mov	r9, r2
 8003f66:	eb18 0005 	adds.w	r0, r8, r5
 8003f6a:	eb49 0106 	adc.w	r1, r9, r6
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	461d      	mov	r5, r3
 8003f74:	f04f 0600 	mov.w	r6, #0
 8003f78:	196b      	adds	r3, r5, r5
 8003f7a:	eb46 0406 	adc.w	r4, r6, r6
 8003f7e:	461a      	mov	r2, r3
 8003f80:	4623      	mov	r3, r4
 8003f82:	f7fc f929 	bl	80001d8 <__aeabi_uldivmod>
 8003f86:	4603      	mov	r3, r0
 8003f88:	460c      	mov	r4, r1
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	4ba5      	ldr	r3, [pc, #660]	; (8004224 <UART_SetConfig+0x384>)
 8003f8e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f92:	095b      	lsrs	r3, r3, #5
 8003f94:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	461d      	mov	r5, r3
 8003f9c:	f04f 0600 	mov.w	r6, #0
 8003fa0:	46a9      	mov	r9, r5
 8003fa2:	46b2      	mov	sl, r6
 8003fa4:	eb19 0309 	adds.w	r3, r9, r9
 8003fa8:	eb4a 040a 	adc.w	r4, sl, sl
 8003fac:	4699      	mov	r9, r3
 8003fae:	46a2      	mov	sl, r4
 8003fb0:	eb19 0905 	adds.w	r9, r9, r5
 8003fb4:	eb4a 0a06 	adc.w	sl, sl, r6
 8003fb8:	f04f 0100 	mov.w	r1, #0
 8003fbc:	f04f 0200 	mov.w	r2, #0
 8003fc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fc4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fc8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fcc:	4689      	mov	r9, r1
 8003fce:	4692      	mov	sl, r2
 8003fd0:	eb19 0005 	adds.w	r0, r9, r5
 8003fd4:	eb4a 0106 	adc.w	r1, sl, r6
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	461d      	mov	r5, r3
 8003fde:	f04f 0600 	mov.w	r6, #0
 8003fe2:	196b      	adds	r3, r5, r5
 8003fe4:	eb46 0406 	adc.w	r4, r6, r6
 8003fe8:	461a      	mov	r2, r3
 8003fea:	4623      	mov	r3, r4
 8003fec:	f7fc f8f4 	bl	80001d8 <__aeabi_uldivmod>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	460c      	mov	r4, r1
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	4b8b      	ldr	r3, [pc, #556]	; (8004224 <UART_SetConfig+0x384>)
 8003ff8:	fba3 1302 	umull	r1, r3, r3, r2
 8003ffc:	095b      	lsrs	r3, r3, #5
 8003ffe:	2164      	movs	r1, #100	; 0x64
 8004000:	fb01 f303 	mul.w	r3, r1, r3
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	3332      	adds	r3, #50	; 0x32
 800400a:	4a86      	ldr	r2, [pc, #536]	; (8004224 <UART_SetConfig+0x384>)
 800400c:	fba2 2303 	umull	r2, r3, r2, r3
 8004010:	095b      	lsrs	r3, r3, #5
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004018:	4498      	add	r8, r3
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	461d      	mov	r5, r3
 800401e:	f04f 0600 	mov.w	r6, #0
 8004022:	46a9      	mov	r9, r5
 8004024:	46b2      	mov	sl, r6
 8004026:	eb19 0309 	adds.w	r3, r9, r9
 800402a:	eb4a 040a 	adc.w	r4, sl, sl
 800402e:	4699      	mov	r9, r3
 8004030:	46a2      	mov	sl, r4
 8004032:	eb19 0905 	adds.w	r9, r9, r5
 8004036:	eb4a 0a06 	adc.w	sl, sl, r6
 800403a:	f04f 0100 	mov.w	r1, #0
 800403e:	f04f 0200 	mov.w	r2, #0
 8004042:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004046:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800404a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800404e:	4689      	mov	r9, r1
 8004050:	4692      	mov	sl, r2
 8004052:	eb19 0005 	adds.w	r0, r9, r5
 8004056:	eb4a 0106 	adc.w	r1, sl, r6
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	461d      	mov	r5, r3
 8004060:	f04f 0600 	mov.w	r6, #0
 8004064:	196b      	adds	r3, r5, r5
 8004066:	eb46 0406 	adc.w	r4, r6, r6
 800406a:	461a      	mov	r2, r3
 800406c:	4623      	mov	r3, r4
 800406e:	f7fc f8b3 	bl	80001d8 <__aeabi_uldivmod>
 8004072:	4603      	mov	r3, r0
 8004074:	460c      	mov	r4, r1
 8004076:	461a      	mov	r2, r3
 8004078:	4b6a      	ldr	r3, [pc, #424]	; (8004224 <UART_SetConfig+0x384>)
 800407a:	fba3 1302 	umull	r1, r3, r3, r2
 800407e:	095b      	lsrs	r3, r3, #5
 8004080:	2164      	movs	r1, #100	; 0x64
 8004082:	fb01 f303 	mul.w	r3, r1, r3
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	3332      	adds	r3, #50	; 0x32
 800408c:	4a65      	ldr	r2, [pc, #404]	; (8004224 <UART_SetConfig+0x384>)
 800408e:	fba2 2303 	umull	r2, r3, r2, r3
 8004092:	095b      	lsrs	r3, r3, #5
 8004094:	f003 0207 	and.w	r2, r3, #7
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4442      	add	r2, r8
 800409e:	609a      	str	r2, [r3, #8]
 80040a0:	e26f      	b.n	8004582 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040a2:	f7ff fc03 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 80040a6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	461d      	mov	r5, r3
 80040ac:	f04f 0600 	mov.w	r6, #0
 80040b0:	46a8      	mov	r8, r5
 80040b2:	46b1      	mov	r9, r6
 80040b4:	eb18 0308 	adds.w	r3, r8, r8
 80040b8:	eb49 0409 	adc.w	r4, r9, r9
 80040bc:	4698      	mov	r8, r3
 80040be:	46a1      	mov	r9, r4
 80040c0:	eb18 0805 	adds.w	r8, r8, r5
 80040c4:	eb49 0906 	adc.w	r9, r9, r6
 80040c8:	f04f 0100 	mov.w	r1, #0
 80040cc:	f04f 0200 	mov.w	r2, #0
 80040d0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80040d4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80040d8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80040dc:	4688      	mov	r8, r1
 80040de:	4691      	mov	r9, r2
 80040e0:	eb18 0005 	adds.w	r0, r8, r5
 80040e4:	eb49 0106 	adc.w	r1, r9, r6
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	461d      	mov	r5, r3
 80040ee:	f04f 0600 	mov.w	r6, #0
 80040f2:	196b      	adds	r3, r5, r5
 80040f4:	eb46 0406 	adc.w	r4, r6, r6
 80040f8:	461a      	mov	r2, r3
 80040fa:	4623      	mov	r3, r4
 80040fc:	f7fc f86c 	bl	80001d8 <__aeabi_uldivmod>
 8004100:	4603      	mov	r3, r0
 8004102:	460c      	mov	r4, r1
 8004104:	461a      	mov	r2, r3
 8004106:	4b47      	ldr	r3, [pc, #284]	; (8004224 <UART_SetConfig+0x384>)
 8004108:	fba3 2302 	umull	r2, r3, r3, r2
 800410c:	095b      	lsrs	r3, r3, #5
 800410e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	461d      	mov	r5, r3
 8004116:	f04f 0600 	mov.w	r6, #0
 800411a:	46a9      	mov	r9, r5
 800411c:	46b2      	mov	sl, r6
 800411e:	eb19 0309 	adds.w	r3, r9, r9
 8004122:	eb4a 040a 	adc.w	r4, sl, sl
 8004126:	4699      	mov	r9, r3
 8004128:	46a2      	mov	sl, r4
 800412a:	eb19 0905 	adds.w	r9, r9, r5
 800412e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004132:	f04f 0100 	mov.w	r1, #0
 8004136:	f04f 0200 	mov.w	r2, #0
 800413a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800413e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004142:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004146:	4689      	mov	r9, r1
 8004148:	4692      	mov	sl, r2
 800414a:	eb19 0005 	adds.w	r0, r9, r5
 800414e:	eb4a 0106 	adc.w	r1, sl, r6
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	461d      	mov	r5, r3
 8004158:	f04f 0600 	mov.w	r6, #0
 800415c:	196b      	adds	r3, r5, r5
 800415e:	eb46 0406 	adc.w	r4, r6, r6
 8004162:	461a      	mov	r2, r3
 8004164:	4623      	mov	r3, r4
 8004166:	f7fc f837 	bl	80001d8 <__aeabi_uldivmod>
 800416a:	4603      	mov	r3, r0
 800416c:	460c      	mov	r4, r1
 800416e:	461a      	mov	r2, r3
 8004170:	4b2c      	ldr	r3, [pc, #176]	; (8004224 <UART_SetConfig+0x384>)
 8004172:	fba3 1302 	umull	r1, r3, r3, r2
 8004176:	095b      	lsrs	r3, r3, #5
 8004178:	2164      	movs	r1, #100	; 0x64
 800417a:	fb01 f303 	mul.w	r3, r1, r3
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	3332      	adds	r3, #50	; 0x32
 8004184:	4a27      	ldr	r2, [pc, #156]	; (8004224 <UART_SetConfig+0x384>)
 8004186:	fba2 2303 	umull	r2, r3, r2, r3
 800418a:	095b      	lsrs	r3, r3, #5
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004192:	4498      	add	r8, r3
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	461d      	mov	r5, r3
 8004198:	f04f 0600 	mov.w	r6, #0
 800419c:	46a9      	mov	r9, r5
 800419e:	46b2      	mov	sl, r6
 80041a0:	eb19 0309 	adds.w	r3, r9, r9
 80041a4:	eb4a 040a 	adc.w	r4, sl, sl
 80041a8:	4699      	mov	r9, r3
 80041aa:	46a2      	mov	sl, r4
 80041ac:	eb19 0905 	adds.w	r9, r9, r5
 80041b0:	eb4a 0a06 	adc.w	sl, sl, r6
 80041b4:	f04f 0100 	mov.w	r1, #0
 80041b8:	f04f 0200 	mov.w	r2, #0
 80041bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041c8:	4689      	mov	r9, r1
 80041ca:	4692      	mov	sl, r2
 80041cc:	eb19 0005 	adds.w	r0, r9, r5
 80041d0:	eb4a 0106 	adc.w	r1, sl, r6
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	461d      	mov	r5, r3
 80041da:	f04f 0600 	mov.w	r6, #0
 80041de:	196b      	adds	r3, r5, r5
 80041e0:	eb46 0406 	adc.w	r4, r6, r6
 80041e4:	461a      	mov	r2, r3
 80041e6:	4623      	mov	r3, r4
 80041e8:	f7fb fff6 	bl	80001d8 <__aeabi_uldivmod>
 80041ec:	4603      	mov	r3, r0
 80041ee:	460c      	mov	r4, r1
 80041f0:	461a      	mov	r2, r3
 80041f2:	4b0c      	ldr	r3, [pc, #48]	; (8004224 <UART_SetConfig+0x384>)
 80041f4:	fba3 1302 	umull	r1, r3, r3, r2
 80041f8:	095b      	lsrs	r3, r3, #5
 80041fa:	2164      	movs	r1, #100	; 0x64
 80041fc:	fb01 f303 	mul.w	r3, r1, r3
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	3332      	adds	r3, #50	; 0x32
 8004206:	4a07      	ldr	r2, [pc, #28]	; (8004224 <UART_SetConfig+0x384>)
 8004208:	fba2 2303 	umull	r2, r3, r2, r3
 800420c:	095b      	lsrs	r3, r3, #5
 800420e:	f003 0207 	and.w	r2, r3, #7
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4442      	add	r2, r8
 8004218:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800421a:	e1b2      	b.n	8004582 <UART_SetConfig+0x6e2>
 800421c:	40011000 	.word	0x40011000
 8004220:	40011400 	.word	0x40011400
 8004224:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4ad7      	ldr	r2, [pc, #860]	; (800458c <UART_SetConfig+0x6ec>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d005      	beq.n	800423e <UART_SetConfig+0x39e>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4ad6      	ldr	r2, [pc, #856]	; (8004590 <UART_SetConfig+0x6f0>)
 8004238:	4293      	cmp	r3, r2
 800423a:	f040 80d1 	bne.w	80043e0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800423e:	f7ff fb49 	bl	80038d4 <HAL_RCC_GetPCLK2Freq>
 8004242:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	469a      	mov	sl, r3
 8004248:	f04f 0b00 	mov.w	fp, #0
 800424c:	46d0      	mov	r8, sl
 800424e:	46d9      	mov	r9, fp
 8004250:	eb18 0308 	adds.w	r3, r8, r8
 8004254:	eb49 0409 	adc.w	r4, r9, r9
 8004258:	4698      	mov	r8, r3
 800425a:	46a1      	mov	r9, r4
 800425c:	eb18 080a 	adds.w	r8, r8, sl
 8004260:	eb49 090b 	adc.w	r9, r9, fp
 8004264:	f04f 0100 	mov.w	r1, #0
 8004268:	f04f 0200 	mov.w	r2, #0
 800426c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004270:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004274:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004278:	4688      	mov	r8, r1
 800427a:	4691      	mov	r9, r2
 800427c:	eb1a 0508 	adds.w	r5, sl, r8
 8004280:	eb4b 0609 	adc.w	r6, fp, r9
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	4619      	mov	r1, r3
 800428a:	f04f 0200 	mov.w	r2, #0
 800428e:	f04f 0300 	mov.w	r3, #0
 8004292:	f04f 0400 	mov.w	r4, #0
 8004296:	0094      	lsls	r4, r2, #2
 8004298:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800429c:	008b      	lsls	r3, r1, #2
 800429e:	461a      	mov	r2, r3
 80042a0:	4623      	mov	r3, r4
 80042a2:	4628      	mov	r0, r5
 80042a4:	4631      	mov	r1, r6
 80042a6:	f7fb ff97 	bl	80001d8 <__aeabi_uldivmod>
 80042aa:	4603      	mov	r3, r0
 80042ac:	460c      	mov	r4, r1
 80042ae:	461a      	mov	r2, r3
 80042b0:	4bb8      	ldr	r3, [pc, #736]	; (8004594 <UART_SetConfig+0x6f4>)
 80042b2:	fba3 2302 	umull	r2, r3, r3, r2
 80042b6:	095b      	lsrs	r3, r3, #5
 80042b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	469b      	mov	fp, r3
 80042c0:	f04f 0c00 	mov.w	ip, #0
 80042c4:	46d9      	mov	r9, fp
 80042c6:	46e2      	mov	sl, ip
 80042c8:	eb19 0309 	adds.w	r3, r9, r9
 80042cc:	eb4a 040a 	adc.w	r4, sl, sl
 80042d0:	4699      	mov	r9, r3
 80042d2:	46a2      	mov	sl, r4
 80042d4:	eb19 090b 	adds.w	r9, r9, fp
 80042d8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80042dc:	f04f 0100 	mov.w	r1, #0
 80042e0:	f04f 0200 	mov.w	r2, #0
 80042e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042f0:	4689      	mov	r9, r1
 80042f2:	4692      	mov	sl, r2
 80042f4:	eb1b 0509 	adds.w	r5, fp, r9
 80042f8:	eb4c 060a 	adc.w	r6, ip, sl
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	4619      	mov	r1, r3
 8004302:	f04f 0200 	mov.w	r2, #0
 8004306:	f04f 0300 	mov.w	r3, #0
 800430a:	f04f 0400 	mov.w	r4, #0
 800430e:	0094      	lsls	r4, r2, #2
 8004310:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004314:	008b      	lsls	r3, r1, #2
 8004316:	461a      	mov	r2, r3
 8004318:	4623      	mov	r3, r4
 800431a:	4628      	mov	r0, r5
 800431c:	4631      	mov	r1, r6
 800431e:	f7fb ff5b 	bl	80001d8 <__aeabi_uldivmod>
 8004322:	4603      	mov	r3, r0
 8004324:	460c      	mov	r4, r1
 8004326:	461a      	mov	r2, r3
 8004328:	4b9a      	ldr	r3, [pc, #616]	; (8004594 <UART_SetConfig+0x6f4>)
 800432a:	fba3 1302 	umull	r1, r3, r3, r2
 800432e:	095b      	lsrs	r3, r3, #5
 8004330:	2164      	movs	r1, #100	; 0x64
 8004332:	fb01 f303 	mul.w	r3, r1, r3
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	011b      	lsls	r3, r3, #4
 800433a:	3332      	adds	r3, #50	; 0x32
 800433c:	4a95      	ldr	r2, [pc, #596]	; (8004594 <UART_SetConfig+0x6f4>)
 800433e:	fba2 2303 	umull	r2, r3, r2, r3
 8004342:	095b      	lsrs	r3, r3, #5
 8004344:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004348:	4498      	add	r8, r3
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	469b      	mov	fp, r3
 800434e:	f04f 0c00 	mov.w	ip, #0
 8004352:	46d9      	mov	r9, fp
 8004354:	46e2      	mov	sl, ip
 8004356:	eb19 0309 	adds.w	r3, r9, r9
 800435a:	eb4a 040a 	adc.w	r4, sl, sl
 800435e:	4699      	mov	r9, r3
 8004360:	46a2      	mov	sl, r4
 8004362:	eb19 090b 	adds.w	r9, r9, fp
 8004366:	eb4a 0a0c 	adc.w	sl, sl, ip
 800436a:	f04f 0100 	mov.w	r1, #0
 800436e:	f04f 0200 	mov.w	r2, #0
 8004372:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004376:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800437a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800437e:	4689      	mov	r9, r1
 8004380:	4692      	mov	sl, r2
 8004382:	eb1b 0509 	adds.w	r5, fp, r9
 8004386:	eb4c 060a 	adc.w	r6, ip, sl
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	4619      	mov	r1, r3
 8004390:	f04f 0200 	mov.w	r2, #0
 8004394:	f04f 0300 	mov.w	r3, #0
 8004398:	f04f 0400 	mov.w	r4, #0
 800439c:	0094      	lsls	r4, r2, #2
 800439e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80043a2:	008b      	lsls	r3, r1, #2
 80043a4:	461a      	mov	r2, r3
 80043a6:	4623      	mov	r3, r4
 80043a8:	4628      	mov	r0, r5
 80043aa:	4631      	mov	r1, r6
 80043ac:	f7fb ff14 	bl	80001d8 <__aeabi_uldivmod>
 80043b0:	4603      	mov	r3, r0
 80043b2:	460c      	mov	r4, r1
 80043b4:	461a      	mov	r2, r3
 80043b6:	4b77      	ldr	r3, [pc, #476]	; (8004594 <UART_SetConfig+0x6f4>)
 80043b8:	fba3 1302 	umull	r1, r3, r3, r2
 80043bc:	095b      	lsrs	r3, r3, #5
 80043be:	2164      	movs	r1, #100	; 0x64
 80043c0:	fb01 f303 	mul.w	r3, r1, r3
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	011b      	lsls	r3, r3, #4
 80043c8:	3332      	adds	r3, #50	; 0x32
 80043ca:	4a72      	ldr	r2, [pc, #456]	; (8004594 <UART_SetConfig+0x6f4>)
 80043cc:	fba2 2303 	umull	r2, r3, r2, r3
 80043d0:	095b      	lsrs	r3, r3, #5
 80043d2:	f003 020f 	and.w	r2, r3, #15
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4442      	add	r2, r8
 80043dc:	609a      	str	r2, [r3, #8]
 80043de:	e0d0      	b.n	8004582 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80043e0:	f7ff fa64 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 80043e4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	469a      	mov	sl, r3
 80043ea:	f04f 0b00 	mov.w	fp, #0
 80043ee:	46d0      	mov	r8, sl
 80043f0:	46d9      	mov	r9, fp
 80043f2:	eb18 0308 	adds.w	r3, r8, r8
 80043f6:	eb49 0409 	adc.w	r4, r9, r9
 80043fa:	4698      	mov	r8, r3
 80043fc:	46a1      	mov	r9, r4
 80043fe:	eb18 080a 	adds.w	r8, r8, sl
 8004402:	eb49 090b 	adc.w	r9, r9, fp
 8004406:	f04f 0100 	mov.w	r1, #0
 800440a:	f04f 0200 	mov.w	r2, #0
 800440e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004412:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004416:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800441a:	4688      	mov	r8, r1
 800441c:	4691      	mov	r9, r2
 800441e:	eb1a 0508 	adds.w	r5, sl, r8
 8004422:	eb4b 0609 	adc.w	r6, fp, r9
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	4619      	mov	r1, r3
 800442c:	f04f 0200 	mov.w	r2, #0
 8004430:	f04f 0300 	mov.w	r3, #0
 8004434:	f04f 0400 	mov.w	r4, #0
 8004438:	0094      	lsls	r4, r2, #2
 800443a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800443e:	008b      	lsls	r3, r1, #2
 8004440:	461a      	mov	r2, r3
 8004442:	4623      	mov	r3, r4
 8004444:	4628      	mov	r0, r5
 8004446:	4631      	mov	r1, r6
 8004448:	f7fb fec6 	bl	80001d8 <__aeabi_uldivmod>
 800444c:	4603      	mov	r3, r0
 800444e:	460c      	mov	r4, r1
 8004450:	461a      	mov	r2, r3
 8004452:	4b50      	ldr	r3, [pc, #320]	; (8004594 <UART_SetConfig+0x6f4>)
 8004454:	fba3 2302 	umull	r2, r3, r3, r2
 8004458:	095b      	lsrs	r3, r3, #5
 800445a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	469b      	mov	fp, r3
 8004462:	f04f 0c00 	mov.w	ip, #0
 8004466:	46d9      	mov	r9, fp
 8004468:	46e2      	mov	sl, ip
 800446a:	eb19 0309 	adds.w	r3, r9, r9
 800446e:	eb4a 040a 	adc.w	r4, sl, sl
 8004472:	4699      	mov	r9, r3
 8004474:	46a2      	mov	sl, r4
 8004476:	eb19 090b 	adds.w	r9, r9, fp
 800447a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800447e:	f04f 0100 	mov.w	r1, #0
 8004482:	f04f 0200 	mov.w	r2, #0
 8004486:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800448a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800448e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004492:	4689      	mov	r9, r1
 8004494:	4692      	mov	sl, r2
 8004496:	eb1b 0509 	adds.w	r5, fp, r9
 800449a:	eb4c 060a 	adc.w	r6, ip, sl
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	4619      	mov	r1, r3
 80044a4:	f04f 0200 	mov.w	r2, #0
 80044a8:	f04f 0300 	mov.w	r3, #0
 80044ac:	f04f 0400 	mov.w	r4, #0
 80044b0:	0094      	lsls	r4, r2, #2
 80044b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80044b6:	008b      	lsls	r3, r1, #2
 80044b8:	461a      	mov	r2, r3
 80044ba:	4623      	mov	r3, r4
 80044bc:	4628      	mov	r0, r5
 80044be:	4631      	mov	r1, r6
 80044c0:	f7fb fe8a 	bl	80001d8 <__aeabi_uldivmod>
 80044c4:	4603      	mov	r3, r0
 80044c6:	460c      	mov	r4, r1
 80044c8:	461a      	mov	r2, r3
 80044ca:	4b32      	ldr	r3, [pc, #200]	; (8004594 <UART_SetConfig+0x6f4>)
 80044cc:	fba3 1302 	umull	r1, r3, r3, r2
 80044d0:	095b      	lsrs	r3, r3, #5
 80044d2:	2164      	movs	r1, #100	; 0x64
 80044d4:	fb01 f303 	mul.w	r3, r1, r3
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	011b      	lsls	r3, r3, #4
 80044dc:	3332      	adds	r3, #50	; 0x32
 80044de:	4a2d      	ldr	r2, [pc, #180]	; (8004594 <UART_SetConfig+0x6f4>)
 80044e0:	fba2 2303 	umull	r2, r3, r2, r3
 80044e4:	095b      	lsrs	r3, r3, #5
 80044e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044ea:	4498      	add	r8, r3
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	469b      	mov	fp, r3
 80044f0:	f04f 0c00 	mov.w	ip, #0
 80044f4:	46d9      	mov	r9, fp
 80044f6:	46e2      	mov	sl, ip
 80044f8:	eb19 0309 	adds.w	r3, r9, r9
 80044fc:	eb4a 040a 	adc.w	r4, sl, sl
 8004500:	4699      	mov	r9, r3
 8004502:	46a2      	mov	sl, r4
 8004504:	eb19 090b 	adds.w	r9, r9, fp
 8004508:	eb4a 0a0c 	adc.w	sl, sl, ip
 800450c:	f04f 0100 	mov.w	r1, #0
 8004510:	f04f 0200 	mov.w	r2, #0
 8004514:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004518:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800451c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004520:	4689      	mov	r9, r1
 8004522:	4692      	mov	sl, r2
 8004524:	eb1b 0509 	adds.w	r5, fp, r9
 8004528:	eb4c 060a 	adc.w	r6, ip, sl
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	4619      	mov	r1, r3
 8004532:	f04f 0200 	mov.w	r2, #0
 8004536:	f04f 0300 	mov.w	r3, #0
 800453a:	f04f 0400 	mov.w	r4, #0
 800453e:	0094      	lsls	r4, r2, #2
 8004540:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004544:	008b      	lsls	r3, r1, #2
 8004546:	461a      	mov	r2, r3
 8004548:	4623      	mov	r3, r4
 800454a:	4628      	mov	r0, r5
 800454c:	4631      	mov	r1, r6
 800454e:	f7fb fe43 	bl	80001d8 <__aeabi_uldivmod>
 8004552:	4603      	mov	r3, r0
 8004554:	460c      	mov	r4, r1
 8004556:	461a      	mov	r2, r3
 8004558:	4b0e      	ldr	r3, [pc, #56]	; (8004594 <UART_SetConfig+0x6f4>)
 800455a:	fba3 1302 	umull	r1, r3, r3, r2
 800455e:	095b      	lsrs	r3, r3, #5
 8004560:	2164      	movs	r1, #100	; 0x64
 8004562:	fb01 f303 	mul.w	r3, r1, r3
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	011b      	lsls	r3, r3, #4
 800456a:	3332      	adds	r3, #50	; 0x32
 800456c:	4a09      	ldr	r2, [pc, #36]	; (8004594 <UART_SetConfig+0x6f4>)
 800456e:	fba2 2303 	umull	r2, r3, r2, r3
 8004572:	095b      	lsrs	r3, r3, #5
 8004574:	f003 020f 	and.w	r2, r3, #15
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4442      	add	r2, r8
 800457e:	609a      	str	r2, [r3, #8]
}
 8004580:	e7ff      	b.n	8004582 <UART_SetConfig+0x6e2>
 8004582:	bf00      	nop
 8004584:	3714      	adds	r7, #20
 8004586:	46bd      	mov	sp, r7
 8004588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800458c:	40011000 	.word	0x40011000
 8004590:	40011400 	.word	0x40011400
 8004594:	51eb851f 	.word	0x51eb851f

08004598 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004598:	b084      	sub	sp, #16
 800459a:	b580      	push	{r7, lr}
 800459c:	b084      	sub	sp, #16
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
 80045a2:	f107 001c 	add.w	r0, r7, #28
 80045a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80045aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d122      	bne.n	80045f6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80045c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80045d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d105      	bne.n	80045ea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f94a 	bl	8004884 <USB_CoreReset>
 80045f0:	4603      	mov	r3, r0
 80045f2:	73fb      	strb	r3, [r7, #15]
 80045f4:	e01a      	b.n	800462c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f93e 	bl	8004884 <USB_CoreReset>
 8004608:	4603      	mov	r3, r0
 800460a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800460c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800460e:	2b00      	cmp	r3, #0
 8004610:	d106      	bne.n	8004620 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004616:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	639a      	str	r2, [r3, #56]	; 0x38
 800461e:	e005      	b.n	800462c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004624:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800462c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462e:	2b01      	cmp	r3, #1
 8004630:	d10b      	bne.n	800464a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f043 0206 	orr.w	r2, r3, #6
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f043 0220 	orr.w	r2, r3, #32
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800464a:	7bfb      	ldrb	r3, [r7, #15]
}
 800464c:	4618      	mov	r0, r3
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004656:	b004      	add	sp, #16
 8004658:	4770      	bx	lr

0800465a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800465a:	b480      	push	{r7}
 800465c:	b083      	sub	sp, #12
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f043 0201 	orr.w	r2, r3, #1
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f023 0201 	bic.w	r2, r3, #1
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b082      	sub	sp, #8
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
 80046a6:	460b      	mov	r3, r1
 80046a8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80046b6:	78fb      	ldrb	r3, [r7, #3]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d106      	bne.n	80046ca <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	60da      	str	r2, [r3, #12]
 80046c8:	e00b      	b.n	80046e2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80046ca:	78fb      	ldrb	r3, [r7, #3]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d106      	bne.n	80046de <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	60da      	str	r2, [r3, #12]
 80046dc:	e001      	b.n	80046e2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e003      	b.n	80046ea <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80046e2:	2032      	movs	r0, #50	; 0x32
 80046e4:	f7fb ff6a 	bl	80005bc <HAL_Delay>

  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
	...

080046f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80046fe:	2300      	movs	r3, #0
 8004700:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	019b      	lsls	r3, r3, #6
 8004706:	f043 0220 	orr.w	r2, r3, #32
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	3301      	adds	r3, #1
 8004712:	60fb      	str	r3, [r7, #12]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	4a09      	ldr	r2, [pc, #36]	; (800473c <USB_FlushTxFifo+0x48>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d901      	bls.n	8004720 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e006      	b.n	800472e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	f003 0320 	and.w	r3, r3, #32
 8004728:	2b20      	cmp	r3, #32
 800472a:	d0f0      	beq.n	800470e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	00030d40 	.word	0x00030d40

08004740 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004748:	2300      	movs	r3, #0
 800474a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2210      	movs	r2, #16
 8004750:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	3301      	adds	r3, #1
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4a09      	ldr	r2, [pc, #36]	; (8004780 <USB_FlushRxFifo+0x40>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d901      	bls.n	8004764 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e006      	b.n	8004772 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	f003 0310 	and.w	r3, r3, #16
 800476c:	2b10      	cmp	r3, #16
 800476e:	d0f0      	beq.n	8004752 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	00030d40 	.word	0x00030d40

08004784 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004784:	b480      	push	{r7}
 8004786:	b089      	sub	sp, #36	; 0x24
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	4611      	mov	r1, r2
 8004790:	461a      	mov	r2, r3
 8004792:	460b      	mov	r3, r1
 8004794:	71fb      	strb	r3, [r7, #7]
 8004796:	4613      	mov	r3, r2
 8004798:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80047a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d11a      	bne.n	80047e0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80047aa:	88bb      	ldrh	r3, [r7, #4]
 80047ac:	3303      	adds	r3, #3
 80047ae:	089b      	lsrs	r3, r3, #2
 80047b0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80047b2:	2300      	movs	r3, #0
 80047b4:	61bb      	str	r3, [r7, #24]
 80047b6:	e00f      	b.n	80047d8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80047b8:	79fb      	ldrb	r3, [r7, #7]
 80047ba:	031a      	lsls	r2, r3, #12
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	4413      	add	r3, r2
 80047c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047c4:	461a      	mov	r2, r3
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6013      	str	r3, [r2, #0]
      pSrc++;
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	3304      	adds	r3, #4
 80047d0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	3301      	adds	r3, #1
 80047d6:	61bb      	str	r3, [r7, #24]
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d3eb      	bcc.n	80047b8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3724      	adds	r7, #36	; 0x24
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b089      	sub	sp, #36	; 0x24
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	60f8      	str	r0, [r7, #12]
 80047f6:	60b9      	str	r1, [r7, #8]
 80047f8:	4613      	mov	r3, r2
 80047fa:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004804:	88fb      	ldrh	r3, [r7, #6]
 8004806:	3303      	adds	r3, #3
 8004808:	089b      	lsrs	r3, r3, #2
 800480a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800480c:	2300      	movs	r3, #0
 800480e:	61bb      	str	r3, [r7, #24]
 8004810:	e00b      	b.n	800482a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	601a      	str	r2, [r3, #0]
    pDest++;
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	3304      	adds	r3, #4
 8004822:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	3301      	adds	r3, #1
 8004828:	61bb      	str	r3, [r7, #24]
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	429a      	cmp	r2, r3
 8004830:	d3ef      	bcc.n	8004812 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004832:	69fb      	ldr	r3, [r7, #28]
}
 8004834:	4618      	mov	r0, r3
 8004836:	3724      	adds	r7, #36	; 0x24
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	4013      	ands	r3, r2
 8004856:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004858:	68fb      	ldr	r3, [r7, #12]
}
 800485a:	4618      	mov	r0, r3
 800485c:	3714      	adds	r7, #20
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004866:	b480      	push	{r7}
 8004868:	b083      	sub	sp, #12
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	f003 0301 	and.w	r3, r3, #1
}
 8004876:	4618      	mov	r0, r3
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
	...

08004884 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800488c:	2300      	movs	r3, #0
 800488e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	3301      	adds	r3, #1
 8004894:	60fb      	str	r3, [r7, #12]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	4a13      	ldr	r2, [pc, #76]	; (80048e8 <USB_CoreReset+0x64>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d901      	bls.n	80048a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e01b      	b.n	80048da <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	daf2      	bge.n	8004890 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80048aa:	2300      	movs	r3, #0
 80048ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	f043 0201 	orr.w	r2, r3, #1
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	3301      	adds	r3, #1
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	4a09      	ldr	r2, [pc, #36]	; (80048e8 <USB_CoreReset+0x64>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d901      	bls.n	80048cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e006      	b.n	80048da <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d0f0      	beq.n	80048ba <USB_CoreReset+0x36>

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	00030d40 	.word	0x00030d40

080048ec <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048ec:	b084      	sub	sp, #16
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b084      	sub	sp, #16
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
 80048f6:	f107 001c 	add.w	r0, r7, #28
 80048fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004908:	461a      	mov	r2, r3
 800490a:	2300      	movs	r3, #0
 800490c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004912:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493a:	2b00      	cmp	r3, #0
 800493c:	d018      	beq.n	8004970 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004940:	2b03      	cmp	r3, #3
 8004942:	d10a      	bne.n	800495a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68ba      	ldr	r2, [r7, #8]
 800494e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004952:	f043 0304 	orr.w	r3, r3, #4
 8004956:	6013      	str	r3, [r2, #0]
 8004958:	e014      	b.n	8004984 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004968:	f023 0304 	bic.w	r3, r3, #4
 800496c:	6013      	str	r3, [r2, #0]
 800496e:	e009      	b.n	8004984 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68ba      	ldr	r2, [r7, #8]
 800497a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800497e:	f023 0304 	bic.w	r3, r3, #4
 8004982:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004984:	2110      	movs	r1, #16
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7ff feb4 	bl	80046f4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f7ff fed7 	bl	8004740 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004992:	2300      	movs	r3, #0
 8004994:	60fb      	str	r3, [r7, #12]
 8004996:	e015      	b.n	80049c4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	015a      	lsls	r2, r3, #5
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	4413      	add	r3, r2
 80049a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049a4:	461a      	mov	r2, r3
 80049a6:	f04f 33ff 	mov.w	r3, #4294967295
 80049aa:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	015a      	lsls	r2, r3, #5
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	4413      	add	r3, r2
 80049b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049b8:	461a      	mov	r2, r3
 80049ba:	2300      	movs	r3, #0
 80049bc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	3301      	adds	r3, #1
 80049c2:	60fb      	str	r3, [r7, #12]
 80049c4:	6a3b      	ldr	r3, [r7, #32]
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d3e5      	bcc.n	8004998 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80049cc:	2101      	movs	r1, #1
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f8ac 	bl	8004b2c <USB_DriveVbus>

  HAL_Delay(200U);
 80049d4:	20c8      	movs	r0, #200	; 0xc8
 80049d6:	f7fb fdf1 	bl	80005bc <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f04f 32ff 	mov.w	r2, #4294967295
 80049e6:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00b      	beq.n	8004a0c <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049fa:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a14      	ldr	r2, [pc, #80]	; (8004a50 <USB_HostInit+0x164>)
 8004a00:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a13      	ldr	r2, [pc, #76]	; (8004a54 <USB_HostInit+0x168>)
 8004a06:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004a0a:	e009      	b.n	8004a20 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2280      	movs	r2, #128	; 0x80
 8004a10:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a10      	ldr	r2, [pc, #64]	; (8004a58 <USB_HostInit+0x16c>)
 8004a16:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a10      	ldr	r2, [pc, #64]	; (8004a5c <USB_HostInit+0x170>)
 8004a1c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d105      	bne.n	8004a32 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	f043 0210 	orr.w	r2, r3, #16
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	699a      	ldr	r2, [r3, #24]
 8004a36:	4b0a      	ldr	r3, [pc, #40]	; (8004a60 <USB_HostInit+0x174>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a4a:	b004      	add	sp, #16
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	01000200 	.word	0x01000200
 8004a54:	00e00300 	.word	0x00e00300
 8004a58:	00600080 	.word	0x00600080
 8004a5c:	004000e0 	.word	0x004000e0
 8004a60:	a3200008 	.word	0xa3200008

08004a64 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a82:	f023 0303 	bic.w	r3, r3, #3
 8004a86:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	78fb      	ldrb	r3, [r7, #3]
 8004a92:	f003 0303 	and.w	r3, r3, #3
 8004a96:	68f9      	ldr	r1, [r7, #12]
 8004a98:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004aa0:	78fb      	ldrb	r3, [r7, #3]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d107      	bne.n	8004ab6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004aac:	461a      	mov	r2, r3
 8004aae:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004ab2:	6053      	str	r3, [r2, #4]
 8004ab4:	e009      	b.n	8004aca <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004ab6:	78fb      	ldrb	r3, [r7, #3]
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d106      	bne.n	8004aca <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	f241 7370 	movw	r3, #6000	; 0x1770
 8004ac8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004af8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b06:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004b08:	2064      	movs	r0, #100	; 0x64
 8004b0a:	f7fb fd57 	bl	80005bc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004b16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b1a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004b1c:	200a      	movs	r0, #10
 8004b1e:	f7fb fd4d 	bl	80005bc <HAL_Delay>

  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	460b      	mov	r3, r1
 8004b36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004b50:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d109      	bne.n	8004b70 <USB_DriveVbus+0x44>
 8004b5c:	78fb      	ldrb	r3, [r7, #3]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d106      	bne.n	8004b70 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004b6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b6e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b7a:	d109      	bne.n	8004b90 <USB_DriveVbus+0x64>
 8004b7c:	78fb      	ldrb	r3, [r7, #3]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d106      	bne.n	8004b90 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004b8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b8e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3714      	adds	r7, #20
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr

08004b9e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b085      	sub	sp, #20
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004baa:	2300      	movs	r3, #0
 8004bac:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	0c5b      	lsrs	r3, r3, #17
 8004bbc:	f003 0303 	and.w	r3, r3, #3
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	b29b      	uxth	r3, r3
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3714      	adds	r7, #20
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
	...

08004bf0 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b087      	sub	sp, #28
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	4608      	mov	r0, r1
 8004bfa:	4611      	mov	r1, r2
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	4603      	mov	r3, r0
 8004c00:	70fb      	strb	r3, [r7, #3]
 8004c02:	460b      	mov	r3, r1
 8004c04:	70bb      	strb	r3, [r7, #2]
 8004c06:	4613      	mov	r3, r2
 8004c08:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004c12:	78fb      	ldrb	r3, [r7, #3]
 8004c14:	015a      	lsls	r2, r3, #5
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	4413      	add	r3, r2
 8004c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c1e:	461a      	mov	r2, r3
 8004c20:	f04f 33ff 	mov.w	r3, #4294967295
 8004c24:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004c26:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004c2a:	2b03      	cmp	r3, #3
 8004c2c:	d87e      	bhi.n	8004d2c <USB_HC_Init+0x13c>
 8004c2e:	a201      	add	r2, pc, #4	; (adr r2, 8004c34 <USB_HC_Init+0x44>)
 8004c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c34:	08004c45 	.word	0x08004c45
 8004c38:	08004cef 	.word	0x08004cef
 8004c3c:	08004c45 	.word	0x08004c45
 8004c40:	08004cb1 	.word	0x08004cb1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004c44:	78fb      	ldrb	r3, [r7, #3]
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c50:	461a      	mov	r2, r3
 8004c52:	f240 439d 	movw	r3, #1181	; 0x49d
 8004c56:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004c58:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	da10      	bge.n	8004c82 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004c60:	78fb      	ldrb	r3, [r7, #3]
 8004c62:	015a      	lsls	r2, r3, #5
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	4413      	add	r3, r2
 8004c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	78fa      	ldrb	r2, [r7, #3]
 8004c70:	0151      	lsls	r1, r2, #5
 8004c72:	68ba      	ldr	r2, [r7, #8]
 8004c74:	440a      	add	r2, r1
 8004c76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c7e:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8004c80:	e057      	b.n	8004d32 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d051      	beq.n	8004d32 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004c8e:	78fb      	ldrb	r3, [r7, #3]
 8004c90:	015a      	lsls	r2, r3, #5
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	4413      	add	r3, r2
 8004c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	78fa      	ldrb	r2, [r7, #3]
 8004c9e:	0151      	lsls	r1, r2, #5
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	440a      	add	r2, r1
 8004ca4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ca8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004cac:	60d3      	str	r3, [r2, #12]
      break;
 8004cae:	e040      	b.n	8004d32 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004cb0:	78fb      	ldrb	r3, [r7, #3]
 8004cb2:	015a      	lsls	r2, r3, #5
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	f240 639d 	movw	r3, #1693	; 0x69d
 8004cc2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004cc4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	da34      	bge.n	8004d36 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004ccc:	78fb      	ldrb	r3, [r7, #3]
 8004cce:	015a      	lsls	r2, r3, #5
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	78fa      	ldrb	r2, [r7, #3]
 8004cdc:	0151      	lsls	r1, r2, #5
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	440a      	add	r2, r1
 8004ce2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cea:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004cec:	e023      	b.n	8004d36 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004cee:	78fb      	ldrb	r3, [r7, #3]
 8004cf0:	015a      	lsls	r2, r3, #5
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	f240 2325 	movw	r3, #549	; 0x225
 8004d00:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004d02:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	da17      	bge.n	8004d3a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004d0a:	78fb      	ldrb	r3, [r7, #3]
 8004d0c:	015a      	lsls	r2, r3, #5
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	4413      	add	r3, r2
 8004d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	78fa      	ldrb	r2, [r7, #3]
 8004d1a:	0151      	lsls	r1, r2, #5
 8004d1c:	68ba      	ldr	r2, [r7, #8]
 8004d1e:	440a      	add	r2, r1
 8004d20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d24:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004d28:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004d2a:	e006      	b.n	8004d3a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d30:	e004      	b.n	8004d3c <USB_HC_Init+0x14c>
      break;
 8004d32:	bf00      	nop
 8004d34:	e002      	b.n	8004d3c <USB_HC_Init+0x14c>
      break;
 8004d36:	bf00      	nop
 8004d38:	e000      	b.n	8004d3c <USB_HC_Init+0x14c>
      break;
 8004d3a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d42:	699a      	ldr	r2, [r3, #24]
 8004d44:	78fb      	ldrb	r3, [r7, #3]
 8004d46:	f003 030f 	and.w	r3, r3, #15
 8004d4a:	2101      	movs	r1, #1
 8004d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d50:	68b9      	ldr	r1, [r7, #8]
 8004d52:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004d56:	4313      	orrs	r3, r2
 8004d58:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004d66:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	da03      	bge.n	8004d76 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004d6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d72:	613b      	str	r3, [r7, #16]
 8004d74:	e001      	b.n	8004d7a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8004d7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d103      	bne.n	8004d8a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004d82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d86:	60fb      	str	r3, [r7, #12]
 8004d88:	e001      	b.n	8004d8e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004d8e:	787b      	ldrb	r3, [r7, #1]
 8004d90:	059b      	lsls	r3, r3, #22
 8004d92:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004d96:	78bb      	ldrb	r3, [r7, #2]
 8004d98:	02db      	lsls	r3, r3, #11
 8004d9a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004d9e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004da0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004da4:	049b      	lsls	r3, r3, #18
 8004da6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004daa:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004dac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004dae:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004db2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004db8:	78fb      	ldrb	r3, [r7, #3]
 8004dba:	0159      	lsls	r1, r3, #5
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	440b      	add	r3, r1
 8004dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc4:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004dca:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004dcc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004dd0:	2b03      	cmp	r3, #3
 8004dd2:	d10f      	bne.n	8004df4 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004dd4:	78fb      	ldrb	r3, [r7, #3]
 8004dd6:	015a      	lsls	r2, r3, #5
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	4413      	add	r3, r2
 8004ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	78fa      	ldrb	r2, [r7, #3]
 8004de4:	0151      	lsls	r1, r2, #5
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	440a      	add	r2, r1
 8004dea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004df2:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004df4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	371c      	adds	r7, #28
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop

08004e04 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b08c      	sub	sp, #48	; 0x30
 8004e08:	af02      	add	r7, sp, #8
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	785b      	ldrb	r3, [r3, #1]
 8004e1a:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004e1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e20:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d028      	beq.n	8004e80 <USB_HC_StartXfer+0x7c>
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	791b      	ldrb	r3, [r3, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d124      	bne.n	8004e80 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8004e36:	79fb      	ldrb	r3, [r7, #7]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10b      	bne.n	8004e54 <USB_HC_StartXfer+0x50>
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	795b      	ldrb	r3, [r3, #5]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d107      	bne.n	8004e54 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	785b      	ldrb	r3, [r3, #1]
 8004e48:	4619      	mov	r1, r3
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 fa2e 	bl	80052ac <USB_DoPing>
      return HAL_OK;
 8004e50:	2300      	movs	r3, #0
 8004e52:	e112      	b.n	800507a <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8004e54:	79fb      	ldrb	r3, [r7, #7]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d112      	bne.n	8004e80 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	015a      	lsls	r2, r3, #5
 8004e5e:	6a3b      	ldr	r3, [r7, #32]
 8004e60:	4413      	add	r3, r2
 8004e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	69fa      	ldr	r2, [r7, #28]
 8004e6a:	0151      	lsls	r1, r2, #5
 8004e6c:	6a3a      	ldr	r2, [r7, #32]
 8004e6e:	440a      	add	r2, r1
 8004e70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e74:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004e78:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d018      	beq.n	8004eba <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	68ba      	ldr	r2, [r7, #8]
 8004e8e:	8912      	ldrh	r2, [r2, #8]
 8004e90:	4413      	add	r3, r2
 8004e92:	3b01      	subs	r3, #1
 8004e94:	68ba      	ldr	r2, [r7, #8]
 8004e96:	8912      	ldrh	r2, [r2, #8]
 8004e98:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e9c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004e9e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004ea0:	8b7b      	ldrh	r3, [r7, #26]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d90b      	bls.n	8004ebe <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8004ea6:	8b7b      	ldrh	r3, [r7, #26]
 8004ea8:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004eaa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	8912      	ldrh	r2, [r2, #8]
 8004eb0:	fb02 f203 	mul.w	r2, r2, r3
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	611a      	str	r2, [r3, #16]
 8004eb8:	e001      	b.n	8004ebe <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	78db      	ldrb	r3, [r3, #3]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d006      	beq.n	8004ed4 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004ec6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ec8:	68ba      	ldr	r2, [r7, #8]
 8004eca:	8912      	ldrh	r2, [r2, #8]
 8004ecc:	fb02 f203 	mul.w	r2, r2, r3
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004edc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ede:	04d9      	lsls	r1, r3, #19
 8004ee0:	4b68      	ldr	r3, [pc, #416]	; (8005084 <USB_HC_StartXfer+0x280>)
 8004ee2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004ee4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	7a9b      	ldrb	r3, [r3, #10]
 8004eea:	075b      	lsls	r3, r3, #29
 8004eec:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004ef0:	69f9      	ldr	r1, [r7, #28]
 8004ef2:	0148      	lsls	r0, r1, #5
 8004ef4:	6a39      	ldr	r1, [r7, #32]
 8004ef6:	4401      	add	r1, r0
 8004ef8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004efc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004efe:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004f00:	79fb      	ldrb	r3, [r7, #7]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d009      	beq.n	8004f1a <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	68d9      	ldr	r1, [r3, #12]
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	015a      	lsls	r2, r3, #5
 8004f0e:	6a3b      	ldr	r3, [r7, #32]
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f16:	460a      	mov	r2, r1
 8004f18:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004f1a:	6a3b      	ldr	r3, [r7, #32]
 8004f1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	bf0c      	ite	eq
 8004f2a:	2301      	moveq	r3, #1
 8004f2c:	2300      	movne	r3, #0
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	6a3b      	ldr	r3, [r7, #32]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	69fa      	ldr	r2, [r7, #28]
 8004f42:	0151      	lsls	r1, r2, #5
 8004f44:	6a3a      	ldr	r2, [r7, #32]
 8004f46:	440a      	add	r2, r1
 8004f48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f4c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004f50:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	015a      	lsls	r2, r3, #5
 8004f56:	6a3b      	ldr	r3, [r7, #32]
 8004f58:	4413      	add	r3, r2
 8004f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	7e7b      	ldrb	r3, [r7, #25]
 8004f62:	075b      	lsls	r3, r3, #29
 8004f64:	69f9      	ldr	r1, [r7, #28]
 8004f66:	0148      	lsls	r0, r1, #5
 8004f68:	6a39      	ldr	r1, [r7, #32]
 8004f6a:	4401      	add	r1, r0
 8004f6c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004f70:	4313      	orrs	r3, r2
 8004f72:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	015a      	lsls	r2, r3, #5
 8004f78:	6a3b      	ldr	r3, [r7, #32]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a41      	ldr	r2, [pc, #260]	; (8005088 <USB_HC_StartXfer+0x284>)
 8004f84:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f86:	4b40      	ldr	r3, [pc, #256]	; (8005088 <USB_HC_StartXfer+0x284>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f8e:	4a3e      	ldr	r2, [pc, #248]	; (8005088 <USB_HC_StartXfer+0x284>)
 8004f90:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	78db      	ldrb	r3, [r3, #3]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d006      	beq.n	8004fa8 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004f9a:	4b3b      	ldr	r3, [pc, #236]	; (8005088 <USB_HC_StartXfer+0x284>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fa2:	4a39      	ldr	r2, [pc, #228]	; (8005088 <USB_HC_StartXfer+0x284>)
 8004fa4:	6013      	str	r3, [r2, #0]
 8004fa6:	e005      	b.n	8004fb4 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004fa8:	4b37      	ldr	r3, [pc, #220]	; (8005088 <USB_HC_StartXfer+0x284>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004fb0:	4a35      	ldr	r2, [pc, #212]	; (8005088 <USB_HC_StartXfer+0x284>)
 8004fb2:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004fb4:	4b34      	ldr	r3, [pc, #208]	; (8005088 <USB_HC_StartXfer+0x284>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004fbc:	4a32      	ldr	r2, [pc, #200]	; (8005088 <USB_HC_StartXfer+0x284>)
 8004fbe:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	015a      	lsls	r2, r3, #5
 8004fc4:	6a3b      	ldr	r3, [r7, #32]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fcc:	461a      	mov	r2, r3
 8004fce:	4b2e      	ldr	r3, [pc, #184]	; (8005088 <USB_HC_StartXfer+0x284>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8004fd4:	79fb      	ldrb	r3, [r7, #7]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d14e      	bne.n	8005078 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	78db      	ldrb	r3, [r3, #3]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d14a      	bne.n	8005078 <USB_HC_StartXfer+0x274>
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d046      	beq.n	8005078 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	79db      	ldrb	r3, [r3, #7]
 8004fee:	2b03      	cmp	r3, #3
 8004ff0:	d830      	bhi.n	8005054 <USB_HC_StartXfer+0x250>
 8004ff2:	a201      	add	r2, pc, #4	; (adr r2, 8004ff8 <USB_HC_StartXfer+0x1f4>)
 8004ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff8:	08005009 	.word	0x08005009
 8004ffc:	0800502d 	.word	0x0800502d
 8005000:	08005009 	.word	0x08005009
 8005004:	0800502d 	.word	0x0800502d
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	3303      	adds	r3, #3
 800500e:	089b      	lsrs	r3, r3, #2
 8005010:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005012:	8afa      	ldrh	r2, [r7, #22]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005018:	b29b      	uxth	r3, r3
 800501a:	429a      	cmp	r2, r3
 800501c:	d91c      	bls.n	8005058 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	f043 0220 	orr.w	r2, r3, #32
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	619a      	str	r2, [r3, #24]
          }
          break;
 800502a:	e015      	b.n	8005058 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	3303      	adds	r3, #3
 8005032:	089b      	lsrs	r3, r3, #2
 8005034:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005036:	8afa      	ldrh	r2, [r7, #22]
 8005038:	6a3b      	ldr	r3, [r7, #32]
 800503a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	b29b      	uxth	r3, r3
 8005042:	429a      	cmp	r2, r3
 8005044:	d90a      	bls.n	800505c <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	619a      	str	r2, [r3, #24]
          }
          break;
 8005052:	e003      	b.n	800505c <USB_HC_StartXfer+0x258>

        default:
          break;
 8005054:	bf00      	nop
 8005056:	e002      	b.n	800505e <USB_HC_StartXfer+0x25a>
          break;
 8005058:	bf00      	nop
 800505a:	e000      	b.n	800505e <USB_HC_StartXfer+0x25a>
          break;
 800505c:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	68d9      	ldr	r1, [r3, #12]
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	785a      	ldrb	r2, [r3, #1]
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	b298      	uxth	r0, r3
 800506c:	2300      	movs	r3, #0
 800506e:	9300      	str	r3, [sp, #0]
 8005070:	4603      	mov	r3, r0
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f7ff fb86 	bl	8004784 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3728      	adds	r7, #40	; 0x28
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	1ff80000 	.word	0x1ff80000
 8005088:	200000ac 	.word	0x200000ac

0800508c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	b29b      	uxth	r3, r3
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3714      	adds	r7, #20
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr

080050ae <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80050ae:	b480      	push	{r7}
 80050b0:	b087      	sub	sp, #28
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
 80050b6:	460b      	mov	r3, r1
 80050b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80050be:	78fb      	ldrb	r3, [r7, #3]
 80050c0:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80050c2:	2300      	movs	r3, #0
 80050c4:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	015a      	lsls	r2, r3, #5
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	4413      	add	r3, r2
 80050ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	0c9b      	lsrs	r3, r3, #18
 80050d6:	f003 0303 	and.w	r3, r3, #3
 80050da:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d002      	beq.n	80050e8 <USB_HC_Halt+0x3a>
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d16c      	bne.n	80051c2 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	0151      	lsls	r1, r2, #5
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	440a      	add	r2, r1
 80050fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005102:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005106:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d143      	bne.n	800519c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	015a      	lsls	r2, r3, #5
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	4413      	add	r3, r2
 800511c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	0151      	lsls	r1, r2, #5
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	440a      	add	r2, r1
 800512a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800512e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005132:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	4413      	add	r3, r2
 800513c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	0151      	lsls	r1, r2, #5
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	440a      	add	r2, r1
 800514a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800514e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005152:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	4413      	add	r3, r2
 800515c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	0151      	lsls	r1, r2, #5
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	440a      	add	r2, r1
 800516a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800516e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005172:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	3301      	adds	r3, #1
 8005178:	617b      	str	r3, [r7, #20]
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005180:	d81d      	bhi.n	80051be <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	015a      	lsls	r2, r3, #5
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	4413      	add	r3, r2
 800518a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005194:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005198:	d0ec      	beq.n	8005174 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800519a:	e080      	b.n	800529e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	015a      	lsls	r2, r3, #5
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	4413      	add	r3, r2
 80051a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	0151      	lsls	r1, r2, #5
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	440a      	add	r2, r1
 80051b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051ba:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80051bc:	e06f      	b.n	800529e <USB_HC_Halt+0x1f0>
          break;
 80051be:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80051c0:	e06d      	b.n	800529e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	4413      	add	r3, r2
 80051ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	0151      	lsls	r1, r2, #5
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	440a      	add	r2, r1
 80051d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051e0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d143      	bne.n	800527a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	015a      	lsls	r2, r3, #5
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	4413      	add	r3, r2
 80051fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	0151      	lsls	r1, r2, #5
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	440a      	add	r2, r1
 8005208:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800520c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005210:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	015a      	lsls	r2, r3, #5
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	4413      	add	r3, r2
 800521a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	0151      	lsls	r1, r2, #5
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	440a      	add	r2, r1
 8005228:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800522c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005230:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	015a      	lsls	r2, r3, #5
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	4413      	add	r3, r2
 800523a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	0151      	lsls	r1, r2, #5
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	440a      	add	r2, r1
 8005248:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800524c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005250:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	3301      	adds	r3, #1
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800525e:	d81d      	bhi.n	800529c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	015a      	lsls	r2, r3, #5
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	4413      	add	r3, r2
 8005268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005272:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005276:	d0ec      	beq.n	8005252 <USB_HC_Halt+0x1a4>
 8005278:	e011      	b.n	800529e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	015a      	lsls	r2, r3, #5
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	4413      	add	r3, r2
 8005282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	0151      	lsls	r1, r2, #5
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	440a      	add	r2, r1
 8005290:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005294:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005298:	6013      	str	r3, [r2, #0]
 800529a:	e000      	b.n	800529e <USB_HC_Halt+0x1f0>
          break;
 800529c:	bf00      	nop
    }
  }

  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	371c      	adds	r7, #28
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b087      	sub	sp, #28
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	460b      	mov	r3, r1
 80052b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80052bc:	78fb      	ldrb	r3, [r7, #3]
 80052be:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80052c0:	2301      	movs	r3, #1
 80052c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	04da      	lsls	r2, r3, #19
 80052c8:	4b15      	ldr	r3, [pc, #84]	; (8005320 <USB_DoPing+0x74>)
 80052ca:	4013      	ands	r3, r2
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	0151      	lsls	r1, r2, #5
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	440a      	add	r2, r1
 80052d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052dc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	015a      	lsls	r2, r3, #5
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	4413      	add	r3, r2
 80052e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052f4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052fc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	015a      	lsls	r2, r3, #5
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	4413      	add	r3, r2
 8005306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800530a:	461a      	mov	r2, r3
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	371c      	adds	r7, #28
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	1ff80000 	.word	0x1ff80000

08005324 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005330:	2300      	movs	r3, #0
 8005332:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f7ff f9a1 	bl	800467c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800533a:	2110      	movs	r1, #16
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f7ff f9d9 	bl	80046f4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7ff f9fc 	bl	8004740 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005348:	2300      	movs	r3, #0
 800534a:	613b      	str	r3, [r7, #16]
 800534c:	e01f      	b.n	800538e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	4413      	add	r3, r2
 8005356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005364:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800536c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005374:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	015a      	lsls	r2, r3, #5
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	4413      	add	r3, r2
 800537e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005382:	461a      	mov	r2, r3
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	3301      	adds	r3, #1
 800538c:	613b      	str	r3, [r7, #16]
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	2b0f      	cmp	r3, #15
 8005392:	d9dc      	bls.n	800534e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005394:	2300      	movs	r3, #0
 8005396:	613b      	str	r3, [r7, #16]
 8005398:	e034      	b.n	8005404 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	015a      	lsls	r2, r3, #5
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	4413      	add	r3, r2
 80053a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053b0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053b8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053c0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	015a      	lsls	r2, r3, #5
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	4413      	add	r3, r2
 80053ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ce:	461a      	mov	r2, r3
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	3301      	adds	r3, #1
 80053d8:	617b      	str	r3, [r7, #20]
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053e0:	d80c      	bhi.n	80053fc <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	015a      	lsls	r2, r3, #5
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	4413      	add	r3, r2
 80053ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053f8:	d0ec      	beq.n	80053d4 <USB_StopHost+0xb0>
 80053fa:	e000      	b.n	80053fe <USB_StopHost+0xda>
        break;
 80053fc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	3301      	adds	r3, #1
 8005402:	613b      	str	r3, [r7, #16]
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	2b0f      	cmp	r3, #15
 8005408:	d9c7      	bls.n	800539a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005410:	461a      	mov	r2, r3
 8005412:	f04f 33ff 	mov.w	r3, #4294967295
 8005416:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f04f 32ff 	mov.w	r2, #4294967295
 800541e:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f7ff f91a 	bl	800465a <USB_EnableGlobalInt>

  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3718      	adds	r7, #24
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8005430:	b590      	push	{r4, r7, lr}
 8005432:	b089      	sub	sp, #36	; 0x24
 8005434:	af04      	add	r7, sp, #16
 8005436:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8005438:	2302      	movs	r3, #2
 800543a:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 800543c:	2301      	movs	r3, #1
 800543e:	2202      	movs	r2, #2
 8005440:	2102      	movs	r1, #2
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 fc3a 	bl	8005cbc <USBH_FindInterface>
 8005448:	4603      	mov	r3, r0
 800544a:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 800544c:	7bbb      	ldrb	r3, [r7, #14]
 800544e:	2bff      	cmp	r3, #255	; 0xff
 8005450:	f000 812a 	beq.w	80056a8 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8005454:	7bbb      	ldrb	r3, [r7, #14]
 8005456:	4619      	mov	r1, r3
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 fc13 	bl	8005c84 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8005464:	2050      	movs	r0, #80	; 0x50
 8005466:	f002 fe67 	bl	8008138 <malloc>
 800546a:	4603      	mov	r3, r0
 800546c:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005478:	7bbb      	ldrb	r3, [r7, #14]
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	211a      	movs	r1, #26
 800547e:	fb01 f303 	mul.w	r3, r1, r3
 8005482:	4413      	add	r3, r2
 8005484:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	b25b      	sxtb	r3, r3
 800548c:	2b00      	cmp	r3, #0
 800548e:	da15      	bge.n	80054bc <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005490:	7bbb      	ldrb	r3, [r7, #14]
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	211a      	movs	r1, #26
 8005496:	fb01 f303 	mul.w	r3, r1, r3
 800549a:	4413      	add	r3, r2
 800549c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80054a0:	781a      	ldrb	r2, [r3, #0]
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80054a6:	7bbb      	ldrb	r3, [r7, #14]
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	211a      	movs	r1, #26
 80054ac:	fb01 f303 	mul.w	r3, r1, r3
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80054b6:	881a      	ldrh	r2, [r3, #0]
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	785b      	ldrb	r3, [r3, #1]
 80054c0:	4619      	mov	r1, r3
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f001 fd21 	bl	8006f0a <USBH_AllocPipe>
 80054c8:	4603      	mov	r3, r0
 80054ca:	461a      	mov	r2, r3
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	7819      	ldrb	r1, [r3, #0]
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	7858      	ldrb	r0, [r3, #1]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80054e4:	68ba      	ldr	r2, [r7, #8]
 80054e6:	8952      	ldrh	r2, [r2, #10]
 80054e8:	9202      	str	r2, [sp, #8]
 80054ea:	2203      	movs	r2, #3
 80054ec:	9201      	str	r2, [sp, #4]
 80054ee:	9300      	str	r3, [sp, #0]
 80054f0:	4623      	mov	r3, r4
 80054f2:	4602      	mov	r2, r0
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f001 fcd9 	bl	8006eac <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	2200      	movs	r2, #0
 8005500:	4619      	mov	r1, r3
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f002 fd3e 	bl	8007f84 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8005508:	2300      	movs	r3, #0
 800550a:	2200      	movs	r2, #0
 800550c:	210a      	movs	r1, #10
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 fbd4 	bl	8005cbc <USBH_FindInterface>
 8005514:	4603      	mov	r3, r0
 8005516:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8005518:	7bbb      	ldrb	r3, [r7, #14]
 800551a:	2bff      	cmp	r3, #255	; 0xff
 800551c:	f000 80c4 	beq.w	80056a8 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005520:	7bbb      	ldrb	r3, [r7, #14]
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	211a      	movs	r1, #26
 8005526:	fb01 f303 	mul.w	r3, r1, r3
 800552a:	4413      	add	r3, r2
 800552c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	b25b      	sxtb	r3, r3
 8005534:	2b00      	cmp	r3, #0
 8005536:	da16      	bge.n	8005566 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005538:	7bbb      	ldrb	r3, [r7, #14]
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	211a      	movs	r1, #26
 800553e:	fb01 f303 	mul.w	r3, r1, r3
 8005542:	4413      	add	r3, r2
 8005544:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005548:	781a      	ldrb	r2, [r3, #0]
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800554e:	7bbb      	ldrb	r3, [r7, #14]
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	211a      	movs	r1, #26
 8005554:	fb01 f303 	mul.w	r3, r1, r3
 8005558:	4413      	add	r3, r2
 800555a:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800555e:	881a      	ldrh	r2, [r3, #0]
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	835a      	strh	r2, [r3, #26]
 8005564:	e015      	b.n	8005592 <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005566:	7bbb      	ldrb	r3, [r7, #14]
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	211a      	movs	r1, #26
 800556c:	fb01 f303 	mul.w	r3, r1, r3
 8005570:	4413      	add	r3, r2
 8005572:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005576:	781a      	ldrb	r2, [r3, #0]
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800557c:	7bbb      	ldrb	r3, [r7, #14]
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	211a      	movs	r1, #26
 8005582:	fb01 f303 	mul.w	r3, r1, r3
 8005586:	4413      	add	r3, r2
 8005588:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800558c:	881a      	ldrh	r2, [r3, #0]
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005592:	7bbb      	ldrb	r3, [r7, #14]
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	211a      	movs	r1, #26
 8005598:	fb01 f303 	mul.w	r3, r1, r3
 800559c:	4413      	add	r3, r2
 800559e:	f203 3352 	addw	r3, r3, #850	; 0x352
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	b25b      	sxtb	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	da16      	bge.n	80055d8 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80055aa:	7bbb      	ldrb	r3, [r7, #14]
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	211a      	movs	r1, #26
 80055b0:	fb01 f303 	mul.w	r3, r1, r3
 80055b4:	4413      	add	r3, r2
 80055b6:	f203 3352 	addw	r3, r3, #850	; 0x352
 80055ba:	781a      	ldrb	r2, [r3, #0]
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80055c0:	7bbb      	ldrb	r3, [r7, #14]
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	211a      	movs	r1, #26
 80055c6:	fb01 f303 	mul.w	r3, r1, r3
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80055d0:	881a      	ldrh	r2, [r3, #0]
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	835a      	strh	r2, [r3, #26]
 80055d6:	e015      	b.n	8005604 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80055d8:	7bbb      	ldrb	r3, [r7, #14]
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	211a      	movs	r1, #26
 80055de:	fb01 f303 	mul.w	r3, r1, r3
 80055e2:	4413      	add	r3, r2
 80055e4:	f203 3352 	addw	r3, r3, #850	; 0x352
 80055e8:	781a      	ldrb	r2, [r3, #0]
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80055ee:	7bbb      	ldrb	r3, [r7, #14]
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	211a      	movs	r1, #26
 80055f4:	fb01 f303 	mul.w	r3, r1, r3
 80055f8:	4413      	add	r3, r2
 80055fa:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80055fe:	881a      	ldrh	r2, [r3, #0]
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	7b9b      	ldrb	r3, [r3, #14]
 8005608:	4619      	mov	r1, r3
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f001 fc7d 	bl	8006f0a <USBH_AllocPipe>
 8005610:	4603      	mov	r3, r0
 8005612:	461a      	mov	r2, r3
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	7bdb      	ldrb	r3, [r3, #15]
 800561c:	4619      	mov	r1, r3
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f001 fc73 	bl	8006f0a <USBH_AllocPipe>
 8005624:	4603      	mov	r3, r0
 8005626:	461a      	mov	r2, r3
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	7b59      	ldrb	r1, [r3, #13]
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	7b98      	ldrb	r0, [r3, #14]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005640:	68ba      	ldr	r2, [r7, #8]
 8005642:	8b12      	ldrh	r2, [r2, #24]
 8005644:	9202      	str	r2, [sp, #8]
 8005646:	2202      	movs	r2, #2
 8005648:	9201      	str	r2, [sp, #4]
 800564a:	9300      	str	r3, [sp, #0]
 800564c:	4623      	mov	r3, r4
 800564e:	4602      	mov	r2, r0
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f001 fc2b 	bl	8006eac <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	7b19      	ldrb	r1, [r3, #12]
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	7bd8      	ldrb	r0, [r3, #15]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	8b52      	ldrh	r2, [r2, #26]
 800566e:	9202      	str	r2, [sp, #8]
 8005670:	2202      	movs	r2, #2
 8005672:	9201      	str	r2, [sp, #4]
 8005674:	9300      	str	r3, [sp, #0]
 8005676:	4623      	mov	r3, r4
 8005678:	4602      	mov	r2, r0
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f001 fc16 	bl	8006eac <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	7b5b      	ldrb	r3, [r3, #13]
 800568c:	2200      	movs	r2, #0
 800568e:	4619      	mov	r1, r3
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f002 fc77 	bl	8007f84 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	7b1b      	ldrb	r3, [r3, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	4619      	mov	r1, r3
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f002 fc70 	bl	8007f84 <USBH_LL_SetToggle>
      status = USBH_OK;
 80056a4:	2300      	movs	r3, #0
 80056a6:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 80056a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3714      	adds	r7, #20
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd90      	pop	{r4, r7, pc}

080056b2 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b084      	sub	sp, #16
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00e      	beq.n	80056ea <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	4619      	mov	r1, r3
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f001 fc09 	bl	8006eea <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	4619      	mov	r1, r3
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f001 fc31 	bl	8006f46 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	7b1b      	ldrb	r3, [r3, #12]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00e      	beq.n	8005710 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	7b1b      	ldrb	r3, [r3, #12]
 80056f6:	4619      	mov	r1, r3
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f001 fbf6 	bl	8006eea <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	7b1b      	ldrb	r3, [r3, #12]
 8005702:	4619      	mov	r1, r3
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f001 fc1e 	bl	8006f46 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	7b5b      	ldrb	r3, [r3, #13]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00e      	beq.n	8005736 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	7b5b      	ldrb	r3, [r3, #13]
 800571c:	4619      	mov	r1, r3
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f001 fbe3 	bl	8006eea <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	7b5b      	ldrb	r3, [r3, #13]
 8005728:	4619      	mov	r1, r3
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f001 fc0b 	bl	8006f46 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800573c:	69db      	ldr	r3, [r3, #28]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00b      	beq.n	800575a <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005748:	69db      	ldr	r3, [r3, #28]
 800574a:	4618      	mov	r0, r3
 800574c:	f002 fcfc 	bl	8008148 <free>
    phost->pActiveClass->pData = 0U;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005756:	2200      	movs	r2, #0
 8005758:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 800576c:	2302      	movs	r3, #2
 800576e:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005776:	69db      	ldr	r3, [r3, #28]
 8005778:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	3340      	adds	r3, #64	; 0x40
 800577e:	4619      	mov	r1, r3
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 f8b2 	bl	80058ea <GetLineCoding>
 8005786:	4603      	mov	r3, r0
 8005788:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 800578a:	7bfb      	ldrb	r3, [r7, #15]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d105      	bne.n	800579c <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005796:	2102      	movs	r1, #2
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	4798      	blx	r3
  }
  return status;
 800579c:	7bfb      	ldrb	r3, [r7, #15]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
	...

080057a8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80057b0:	2301      	movs	r3, #1
 80057b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80057b4:	2300      	movs	r3, #0
 80057b6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80057be:	69db      	ldr	r3, [r3, #28]
 80057c0:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80057c8:	2b04      	cmp	r3, #4
 80057ca:	d877      	bhi.n	80058bc <USBH_CDC_Process+0x114>
 80057cc:	a201      	add	r2, pc, #4	; (adr r2, 80057d4 <USBH_CDC_Process+0x2c>)
 80057ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d2:	bf00      	nop
 80057d4:	080057e9 	.word	0x080057e9
 80057d8:	080057ef 	.word	0x080057ef
 80057dc:	0800581f 	.word	0x0800581f
 80057e0:	08005893 	.word	0x08005893
 80057e4:	080058a1 	.word	0x080058a1
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 80057e8:	2300      	movs	r3, #0
 80057ea:	73fb      	strb	r3, [r7, #15]
    break;
 80057ec:	e06d      	b.n	80058ca <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057f2:	4619      	mov	r1, r3
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 f897 	bl	8005928 <SetLineCoding>
 80057fa:	4603      	mov	r3, r0
 80057fc:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 80057fe:	7bbb      	ldrb	r3, [r7, #14]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d104      	bne.n	800580e <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	2202      	movs	r2, #2
 8005808:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800580c:	e058      	b.n	80058c0 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 800580e:	7bbb      	ldrb	r3, [r7, #14]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d055      	beq.n	80058c0 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	2204      	movs	r2, #4
 8005818:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800581c:	e050      	b.n	80058c0 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	3340      	adds	r3, #64	; 0x40
 8005822:	4619      	mov	r1, r3
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 f860 	bl	80058ea <GetLineCoding>
 800582a:	4603      	mov	r3, r0
 800582c:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800582e:	7bbb      	ldrb	r3, [r7, #14]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d126      	bne.n	8005882 <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005846:	791b      	ldrb	r3, [r3, #4]
 8005848:	429a      	cmp	r2, r3
 800584a:	d13b      	bne.n	80058c4 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005856:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005858:	429a      	cmp	r2, r3
 800585a:	d133      	bne.n	80058c4 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005866:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005868:	429a      	cmp	r2, r3
 800586a:	d12b      	bne.n	80058c4 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005874:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005876:	429a      	cmp	r2, r3
 8005878:	d124      	bne.n	80058c4 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f95a 	bl	8005b34 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8005880:	e020      	b.n	80058c4 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8005882:	7bbb      	ldrb	r3, [r7, #14]
 8005884:	2b01      	cmp	r3, #1
 8005886:	d01d      	beq.n	80058c4 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	2204      	movs	r2, #4
 800588c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8005890:	e018      	b.n	80058c4 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f867 	bl	8005966 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 f8dc 	bl	8005a56 <CDC_ProcessReception>
    break;
 800589e:	e014      	b.n	80058ca <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 80058a0:	2100      	movs	r1, #0
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 fece 	bl	8006644 <USBH_ClrFeature>
 80058a8:	4603      	mov	r3, r0
 80058aa:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 80058ac:	7bbb      	ldrb	r3, [r7, #14]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10a      	bne.n	80058c8 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 80058ba:	e005      	b.n	80058c8 <USBH_CDC_Process+0x120>

  default:
    break;
 80058bc:	bf00      	nop
 80058be:	e004      	b.n	80058ca <USBH_CDC_Process+0x122>
    break;
 80058c0:	bf00      	nop
 80058c2:	e002      	b.n	80058ca <USBH_CDC_Process+0x122>
    break;
 80058c4:	bf00      	nop
 80058c6:	e000      	b.n	80058ca <USBH_CDC_Process+0x122>
    break;
 80058c8:	bf00      	nop

  }

  return status;
 80058ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3710      	adds	r7, #16
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	370c      	adds	r7, #12
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr

080058ea <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b082      	sub	sp, #8
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
 80058f2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	22a1      	movs	r2, #161	; 0xa1
 80058f8:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2221      	movs	r2, #33	; 0x21
 80058fe:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2207      	movs	r2, #7
 8005910:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2207      	movs	r2, #7
 8005916:	4619      	mov	r1, r3
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f001 f873 	bl	8006a04 <USBH_CtlReq>
 800591e:	4603      	mov	r3, r0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3708      	adds	r7, #8
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2221      	movs	r2, #33	; 0x21
 8005936:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2220      	movs	r2, #32
 800593c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2207      	movs	r2, #7
 800594e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	2207      	movs	r2, #7
 8005954:	4619      	mov	r1, r3
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f001 f854 	bl	8006a04 <USBH_CtlReq>
 800595c:	4603      	mov	r3, r0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3708      	adds	r7, #8
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b086      	sub	sp, #24
 800596a:	af02      	add	r7, sp, #8
 800596c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005978:	2300      	movs	r3, #0
 800597a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005982:	2b01      	cmp	r3, #1
 8005984:	d002      	beq.n	800598c <CDC_ProcessTransmission+0x26>
 8005986:	2b02      	cmp	r3, #2
 8005988:	d025      	beq.n	80059d6 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 800598a:	e060      	b.n	8005a4e <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	8b12      	ldrh	r2, [r2, #24]
 8005994:	4293      	cmp	r3, r2
 8005996:	d90c      	bls.n	80059b2 <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	69d9      	ldr	r1, [r3, #28]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	8b1a      	ldrh	r2, [r3, #24]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	7b58      	ldrb	r0, [r3, #13]
 80059a4:	2301      	movs	r3, #1
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	4603      	mov	r3, r0
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f001 fa3b 	bl	8006e26 <USBH_BulkSendData>
 80059b0:	e00c      	b.n	80059cc <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	7b58      	ldrb	r0, [r3, #13]
 80059c0:	2301      	movs	r3, #1
 80059c2:	9300      	str	r3, [sp, #0]
 80059c4:	4603      	mov	r3, r0
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f001 fa2d 	bl	8006e26 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2202      	movs	r2, #2
 80059d0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 80059d4:	e03b      	b.n	8005a4e <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	7b5b      	ldrb	r3, [r3, #13]
 80059da:	4619      	mov	r1, r3
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f002 faa7 	bl	8007f30 <USBH_LL_GetURBState>
 80059e2:	4603      	mov	r3, r0
 80059e4:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 80059e6:	7afb      	ldrb	r3, [r7, #11]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d128      	bne.n	8005a3e <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	8b12      	ldrh	r2, [r2, #24]
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d90e      	bls.n	8005a16 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	8b12      	ldrh	r2, [r2, #24]
 8005a00:	1a9a      	subs	r2, r3, r2
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	69db      	ldr	r3, [r3, #28]
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	8b12      	ldrh	r2, [r2, #24]
 8005a0e:	441a      	add	r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	61da      	str	r2, [r3, #28]
 8005a14:	e002      	b.n	8005a1c <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d004      	beq.n	8005a2e <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005a2c:	e00e      	b.n	8005a4c <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f868 	bl	8005b0c <USBH_CDC_TransmitCallback>
    break;
 8005a3c:	e006      	b.n	8005a4c <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 8005a3e:	7afb      	ldrb	r3, [r7, #11]
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d103      	bne.n	8005a4c <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005a4c:	bf00      	nop
  }
}
 8005a4e:	bf00      	nop
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b086      	sub	sp, #24
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005a64:	69db      	ldr	r3, [r3, #28]
 8005a66:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005a72:	2b03      	cmp	r3, #3
 8005a74:	d002      	beq.n	8005a7c <CDC_ProcessReception+0x26>
 8005a76:	2b04      	cmp	r3, #4
 8005a78:	d00e      	beq.n	8005a98 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 8005a7a:	e043      	b.n	8005b04 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	6a19      	ldr	r1, [r3, #32]
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	8b5a      	ldrh	r2, [r3, #26]
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	7b1b      	ldrb	r3, [r3, #12]
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f001 f9f1 	bl	8006e70 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	2204      	movs	r2, #4
 8005a92:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8005a96:	e035      	b.n	8005b04 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	7b1b      	ldrb	r3, [r3, #12]
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f002 fa46 	bl	8007f30 <USBH_LL_GetURBState>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8005aa8:	7cfb      	ldrb	r3, [r7, #19]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d129      	bne.n	8005b02 <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	7b1b      	ldrb	r3, [r3, #12]
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f002 f9a9 	bl	8007e0c <USBH_LL_GetLastXferSize>
 8005aba:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d016      	beq.n	8005af4 <CDC_ProcessReception+0x9e>
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	8b5b      	ldrh	r3, [r3, #26]
 8005aca:	461a      	mov	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d910      	bls.n	8005af4 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	1ad2      	subs	r2, r2, r3
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	6a1a      	ldr	r2, [r3, #32]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	441a      	add	r2, r3
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	2203      	movs	r2, #3
 8005aee:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8005af2:	e006      	b.n	8005b02 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 f80f 	bl	8005b20 <USBH_CDC_ReceiveCallback>
    break;
 8005b02:	bf00      	nop
  }
}
 8005b04:	bf00      	nop
 8005b06:	3718      	adds	r7, #24
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]

}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]

}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]

}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	4613      	mov	r3, r2
 8005b54:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d101      	bne.n	8005b60 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	e019      	b.n	8005b94 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	79fa      	ldrb	r2, [r7, #7]
 8005b64:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f000 f80f 	bl	8005b9c <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d003      	beq.n	8005b8c <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	68ba      	ldr	r2, [r7, #8]
 8005b88:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f002 f88b 	bl	8007ca8 <USBH_LL_Init>

  return USBH_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3710      	adds	r7, #16
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005ba8:	e008      	b.n	8005bbc <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	32e0      	adds	r2, #224	; 0xe0
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	60fb      	str	r3, [r7, #12]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2b0e      	cmp	r3, #14
 8005bc0:	d9f3      	bls.n	8005baa <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	60fb      	str	r3, [r7, #12]
 8005bc6:	e009      	b.n	8005bdc <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	4413      	add	r3, r2
 8005bce:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	3301      	adds	r3, #1
 8005bda:	60fb      	str	r3, [r7, #12]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005be2:	d3f1      	bcc.n	8005bc8 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2240      	movs	r2, #64	; 0x40
 8005c08:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3714      	adds	r7, #20
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b085      	sub	sp, #20
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
 8005c36:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d017      	beq.n	8005c72 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d10f      	bne.n	8005c6c <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c52:	1c59      	adds	r1, r3, #1
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	33dc      	adds	r3, #220	; 0xdc
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	4413      	add	r3, r2
 8005c62:	683a      	ldr	r2, [r7, #0]
 8005c64:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8005c66:	2300      	movs	r3, #0
 8005c68:	73fb      	strb	r3, [r7, #15]
 8005c6a:	e004      	b.n	8005c76 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	73fb      	strb	r3, [r7, #15]
 8005c70:	e001      	b.n	8005c76 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005c72:	2302      	movs	r3, #2
 8005c74:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3714      	adds	r7, #20
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8005c90:	2300      	movs	r3, #0
 8005c92:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8005c9a:	78fa      	ldrb	r2, [r7, #3]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d204      	bcs.n	8005caa <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	78fa      	ldrb	r2, [r7, #3]
 8005ca4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8005ca8:	e001      	b.n	8005cae <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005caa:	2302      	movs	r3, #2
 8005cac:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8005cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3714      	adds	r7, #20
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b087      	sub	sp, #28
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	4608      	mov	r0, r1
 8005cc6:	4611      	mov	r1, r2
 8005cc8:	461a      	mov	r2, r3
 8005cca:	4603      	mov	r3, r0
 8005ccc:	70fb      	strb	r3, [r7, #3]
 8005cce:	460b      	mov	r3, r1
 8005cd0:	70bb      	strb	r3, [r7, #2]
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8005ce4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005ce6:	e025      	b.n	8005d34 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005ce8:	7dfb      	ldrb	r3, [r7, #23]
 8005cea:	221a      	movs	r2, #26
 8005cec:	fb02 f303 	mul.w	r3, r2, r3
 8005cf0:	3308      	adds	r3, #8
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	3302      	adds	r3, #2
 8005cf8:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	795b      	ldrb	r3, [r3, #5]
 8005cfe:	78fa      	ldrb	r2, [r7, #3]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d002      	beq.n	8005d0a <USBH_FindInterface+0x4e>
 8005d04:	78fb      	ldrb	r3, [r7, #3]
 8005d06:	2bff      	cmp	r3, #255	; 0xff
 8005d08:	d111      	bne.n	8005d2e <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8005d0e:	78ba      	ldrb	r2, [r7, #2]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d002      	beq.n	8005d1a <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005d14:	78bb      	ldrb	r3, [r7, #2]
 8005d16:	2bff      	cmp	r3, #255	; 0xff
 8005d18:	d109      	bne.n	8005d2e <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005d1e:	787a      	ldrb	r2, [r7, #1]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d002      	beq.n	8005d2a <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005d24:	787b      	ldrb	r3, [r7, #1]
 8005d26:	2bff      	cmp	r3, #255	; 0xff
 8005d28:	d101      	bne.n	8005d2e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005d2a:	7dfb      	ldrb	r3, [r7, #23]
 8005d2c:	e006      	b.n	8005d3c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005d2e:	7dfb      	ldrb	r3, [r7, #23]
 8005d30:	3301      	adds	r3, #1
 8005d32:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005d34:	7dfb      	ldrb	r3, [r7, #23]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d9d6      	bls.n	8005ce8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005d3a:	23ff      	movs	r3, #255	; 0xff
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	371c      	adds	r7, #28
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f001 ffe5 	bl	8007d20 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8005d56:	2101      	movs	r1, #1
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f002 f8fc 	bl	8007f56 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3708      	adds	r7, #8
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b088      	sub	sp, #32
 8005d6c:	af04      	add	r7, sp, #16
 8005d6e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005d70:	2302      	movs	r3, #2
 8005d72:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005d74:	2300      	movs	r3, #0
 8005d76:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 faec 	bl	8006356 <USBH_IsPortEnabled>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d10c      	bne.n	8005d9e <USBH_Process+0x36>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d007      	beq.n	8005d9e <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2b03      	cmp	r3, #3
 8005d96:	d002      	beq.n	8005d9e <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2203      	movs	r2, #3
 8005d9c:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	2b0b      	cmp	r3, #11
 8005da6:	f200 814c 	bhi.w	8006042 <USBH_Process+0x2da>
 8005daa:	a201      	add	r2, pc, #4	; (adr r2, 8005db0 <USBH_Process+0x48>)
 8005dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db0:	08005de1 	.word	0x08005de1
 8005db4:	08005e03 	.word	0x08005e03
 8005db8:	08005e17 	.word	0x08005e17
 8005dbc:	0800601d 	.word	0x0800601d
 8005dc0:	08006043 	.word	0x08006043
 8005dc4:	08005ea5 	.word	0x08005ea5
 8005dc8:	08005fd3 	.word	0x08005fd3
 8005dcc:	08005ed5 	.word	0x08005ed5
 8005dd0:	08005ef5 	.word	0x08005ef5
 8005dd4:	08005f15 	.word	0x08005f15
 8005dd8:	08005f43 	.word	0x08005f43
 8005ddc:	08006005 	.word	0x08006005
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f000 812c 	beq.w	8006046 <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8005df4:	20c8      	movs	r0, #200	; 0xc8
 8005df6:	f002 f8f8 	bl	8007fea <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f001 ffeb 	bl	8007dd6 <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8005e00:	e121      	b.n	8006046 <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	f040 811e 	bne.w	800604a <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2202      	movs	r2, #2
 8005e12:	701a      	strb	r2, [r3, #0]
    }
    break;
 8005e14:	e119      	b.n	800604a <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8005e16:	2064      	movs	r0, #100	; 0x64
 8005e18:	f002 f8e7 	bl	8007fea <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f001 ffb5 	bl	8007d8c <USBH_LL_GetSpeed>
 8005e22:	4603      	mov	r3, r0
 8005e24:	461a      	mov	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2205      	movs	r2, #5
 8005e30:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8005e32:	2100      	movs	r1, #0
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f001 f868 	bl	8006f0a <USBH_AllocPipe>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8005e42:	2180      	movs	r1, #128	; 0x80
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f001 f860 	bl	8006f0a <USBH_AllocPipe>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	7919      	ldrb	r1, [r3, #4]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8005e66:	b292      	uxth	r2, r2
 8005e68:	9202      	str	r2, [sp, #8]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	9201      	str	r2, [sp, #4]
 8005e6e:	9300      	str	r3, [sp, #0]
 8005e70:	4603      	mov	r3, r0
 8005e72:	2280      	movs	r2, #128	; 0x80
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f001 f819 	bl	8006eac <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	7959      	ldrb	r1, [r3, #5]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8005e8e:	b292      	uxth	r2, r2
 8005e90:	9202      	str	r2, [sp, #8]
 8005e92:	2200      	movs	r2, #0
 8005e94:	9201      	str	r2, [sp, #4]
 8005e96:	9300      	str	r3, [sp, #0]
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f001 f805 	bl	8006eac <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005ea2:	e0e3      	b.n	800606c <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 f8e7 	bl	8006078 <USBH_HandleEnum>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f040 80ce 	bne.w	800604e <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d103      	bne.n	8005ecc <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2208      	movs	r2, #8
 8005ec8:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8005eca:	e0c0      	b.n	800604e <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2207      	movs	r2, #7
 8005ed0:	701a      	strb	r2, [r3, #0]
    break;
 8005ed2:	e0bc      	b.n	800604e <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f000 80b9 	beq.w	8006052 <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005ee6:	2101      	movs	r1, #1
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2208      	movs	r2, #8
 8005ef0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005ef2:	e0ae      	b.n	8006052 <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	4619      	mov	r1, r3
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 fb59 	bl	80065b6 <USBH_SetCfg>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f040 80a5 	bne.w	8006056 <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2209      	movs	r2, #9
 8005f10:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005f12:	e0a0      	b.n	8006056 <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8005f1a:	f003 0320 	and.w	r3, r3, #32
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00b      	beq.n	8005f3a <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8005f22:	2101      	movs	r1, #1
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 fb69 	bl	80065fc <USBH_SetFeature>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f040 8094 	bne.w	800605a <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	220a      	movs	r2, #10
 8005f36:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005f38:	e08f      	b.n	800605a <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	220a      	movs	r2, #10
 8005f3e:	701a      	strb	r2, [r3, #0]
    break;
 8005f40:	e08b      	b.n	800605a <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f000 8088 	beq.w	800605e <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005f56:	2300      	movs	r3, #0
 8005f58:	73fb      	strb	r3, [r7, #15]
 8005f5a:	e017      	b.n	8005f8c <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8005f5c:	7bfb      	ldrb	r3, [r7, #15]
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	33dc      	adds	r3, #220	; 0xdc
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4413      	add	r3, r2
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	791a      	ldrb	r2, [r3, #4]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d108      	bne.n	8005f86 <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	33dc      	adds	r3, #220	; 0xdc
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	4413      	add	r3, r2
 8005f7e:	685a      	ldr	r2, [r3, #4]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005f86:	7bfb      	ldrb	r3, [r7, #15]
 8005f88:	3301      	adds	r3, #1
 8005f8a:	73fb      	strb	r3, [r7, #15]
 8005f8c:	7bfb      	ldrb	r3, [r7, #15]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d0e4      	beq.n	8005f5c <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d016      	beq.n	8005fca <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	4798      	blx	r3
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d109      	bne.n	8005fc2 <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2206      	movs	r2, #6
 8005fb2:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005fba:	2103      	movs	r1, #3
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005fc0:	e04d      	b.n	800605e <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	220d      	movs	r2, #13
 8005fc6:	701a      	strb	r2, [r3, #0]
    break;
 8005fc8:	e049      	b.n	800605e <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	220d      	movs	r2, #13
 8005fce:	701a      	strb	r2, [r3, #0]
    break;
 8005fd0:	e045      	b.n	800605e <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00f      	beq.n	8005ffc <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	4798      	blx	r3
 8005fe8:	4603      	mov	r3, r0
 8005fea:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8005fec:	7bbb      	ldrb	r3, [r7, #14]
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d136      	bne.n	8006062 <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	220b      	movs	r2, #11
 8005ff8:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8005ffa:	e032      	b.n	8006062 <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	220d      	movs	r2, #13
 8006000:	701a      	strb	r2, [r3, #0]
    break;
 8006002:	e02e      	b.n	8006062 <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800600a:	2b00      	cmp	r3, #0
 800600c:	d02b      	beq.n	8006066 <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	4798      	blx	r3
    }
    break;
 800601a:	e024      	b.n	8006066 <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f7ff fdbd 	bl	8005b9c <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006028:	2b00      	cmp	r3, #0
 800602a:	d01e      	beq.n	800606a <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8006040:	e013      	b.n	800606a <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 8006042:	bf00      	nop
 8006044:	e012      	b.n	800606c <USBH_Process+0x304>
    break;
 8006046:	bf00      	nop
 8006048:	e010      	b.n	800606c <USBH_Process+0x304>
    break;
 800604a:	bf00      	nop
 800604c:	e00e      	b.n	800606c <USBH_Process+0x304>
    break;
 800604e:	bf00      	nop
 8006050:	e00c      	b.n	800606c <USBH_Process+0x304>
    break;
 8006052:	bf00      	nop
 8006054:	e00a      	b.n	800606c <USBH_Process+0x304>
    break;
 8006056:	bf00      	nop
 8006058:	e008      	b.n	800606c <USBH_Process+0x304>
    break;
 800605a:	bf00      	nop
 800605c:	e006      	b.n	800606c <USBH_Process+0x304>
    break;
 800605e:	bf00      	nop
 8006060:	e004      	b.n	800606c <USBH_Process+0x304>
    break;
 8006062:	bf00      	nop
 8006064:	e002      	b.n	800606c <USBH_Process+0x304>
    break;
 8006066:	bf00      	nop
 8006068:	e000      	b.n	800606c <USBH_Process+0x304>
    break;
 800606a:	bf00      	nop
  }
 return USBH_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop

08006078 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b088      	sub	sp, #32
 800607c:	af04      	add	r7, sp, #16
 800607e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006080:	2301      	movs	r3, #1
 8006082:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	785b      	ldrb	r3, [r3, #1]
 8006088:	2b07      	cmp	r3, #7
 800608a:	f200 80f8 	bhi.w	800627e <USBH_HandleEnum+0x206>
 800608e:	a201      	add	r2, pc, #4	; (adr r2, 8006094 <USBH_HandleEnum+0x1c>)
 8006090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006094:	080060b5 	.word	0x080060b5
 8006098:	08006127 	.word	0x08006127
 800609c:	0800613f 	.word	0x0800613f
 80060a0:	080061b5 	.word	0x080061b5
 80060a4:	080061cb 	.word	0x080061cb
 80060a8:	080061e7 	.word	0x080061e7
 80060ac:	0800621b 	.word	0x0800621b
 80060b0:	0800624f 	.word	0x0800624f
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 80060b4:	2108      	movs	r1, #8
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 f9ad 	bl	8006416 <USBH_Get_DevDesc>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	f040 80df 	bne.w	8006282 <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	7919      	ldrb	r1, [r3, #4]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80060e8:	b292      	uxth	r2, r2
 80060ea:	9202      	str	r2, [sp, #8]
 80060ec:	2200      	movs	r2, #0
 80060ee:	9201      	str	r2, [sp, #4]
 80060f0:	9300      	str	r3, [sp, #0]
 80060f2:	4603      	mov	r3, r0
 80060f4:	2280      	movs	r2, #128	; 0x80
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fed8 	bl	8006eac <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	7959      	ldrb	r1, [r3, #5]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006110:	b292      	uxth	r2, r2
 8006112:	9202      	str	r2, [sp, #8]
 8006114:	2200      	movs	r2, #0
 8006116:	9201      	str	r2, [sp, #4]
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	4603      	mov	r3, r0
 800611c:	2200      	movs	r2, #0
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 fec4 	bl	8006eac <USBH_OpenPipe>

    }
    break;
 8006124:	e0ad      	b.n	8006282 <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8006126:	2112      	movs	r1, #18
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 f974 	bl	8006416 <USBH_Get_DevDesc>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	f040 80a8 	bne.w	8006286 <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2202      	movs	r2, #2
 800613a:	705a      	strb	r2, [r3, #1]

    }
    break;
 800613c:	e0a3      	b.n	8006286 <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800613e:	2101      	movs	r1, #1
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 fa14 	bl	800656e <USBH_SetAddress>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	f040 809e 	bne.w	800628a <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 800614e:	2002      	movs	r0, #2
 8006150:	f001 ff4b 	bl	8007fea <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2203      	movs	r2, #3
 8006160:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	7919      	ldrb	r1, [r3, #4]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006176:	b292      	uxth	r2, r2
 8006178:	9202      	str	r2, [sp, #8]
 800617a:	2200      	movs	r2, #0
 800617c:	9201      	str	r2, [sp, #4]
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	4603      	mov	r3, r0
 8006182:	2280      	movs	r2, #128	; 0x80
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 fe91 	bl	8006eac <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	7959      	ldrb	r1, [r3, #5]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800619e:	b292      	uxth	r2, r2
 80061a0:	9202      	str	r2, [sp, #8]
 80061a2:	2200      	movs	r2, #0
 80061a4:	9201      	str	r2, [sp, #4]
 80061a6:	9300      	str	r3, [sp, #0]
 80061a8:	4603      	mov	r3, r0
 80061aa:	2200      	movs	r2, #0
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 fe7d 	bl	8006eac <USBH_OpenPipe>
    }
    break;
 80061b2:	e06a      	b.n	800628a <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 80061b4:	2109      	movs	r1, #9
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 f955 	bl	8006466 <USBH_Get_CfgDesc>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d165      	bne.n	800628e <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2204      	movs	r2, #4
 80061c6:	705a      	strb	r2, [r3, #1]
    }
    break;
 80061c8:	e061      	b.n	800628e <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 80061d0:	4619      	mov	r1, r3
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 f947 	bl	8006466 <USBH_Get_CfgDesc>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d159      	bne.n	8006292 <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2205      	movs	r2, #5
 80061e2:	705a      	strb	r2, [r3, #1]
    }
    break;
 80061e4:	e055      	b.n	8006292 <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d010      	beq.n	8006212 <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80061fc:	23ff      	movs	r3, #255	; 0xff
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 f955 	bl	80064ae <USBH_Get_StringDesc>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d145      	bne.n	8006296 <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2206      	movs	r2, #6
 800620e:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006210:	e041      	b.n	8006296 <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2206      	movs	r2, #6
 8006216:	705a      	strb	r2, [r3, #1]
    break;
 8006218:	e03d      	b.n	8006296 <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8006220:	2b00      	cmp	r3, #0
 8006222:	d010      	beq.n	8006246 <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006230:	23ff      	movs	r3, #255	; 0xff
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f93b 	bl	80064ae <USBH_Get_StringDesc>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d12d      	bne.n	800629a <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2207      	movs	r2, #7
 8006242:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006244:	e029      	b.n	800629a <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2207      	movs	r2, #7
 800624a:	705a      	strb	r2, [r3, #1]
    break;
 800624c:	e025      	b.n	800629a <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00f      	beq.n	8006278 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006264:	23ff      	movs	r3, #255	; 0xff
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f921 	bl	80064ae <USBH_Get_StringDesc>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d115      	bne.n	800629e <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 8006272:	2300      	movs	r3, #0
 8006274:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006276:	e012      	b.n	800629e <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 8006278:	2300      	movs	r3, #0
 800627a:	73fb      	strb	r3, [r7, #15]
    break;
 800627c:	e00f      	b.n	800629e <USBH_HandleEnum+0x226>

  default:
    break;
 800627e:	bf00      	nop
 8006280:	e00e      	b.n	80062a0 <USBH_HandleEnum+0x228>
    break;
 8006282:	bf00      	nop
 8006284:	e00c      	b.n	80062a0 <USBH_HandleEnum+0x228>
    break;
 8006286:	bf00      	nop
 8006288:	e00a      	b.n	80062a0 <USBH_HandleEnum+0x228>
    break;
 800628a:	bf00      	nop
 800628c:	e008      	b.n	80062a0 <USBH_HandleEnum+0x228>
    break;
 800628e:	bf00      	nop
 8006290:	e006      	b.n	80062a0 <USBH_HandleEnum+0x228>
    break;
 8006292:	bf00      	nop
 8006294:	e004      	b.n	80062a0 <USBH_HandleEnum+0x228>
    break;
 8006296:	bf00      	nop
 8006298:	e002      	b.n	80062a0 <USBH_HandleEnum+0x228>
    break;
 800629a:	bf00      	nop
 800629c:	e000      	b.n	80062a0 <USBH_HandleEnum+0x228>
    break;
 800629e:	bf00      	nop
  }
  return Status;
 80062a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3710      	adds	r7, #16
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop

080062ac <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 80062be:	bf00      	nop
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b082      	sub	sp, #8
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80062d8:	1c5a      	adds	r2, r3, #1
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 f804 	bl	80062ee <USBH_HandleSof>
}
 80062e6:	bf00      	nop
 80062e8:	3708      	adds	r7, #8
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b082      	sub	sp, #8
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	2b0b      	cmp	r3, #11
 80062fe:	d10a      	bne.n	8006316 <USBH_HandleSof+0x28>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006306:	2b00      	cmp	r3, #0
 8006308:	d005      	beq.n	8006316 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	4798      	blx	r3
  }
}
 8006316:	bf00      	nop
 8006318:	3708      	adds	r7, #8
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 800631e:	b480      	push	{r7}
 8006320:	b083      	sub	sp, #12
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800632e:	bf00      	nop
}
 8006330:	370c      	adds	r7, #12
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr

0800633a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 800633a:	b480      	push	{r7}
 800633c:	b083      	sub	sp, #12
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800634a:	bf00      	nop
}
 800634c:	370c      	adds	r7, #12
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr

08006356 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 8006356:	b480      	push	{r7}
 8006358:	b083      	sub	sp, #12
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8006364:	4618      	mov	r0, r3
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	b2db      	uxtb	r3, r3
 800637e:	2b00      	cmp	r3, #0
 8006380:	d10f      	bne.n	80063a2 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00e      	beq.n	80063b2 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800639a:	2104      	movs	r1, #4
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	4798      	blx	r3
 80063a0:	e007      	b.n	80063b2 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d102      	bne.n	80063b2 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2202      	movs	r2, #2
 80063b0:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3708      	adds	r7, #8
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f001 fcc6 	bl	8007d56 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	791b      	ldrb	r3, [r3, #4]
 80063ce:	4619      	mov	r1, r3
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 fdb8 	bl	8006f46 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	795b      	ldrb	r3, [r3, #5]
 80063da:	4619      	mov	r1, r3
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 fdb2 	bl	8006f46 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d005      	beq.n	8006400 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80063fa:	2105      	movs	r1, #5
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f001 fc8d 	bl	8007d20 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2203      	movs	r2, #3
 800640a:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3708      	adds	r7, #8
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b086      	sub	sp, #24
 800641a:	af02      	add	r7, sp, #8
 800641c:	6078      	str	r0, [r7, #4]
 800641e:	460b      	mov	r3, r1
 8006420:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8006428:	78fb      	ldrb	r3, [r7, #3]
 800642a:	b29b      	uxth	r3, r3
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	4613      	mov	r3, r2
 8006430:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006434:	2100      	movs	r1, #0
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f864 	bl	8006504 <USBH_GetDescriptor>
 800643c:	4603      	mov	r3, r0
 800643e:	73fb      	strb	r3, [r7, #15]
 8006440:	7bfb      	ldrb	r3, [r7, #15]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10a      	bne.n	800645c <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f203 3022 	addw	r0, r3, #802	; 0x322
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006452:	78fa      	ldrb	r2, [r7, #3]
 8006454:	b292      	uxth	r2, r2
 8006456:	4619      	mov	r1, r3
 8006458:	f000 f918 	bl	800668c <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 800645c:	7bfb      	ldrb	r3, [r7, #15]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 8006466:	b580      	push	{r7, lr}
 8006468:	b086      	sub	sp, #24
 800646a:	af02      	add	r7, sp, #8
 800646c:	6078      	str	r0, [r7, #4]
 800646e:	460b      	mov	r3, r1
 8006470:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	331c      	adds	r3, #28
 8006476:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8006478:	887b      	ldrh	r3, [r7, #2]
 800647a:	9300      	str	r3, [sp, #0]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006482:	2100      	movs	r1, #0
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 f83d 	bl	8006504 <USBH_GetDescriptor>
 800648a:	4603      	mov	r3, r0
 800648c:	72fb      	strb	r3, [r7, #11]
 800648e:	7afb      	ldrb	r3, [r7, #11]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d107      	bne.n	80064a4 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800649a:	887a      	ldrh	r2, [r7, #2]
 800649c:	68f9      	ldr	r1, [r7, #12]
 800649e:	4618      	mov	r0, r3
 80064a0:	f000 f964 	bl	800676c <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 80064a4:	7afb      	ldrb	r3, [r7, #11]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b088      	sub	sp, #32
 80064b2:	af02      	add	r7, sp, #8
 80064b4:	60f8      	str	r0, [r7, #12]
 80064b6:	607a      	str	r2, [r7, #4]
 80064b8:	461a      	mov	r2, r3
 80064ba:	460b      	mov	r3, r1
 80064bc:	72fb      	strb	r3, [r7, #11]
 80064be:	4613      	mov	r3, r2
 80064c0:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 80064c2:	7afb      	ldrb	r3, [r7, #11]
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80064ca:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80064d2:	893b      	ldrh	r3, [r7, #8]
 80064d4:	9300      	str	r3, [sp, #0]
 80064d6:	460b      	mov	r3, r1
 80064d8:	2100      	movs	r1, #0
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f000 f812 	bl	8006504 <USBH_GetDescriptor>
 80064e0:	4603      	mov	r3, r0
 80064e2:	75fb      	strb	r3, [r7, #23]
 80064e4:	7dfb      	ldrb	r3, [r7, #23]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d107      	bne.n	80064fa <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80064f0:	893a      	ldrh	r2, [r7, #8]
 80064f2:	6879      	ldr	r1, [r7, #4]
 80064f4:	4618      	mov	r0, r3
 80064f6:	f000 fa37 	bl	8006968 <USBH_ParseStringDesc>
  }
  return status;
 80064fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3718      	adds	r7, #24
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	607b      	str	r3, [r7, #4]
 800650e:	460b      	mov	r3, r1
 8006510:	72fb      	strb	r3, [r7, #11]
 8006512:	4613      	mov	r3, r2
 8006514:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	789b      	ldrb	r3, [r3, #2]
 800651a:	2b01      	cmp	r3, #1
 800651c:	d11c      	bne.n	8006558 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800651e:	7afb      	ldrb	r3, [r7, #11]
 8006520:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006524:	b2da      	uxtb	r2, r3
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2206      	movs	r2, #6
 800652e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	893a      	ldrh	r2, [r7, #8]
 8006534:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006536:	893b      	ldrh	r3, [r7, #8]
 8006538:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800653c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006540:	d104      	bne.n	800654c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f240 4209 	movw	r2, #1033	; 0x409
 8006548:	829a      	strh	r2, [r3, #20]
 800654a:	e002      	b.n	8006552 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	8b3a      	ldrh	r2, [r7, #24]
 8006556:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8006558:	8b3b      	ldrh	r3, [r7, #24]
 800655a:	461a      	mov	r2, r3
 800655c:	6879      	ldr	r1, [r7, #4]
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f000 fa50 	bl	8006a04 <USBH_CtlReq>
 8006564:	4603      	mov	r3, r0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3710      	adds	r7, #16
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800656e:	b580      	push	{r7, lr}
 8006570:	b082      	sub	sp, #8
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
 8006576:	460b      	mov	r3, r1
 8006578:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	789b      	ldrb	r3, [r3, #2]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d10f      	bne.n	80065a2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2205      	movs	r2, #5
 800658c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800658e:	78fb      	ldrb	r3, [r7, #3]
 8006590:	b29a      	uxth	r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80065a2:	2200      	movs	r2, #0
 80065a4:	2100      	movs	r1, #0
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 fa2c 	bl	8006a04 <USBH_CtlReq>
 80065ac:	4603      	mov	r3, r0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b082      	sub	sp, #8
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
 80065be:	460b      	mov	r3, r1
 80065c0:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	789b      	ldrb	r3, [r3, #2]
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d10e      	bne.n	80065e8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2209      	movs	r2, #9
 80065d4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	887a      	ldrh	r2, [r7, #2]
 80065da:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 80065e8:	2200      	movs	r2, #0
 80065ea:	2100      	movs	r1, #0
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 fa09 	bl	8006a04 <USBH_CtlReq>
 80065f2:	4603      	mov	r3, r0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3708      	adds	r7, #8
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	460b      	mov	r3, r1
 8006606:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	789b      	ldrb	r3, [r3, #2]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d10f      	bne.n	8006630 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2203      	movs	r2, #3
 800661a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800661c:	78fb      	ldrb	r3, [r7, #3]
 800661e:	b29a      	uxth	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006630:	2200      	movs	r2, #0
 8006632:	2100      	movs	r1, #0
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 f9e5 	bl	8006a04 <USBH_CtlReq>
 800663a:	4603      	mov	r3, r0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3708      	adds	r7, #8
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	460b      	mov	r3, r1
 800664e:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	789b      	ldrb	r3, [r3, #2]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d10f      	bne.n	8006678 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2202      	movs	r2, #2
 800665c:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2201      	movs	r2, #1
 8006662:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800666a:	78fb      	ldrb	r3, [r7, #3]
 800666c:	b29a      	uxth	r2, r3
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8006678:	2200      	movs	r2, #0
 800667a:	2100      	movs	r1, #0
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 f9c1 	bl	8006a04 <USBH_CtlReq>
 8006682:	4603      	mov	r3, r0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3708      	adds	r7, #8
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	4613      	mov	r3, r2
 8006698:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	781a      	ldrb	r2, [r3, #0]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	785a      	ldrb	r2, [r3, #1]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	3302      	adds	r3, #2
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	3303      	adds	r3, #3
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	021b      	lsls	r3, r3, #8
 80066bc:	b29b      	uxth	r3, r3
 80066be:	4313      	orrs	r3, r2
 80066c0:	b29a      	uxth	r2, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	791a      	ldrb	r2, [r3, #4]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	795a      	ldrb	r2, [r3, #5]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	799a      	ldrb	r2, [r3, #6]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	79da      	ldrb	r2, [r3, #7]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80066e6:	88fb      	ldrh	r3, [r7, #6]
 80066e8:	2b08      	cmp	r3, #8
 80066ea:	d939      	bls.n	8006760 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	3308      	adds	r3, #8
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	3309      	adds	r3, #9
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	021b      	lsls	r3, r3, #8
 80066fe:	b29b      	uxth	r3, r3
 8006700:	4313      	orrs	r3, r2
 8006702:	b29a      	uxth	r2, r3
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	330a      	adds	r3, #10
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	b29a      	uxth	r2, r3
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	330b      	adds	r3, #11
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	b29b      	uxth	r3, r3
 8006718:	021b      	lsls	r3, r3, #8
 800671a:	b29b      	uxth	r3, r3
 800671c:	4313      	orrs	r3, r2
 800671e:	b29a      	uxth	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	330c      	adds	r3, #12
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	b29a      	uxth	r2, r3
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	330d      	adds	r3, #13
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	b29b      	uxth	r3, r3
 8006734:	021b      	lsls	r3, r3, #8
 8006736:	b29b      	uxth	r3, r3
 8006738:	4313      	orrs	r3, r2
 800673a:	b29a      	uxth	r2, r3
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	7b9a      	ldrb	r2, [r3, #14]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	7bda      	ldrb	r2, [r3, #15]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	7c1a      	ldrb	r2, [r3, #16]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	7c5a      	ldrb	r2, [r3, #17]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	745a      	strb	r2, [r3, #17]
  }
}
 8006760:	bf00      	nop
 8006762:	3714      	adds	r7, #20
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b08a      	sub	sp, #40	; 0x28
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	4613      	mov	r3, r2
 8006778:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800677e:	2300      	movs	r3, #0
 8006780:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006784:	2300      	movs	r3, #0
 8006786:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	781a      	ldrb	r2, [r3, #0]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	785a      	ldrb	r2, [r3, #1]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	3302      	adds	r3, #2
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	3303      	adds	r3, #3
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	021b      	lsls	r3, r3, #8
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	4313      	orrs	r3, r2
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	791a      	ldrb	r2, [r3, #4]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	795a      	ldrb	r2, [r3, #5]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	799a      	ldrb	r2, [r3, #6]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	79da      	ldrb	r2, [r3, #7]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	7a1a      	ldrb	r2, [r3, #8]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 80067e2:	88fb      	ldrh	r3, [r7, #6]
 80067e4:	2b09      	cmp	r3, #9
 80067e6:	d95f      	bls.n	80068a8 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80067e8:	2309      	movs	r3, #9
 80067ea:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80067ec:	2300      	movs	r3, #0
 80067ee:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80067f0:	e051      	b.n	8006896 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80067f2:	f107 0316 	add.w	r3, r7, #22
 80067f6:	4619      	mov	r1, r3
 80067f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067fa:	f000 f8e8 	bl	80069ce <USBH_GetNextDesc>
 80067fe:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006802:	785b      	ldrb	r3, [r3, #1]
 8006804:	2b04      	cmp	r3, #4
 8006806:	d146      	bne.n	8006896 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006808:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800680c:	221a      	movs	r2, #26
 800680e:	fb02 f303 	mul.w	r3, r2, r3
 8006812:	3308      	adds	r3, #8
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	4413      	add	r3, r2
 8006818:	3302      	adds	r3, #2
 800681a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 800681c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800681e:	69f8      	ldr	r0, [r7, #28]
 8006820:	f000 f846 	bl	80068b0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006824:	2300      	movs	r3, #0
 8006826:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800682a:	2300      	movs	r3, #0
 800682c:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800682e:	e022      	b.n	8006876 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8006830:	f107 0316 	add.w	r3, r7, #22
 8006834:	4619      	mov	r1, r3
 8006836:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006838:	f000 f8c9 	bl	80069ce <USBH_GetNextDesc>
 800683c:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800683e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006840:	785b      	ldrb	r3, [r3, #1]
 8006842:	2b05      	cmp	r3, #5
 8006844:	d117      	bne.n	8006876 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006846:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800684a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800684e:	3201      	adds	r2, #1
 8006850:	00d2      	lsls	r2, r2, #3
 8006852:	211a      	movs	r1, #26
 8006854:	fb01 f303 	mul.w	r3, r1, r3
 8006858:	4413      	add	r3, r2
 800685a:	3308      	adds	r3, #8
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	4413      	add	r3, r2
 8006860:	3304      	adds	r3, #4
 8006862:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8006864:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006866:	69b8      	ldr	r0, [r7, #24]
 8006868:	f000 f851 	bl	800690e <USBH_ParseEPDesc>
            ep_ix++;
 800686c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006870:	3301      	adds	r3, #1
 8006872:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	791b      	ldrb	r3, [r3, #4]
 800687a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800687e:	429a      	cmp	r2, r3
 8006880:	d204      	bcs.n	800688c <USBH_ParseCfgDesc+0x120>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	885a      	ldrh	r2, [r3, #2]
 8006886:	8afb      	ldrh	r3, [r7, #22]
 8006888:	429a      	cmp	r2, r3
 800688a:	d8d1      	bhi.n	8006830 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800688c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006890:	3301      	adds	r3, #1
 8006892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006896:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800689a:	2b01      	cmp	r3, #1
 800689c:	d804      	bhi.n	80068a8 <USBH_ParseCfgDesc+0x13c>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	885a      	ldrh	r2, [r3, #2]
 80068a2:	8afb      	ldrh	r3, [r7, #22]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d8a4      	bhi.n	80067f2 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80068a8:	bf00      	nop
 80068aa:	3728      	adds	r7, #40	; 0x28
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	781a      	ldrb	r2, [r3, #0]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	785a      	ldrb	r2, [r3, #1]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	789a      	ldrb	r2, [r3, #2]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	78da      	ldrb	r2, [r3, #3]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	791a      	ldrb	r2, [r3, #4]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	795a      	ldrb	r2, [r3, #5]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	799a      	ldrb	r2, [r3, #6]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	79da      	ldrb	r2, [r3, #7]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	7a1a      	ldrb	r2, [r3, #8]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	721a      	strb	r2, [r3, #8]
}
 8006902:	bf00      	nop
 8006904:	370c      	adds	r7, #12
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr

0800690e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 800690e:	b480      	push	{r7}
 8006910:	b083      	sub	sp, #12
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
 8006916:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	781a      	ldrb	r2, [r3, #0]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	785a      	ldrb	r2, [r3, #1]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	789a      	ldrb	r2, [r3, #2]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	78da      	ldrb	r2, [r3, #3]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	3304      	adds	r3, #4
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	b29a      	uxth	r2, r3
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	3305      	adds	r3, #5
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	b29b      	uxth	r3, r3
 8006948:	021b      	lsls	r3, r3, #8
 800694a:	b29b      	uxth	r3, r3
 800694c:	4313      	orrs	r3, r2
 800694e:	b29a      	uxth	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	799a      	ldrb	r2, [r3, #6]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	719a      	strb	r2, [r3, #6]
}
 800695c:	bf00      	nop
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8006968:	b480      	push	{r7}
 800696a:	b087      	sub	sp, #28
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	4613      	mov	r3, r2
 8006974:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	3301      	adds	r3, #1
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	2b03      	cmp	r3, #3
 800697e:	d120      	bne.n	80069c2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	1e9a      	subs	r2, r3, #2
 8006986:	88fb      	ldrh	r3, [r7, #6]
 8006988:	4293      	cmp	r3, r2
 800698a:	bf28      	it	cs
 800698c:	4613      	movcs	r3, r2
 800698e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	3302      	adds	r3, #2
 8006994:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006996:	2300      	movs	r3, #0
 8006998:	82fb      	strh	r3, [r7, #22]
 800699a:	e00b      	b.n	80069b4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800699c:	8afb      	ldrh	r3, [r7, #22]
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	4413      	add	r3, r2
 80069a2:	781a      	ldrb	r2, [r3, #0]
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	701a      	strb	r2, [r3, #0]
      pdest++;
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	3301      	adds	r3, #1
 80069ac:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80069ae:	8afb      	ldrh	r3, [r7, #22]
 80069b0:	3302      	adds	r3, #2
 80069b2:	82fb      	strh	r3, [r7, #22]
 80069b4:	8afa      	ldrh	r2, [r7, #22]
 80069b6:	8abb      	ldrh	r3, [r7, #20]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d3ef      	bcc.n	800699c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	2200      	movs	r2, #0
 80069c0:	701a      	strb	r2, [r3, #0]
  }
}
 80069c2:	bf00      	nop
 80069c4:	371c      	adds	r7, #28
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr

080069ce <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b085      	sub	sp, #20
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
 80069d6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	881a      	ldrh	r2, [r3, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	4413      	add	r3, r2
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4413      	add	r3, r2
 80069f4:	60fb      	str	r3, [r7, #12]

  return(pnext);
 80069f6:	68fb      	ldr	r3, [r7, #12]
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3714      	adds	r7, #20
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b086      	sub	sp, #24
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	4613      	mov	r3, r2
 8006a10:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006a12:	2301      	movs	r3, #1
 8006a14:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	789b      	ldrb	r3, [r3, #2]
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d002      	beq.n	8006a24 <USBH_CtlReq+0x20>
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d00f      	beq.n	8006a42 <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8006a22:	e034      	b.n	8006a8e <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	88fa      	ldrh	r2, [r7, #6]
 8006a2e:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2201      	movs	r2, #1
 8006a34:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2202      	movs	r2, #2
 8006a3a:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	75fb      	strb	r3, [r7, #23]
    break;
 8006a40:	e025      	b.n	8006a8e <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f000 f828 	bl	8006a98 <USBH_HandleControl>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8006a4c:	7dfb      	ldrb	r3, [r7, #23]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d108      	bne.n	8006a64 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2201      	movs	r2, #1
 8006a56:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	75fb      	strb	r3, [r7, #23]
    break;
 8006a62:	e013      	b.n	8006a8c <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8006a64:	7dfb      	ldrb	r3, [r7, #23]
 8006a66:	2b03      	cmp	r3, #3
 8006a68:	d108      	bne.n	8006a7c <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2200      	movs	r2, #0
 8006a74:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8006a76:	2303      	movs	r3, #3
 8006a78:	75fb      	strb	r3, [r7, #23]
    break;
 8006a7a:	e007      	b.n	8006a8c <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8006a7c:	7dfb      	ldrb	r3, [r7, #23]
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d104      	bne.n	8006a8c <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2201      	movs	r2, #1
 8006a86:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8006a88:	2302      	movs	r3, #2
 8006a8a:	75fb      	strb	r3, [r7, #23]
    break;
 8006a8c:	bf00      	nop
  }
  return status;
 8006a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3718      	adds	r7, #24
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b086      	sub	sp, #24
 8006a9c:	af02      	add	r7, sp, #8
 8006a9e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	7e1b      	ldrb	r3, [r3, #24]
 8006aac:	3b01      	subs	r3, #1
 8006aae:	2b0a      	cmp	r3, #10
 8006ab0:	f200 814c 	bhi.w	8006d4c <USBH_HandleControl+0x2b4>
 8006ab4:	a201      	add	r2, pc, #4	; (adr r2, 8006abc <USBH_HandleControl+0x24>)
 8006ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aba:	bf00      	nop
 8006abc:	08006ae9 	.word	0x08006ae9
 8006ac0:	08006b03 	.word	0x08006b03
 8006ac4:	08006b6d 	.word	0x08006b6d
 8006ac8:	08006b93 	.word	0x08006b93
 8006acc:	08006bcb 	.word	0x08006bcb
 8006ad0:	08006bf7 	.word	0x08006bf7
 8006ad4:	08006c49 	.word	0x08006c49
 8006ad8:	08006c6b 	.word	0x08006c6b
 8006adc:	08006ca7 	.word	0x08006ca7
 8006ae0:	08006ccf 	.word	0x08006ccf
 8006ae4:	08006d0d 	.word	0x08006d0d
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f103 0110 	add.w	r1, r3, #16
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	795b      	ldrb	r3, [r3, #5]
 8006af2:	461a      	mov	r2, r3
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 f939 	bl	8006d6c <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2202      	movs	r2, #2
 8006afe:	761a      	strb	r2, [r3, #24]
    break;
 8006b00:	e12f      	b.n	8006d62 <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	795b      	ldrb	r3, [r3, #5]
 8006b06:	4619      	mov	r1, r3
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f001 fa11 	bl	8007f30 <USBH_LL_GetURBState>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8006b12:	7bbb      	ldrb	r3, [r7, #14]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d11e      	bne.n	8006b56 <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	7c1b      	ldrb	r3, [r3, #16]
 8006b1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006b20:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	8adb      	ldrh	r3, [r3, #22]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00a      	beq.n	8006b40 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8006b2a:	7b7b      	ldrb	r3, [r7, #13]
 8006b2c:	2b80      	cmp	r3, #128	; 0x80
 8006b2e:	d103      	bne.n	8006b38 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2203      	movs	r2, #3
 8006b34:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006b36:	e10b      	b.n	8006d50 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2205      	movs	r2, #5
 8006b3c:	761a      	strb	r2, [r3, #24]
    break;
 8006b3e:	e107      	b.n	8006d50 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8006b40:	7b7b      	ldrb	r3, [r7, #13]
 8006b42:	2b80      	cmp	r3, #128	; 0x80
 8006b44:	d103      	bne.n	8006b4e <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2209      	movs	r2, #9
 8006b4a:	761a      	strb	r2, [r3, #24]
    break;
 8006b4c:	e100      	b.n	8006d50 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2207      	movs	r2, #7
 8006b52:	761a      	strb	r2, [r3, #24]
    break;
 8006b54:	e0fc      	b.n	8006d50 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006b56:	7bbb      	ldrb	r3, [r7, #14]
 8006b58:	2b04      	cmp	r3, #4
 8006b5a:	d003      	beq.n	8006b64 <USBH_HandleControl+0xcc>
 8006b5c:	7bbb      	ldrb	r3, [r7, #14]
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	f040 80f6 	bne.w	8006d50 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	220b      	movs	r2, #11
 8006b68:	761a      	strb	r2, [r3, #24]
    break;
 8006b6a:	e0f1      	b.n	8006d50 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006b72:	b29a      	uxth	r2, r3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6899      	ldr	r1, [r3, #8]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	899a      	ldrh	r2, [r3, #12]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	791b      	ldrb	r3, [r3, #4]
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 f930 	bl	8006dea <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2204      	movs	r2, #4
 8006b8e:	761a      	strb	r2, [r3, #24]
    break;
 8006b90:	e0e7      	b.n	8006d62 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	791b      	ldrb	r3, [r3, #4]
 8006b96:	4619      	mov	r1, r3
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f001 f9c9 	bl	8007f30 <USBH_LL_GetURBState>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8006ba2:	7bbb      	ldrb	r3, [r7, #14]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d102      	bne.n	8006bae <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2209      	movs	r2, #9
 8006bac:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8006bae:	7bbb      	ldrb	r3, [r7, #14]
 8006bb0:	2b05      	cmp	r3, #5
 8006bb2:	d102      	bne.n	8006bba <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006bb8:	e0cc      	b.n	8006d54 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8006bba:	7bbb      	ldrb	r3, [r7, #14]
 8006bbc:	2b04      	cmp	r3, #4
 8006bbe:	f040 80c9 	bne.w	8006d54 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	220b      	movs	r2, #11
 8006bc6:	761a      	strb	r2, [r3, #24]
    break;
 8006bc8:	e0c4      	b.n	8006d54 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6899      	ldr	r1, [r3, #8]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	899a      	ldrh	r2, [r3, #12]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	7958      	ldrb	r0, [r3, #5]
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	9300      	str	r3, [sp, #0]
 8006bda:	4603      	mov	r3, r0
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 f8df 	bl	8006da0 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006be8:	b29a      	uxth	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2206      	movs	r2, #6
 8006bf2:	761a      	strb	r2, [r3, #24]
    break;
 8006bf4:	e0b5      	b.n	8006d62 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	795b      	ldrb	r3, [r3, #5]
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f001 f997 	bl	8007f30 <USBH_LL_GetURBState>
 8006c02:	4603      	mov	r3, r0
 8006c04:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8006c06:	7bbb      	ldrb	r3, [r7, #14]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d103      	bne.n	8006c14 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2207      	movs	r2, #7
 8006c10:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006c12:	e0a1      	b.n	8006d58 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8006c14:	7bbb      	ldrb	r3, [r7, #14]
 8006c16:	2b05      	cmp	r3, #5
 8006c18:	d105      	bne.n	8006c26 <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	220c      	movs	r2, #12
 8006c1e:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8006c20:	2303      	movs	r3, #3
 8006c22:	73fb      	strb	r3, [r7, #15]
    break;
 8006c24:	e098      	b.n	8006d58 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8006c26:	7bbb      	ldrb	r3, [r7, #14]
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d103      	bne.n	8006c34 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2205      	movs	r2, #5
 8006c30:	761a      	strb	r2, [r3, #24]
    break;
 8006c32:	e091      	b.n	8006d58 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8006c34:	7bbb      	ldrb	r3, [r7, #14]
 8006c36:	2b04      	cmp	r3, #4
 8006c38:	f040 808e 	bne.w	8006d58 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	220b      	movs	r2, #11
 8006c40:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8006c42:	2302      	movs	r3, #2
 8006c44:	73fb      	strb	r3, [r7, #15]
    break;
 8006c46:	e087      	b.n	8006d58 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	791b      	ldrb	r3, [r3, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	2100      	movs	r1, #0
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 f8ca 	bl	8006dea <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2208      	movs	r2, #8
 8006c66:	761a      	strb	r2, [r3, #24]

    break;
 8006c68:	e07b      	b.n	8006d62 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	791b      	ldrb	r3, [r3, #4]
 8006c6e:	4619      	mov	r1, r3
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f001 f95d 	bl	8007f30 <USBH_LL_GetURBState>
 8006c76:	4603      	mov	r3, r0
 8006c78:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8006c7a:	7bbb      	ldrb	r3, [r7, #14]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d105      	bne.n	8006c8c <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	220d      	movs	r2, #13
 8006c84:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8006c86:	2300      	movs	r3, #0
 8006c88:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006c8a:	e067      	b.n	8006d5c <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8006c8c:	7bbb      	ldrb	r3, [r7, #14]
 8006c8e:	2b04      	cmp	r3, #4
 8006c90:	d103      	bne.n	8006c9a <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	220b      	movs	r2, #11
 8006c96:	761a      	strb	r2, [r3, #24]
    break;
 8006c98:	e060      	b.n	8006d5c <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8006c9a:	7bbb      	ldrb	r3, [r7, #14]
 8006c9c:	2b05      	cmp	r3, #5
 8006c9e:	d15d      	bne.n	8006d5c <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	73fb      	strb	r3, [r7, #15]
    break;
 8006ca4:	e05a      	b.n	8006d5c <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	795a      	ldrb	r2, [r3, #5]
 8006caa:	2301      	movs	r3, #1
 8006cac:	9300      	str	r3, [sp, #0]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	2100      	movs	r1, #0
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 f873 	bl	8006da0 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	220a      	movs	r2, #10
 8006cca:	761a      	strb	r2, [r3, #24]
    break;
 8006ccc:	e049      	b.n	8006d62 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	795b      	ldrb	r3, [r3, #5]
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f001 f92b 	bl	8007f30 <USBH_LL_GetURBState>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8006cde:	7bbb      	ldrb	r3, [r7, #14]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d105      	bne.n	8006cf0 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	220d      	movs	r2, #13
 8006cec:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8006cee:	e037      	b.n	8006d60 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8006cf0:	7bbb      	ldrb	r3, [r7, #14]
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	d103      	bne.n	8006cfe <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2209      	movs	r2, #9
 8006cfa:	761a      	strb	r2, [r3, #24]
    break;
 8006cfc:	e030      	b.n	8006d60 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8006cfe:	7bbb      	ldrb	r3, [r7, #14]
 8006d00:	2b04      	cmp	r3, #4
 8006d02:	d12d      	bne.n	8006d60 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	220b      	movs	r2, #11
 8006d08:	761a      	strb	r2, [r3, #24]
    break;
 8006d0a:	e029      	b.n	8006d60 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	7e5b      	ldrb	r3, [r3, #25]
 8006d10:	3301      	adds	r3, #1
 8006d12:	b2da      	uxtb	r2, r3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	765a      	strb	r2, [r3, #25]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	7e5b      	ldrb	r3, [r3, #25]
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d809      	bhi.n	8006d34 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f001 f818 	bl	8007d56 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8006d32:	e016      	b.n	8006d62 <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006d3a:	2106      	movs	r1, #6
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8006d46:	2302      	movs	r3, #2
 8006d48:	73fb      	strb	r3, [r7, #15]
    break;
 8006d4a:	e00a      	b.n	8006d62 <USBH_HandleControl+0x2ca>

  default:
    break;
 8006d4c:	bf00      	nop
 8006d4e:	e008      	b.n	8006d62 <USBH_HandleControl+0x2ca>
    break;
 8006d50:	bf00      	nop
 8006d52:	e006      	b.n	8006d62 <USBH_HandleControl+0x2ca>
    break;
 8006d54:	bf00      	nop
 8006d56:	e004      	b.n	8006d62 <USBH_HandleControl+0x2ca>
    break;
 8006d58:	bf00      	nop
 8006d5a:	e002      	b.n	8006d62 <USBH_HandleControl+0x2ca>
    break;
 8006d5c:	bf00      	nop
 8006d5e:	e000      	b.n	8006d62 <USBH_HandleControl+0x2ca>
    break;
 8006d60:	bf00      	nop
  }
  return status;
 8006d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b088      	sub	sp, #32
 8006d70:	af04      	add	r7, sp, #16
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	4613      	mov	r3, r2
 8006d78:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006d7a:	79f9      	ldrb	r1, [r7, #7]
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	9303      	str	r3, [sp, #12]
 8006d80:	2308      	movs	r3, #8
 8006d82:	9302      	str	r3, [sp, #8]
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	9301      	str	r3, [sp, #4]
 8006d88:	2300      	movs	r3, #0
 8006d8a:	9300      	str	r3, [sp, #0]
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	2200      	movs	r2, #0
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f001 f89c 	bl	8007ece <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3710      	adds	r7, #16
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b088      	sub	sp, #32
 8006da4:	af04      	add	r7, sp, #16
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	4611      	mov	r1, r2
 8006dac:	461a      	mov	r2, r3
 8006dae:	460b      	mov	r3, r1
 8006db0:	80fb      	strh	r3, [r7, #6]
 8006db2:	4613      	mov	r3, r2
 8006db4:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d001      	beq.n	8006dc4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006dc4:	7979      	ldrb	r1, [r7, #5]
 8006dc6:	7e3b      	ldrb	r3, [r7, #24]
 8006dc8:	9303      	str	r3, [sp, #12]
 8006dca:	88fb      	ldrh	r3, [r7, #6]
 8006dcc:	9302      	str	r3, [sp, #8]
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	9301      	str	r3, [sp, #4]
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	9300      	str	r3, [sp, #0]
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	2200      	movs	r2, #0
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	f001 f877 	bl	8007ece <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b088      	sub	sp, #32
 8006dee:	af04      	add	r7, sp, #16
 8006df0:	60f8      	str	r0, [r7, #12]
 8006df2:	60b9      	str	r1, [r7, #8]
 8006df4:	4611      	mov	r1, r2
 8006df6:	461a      	mov	r2, r3
 8006df8:	460b      	mov	r3, r1
 8006dfa:	80fb      	strh	r3, [r7, #6]
 8006dfc:	4613      	mov	r3, r2
 8006dfe:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006e00:	7979      	ldrb	r1, [r7, #5]
 8006e02:	2300      	movs	r3, #0
 8006e04:	9303      	str	r3, [sp, #12]
 8006e06:	88fb      	ldrh	r3, [r7, #6]
 8006e08:	9302      	str	r3, [sp, #8]
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	9301      	str	r3, [sp, #4]
 8006e0e:	2301      	movs	r3, #1
 8006e10:	9300      	str	r3, [sp, #0]
 8006e12:	2300      	movs	r3, #0
 8006e14:	2201      	movs	r2, #1
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f001 f859 	bl	8007ece <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006e1c:	2300      	movs	r3, #0

}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b088      	sub	sp, #32
 8006e2a:	af04      	add	r7, sp, #16
 8006e2c:	60f8      	str	r0, [r7, #12]
 8006e2e:	60b9      	str	r1, [r7, #8]
 8006e30:	4611      	mov	r1, r2
 8006e32:	461a      	mov	r2, r3
 8006e34:	460b      	mov	r3, r1
 8006e36:	80fb      	strh	r3, [r7, #6]
 8006e38:	4613      	mov	r3, r2
 8006e3a:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d001      	beq.n	8006e4a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8006e46:	2300      	movs	r3, #0
 8006e48:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006e4a:	7979      	ldrb	r1, [r7, #5]
 8006e4c:	7e3b      	ldrb	r3, [r7, #24]
 8006e4e:	9303      	str	r3, [sp, #12]
 8006e50:	88fb      	ldrh	r3, [r7, #6]
 8006e52:	9302      	str	r3, [sp, #8]
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	9301      	str	r3, [sp, #4]
 8006e58:	2301      	movs	r3, #1
 8006e5a:	9300      	str	r3, [sp, #0]
 8006e5c:	2302      	movs	r3, #2
 8006e5e:	2200      	movs	r2, #0
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f001 f834 	bl	8007ece <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b088      	sub	sp, #32
 8006e74:	af04      	add	r7, sp, #16
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	4611      	mov	r1, r2
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	460b      	mov	r3, r1
 8006e80:	80fb      	strh	r3, [r7, #6]
 8006e82:	4613      	mov	r3, r2
 8006e84:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006e86:	7979      	ldrb	r1, [r7, #5]
 8006e88:	2300      	movs	r3, #0
 8006e8a:	9303      	str	r3, [sp, #12]
 8006e8c:	88fb      	ldrh	r3, [r7, #6]
 8006e8e:	9302      	str	r3, [sp, #8]
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	9301      	str	r3, [sp, #4]
 8006e94:	2301      	movs	r3, #1
 8006e96:	9300      	str	r3, [sp, #0]
 8006e98:	2302      	movs	r3, #2
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f001 f816 	bl	8007ece <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3710      	adds	r7, #16
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b086      	sub	sp, #24
 8006eb0:	af04      	add	r7, sp, #16
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	4608      	mov	r0, r1
 8006eb6:	4611      	mov	r1, r2
 8006eb8:	461a      	mov	r2, r3
 8006eba:	4603      	mov	r3, r0
 8006ebc:	70fb      	strb	r3, [r7, #3]
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	70bb      	strb	r3, [r7, #2]
 8006ec2:	4613      	mov	r3, r2
 8006ec4:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8006ec6:	7878      	ldrb	r0, [r7, #1]
 8006ec8:	78ba      	ldrb	r2, [r7, #2]
 8006eca:	78f9      	ldrb	r1, [r7, #3]
 8006ecc:	8b3b      	ldrh	r3, [r7, #24]
 8006ece:	9302      	str	r3, [sp, #8]
 8006ed0:	7d3b      	ldrb	r3, [r7, #20]
 8006ed2:	9301      	str	r3, [sp, #4]
 8006ed4:	7c3b      	ldrb	r3, [r7, #16]
 8006ed6:	9300      	str	r3, [sp, #0]
 8006ed8:	4603      	mov	r3, r0
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 ffa9 	bl	8007e32 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8006ee0:	2300      	movs	r3, #0

}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3708      	adds	r7, #8
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}

08006eea <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b082      	sub	sp, #8
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8006ef6:	78fb      	ldrb	r3, [r7, #3]
 8006ef8:	4619      	mov	r1, r3
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 ffc8 	bl	8007e90 <USBH_LL_ClosePipe>

  return USBH_OK;
 8006f00:	2300      	movs	r3, #0

}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3708      	adds	r7, #8
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b084      	sub	sp, #16
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
 8006f12:	460b      	mov	r3, r1
 8006f14:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 f831 	bl	8006f7e <USBH_GetFreePipe>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006f20:	89fb      	ldrh	r3, [r7, #14]
 8006f22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d007      	beq.n	8006f3a <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8006f2a:	78fb      	ldrb	r3, [r7, #3]
 8006f2c:	89fa      	ldrh	r2, [r7, #14]
 8006f2e:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	32e0      	adds	r2, #224	; 0xe0
 8006f36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8006f3a:	89fb      	ldrh	r3, [r7, #14]
 8006f3c:	b2db      	uxtb	r3, r3
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006f46:	b480      	push	{r7}
 8006f48:	b083      	sub	sp, #12
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
 8006f4e:	460b      	mov	r3, r1
 8006f50:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8006f52:	78fb      	ldrb	r3, [r7, #3]
 8006f54:	2b0a      	cmp	r3, #10
 8006f56:	d80b      	bhi.n	8006f70 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8006f58:	78fa      	ldrb	r2, [r7, #3]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	32e0      	adds	r2, #224	; 0xe0
 8006f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f62:	78fa      	ldrb	r2, [r7, #3]
 8006f64:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	32e0      	adds	r2, #224	; 0xe0
 8006f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	370c      	adds	r7, #12
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr

08006f7e <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8006f7e:	b480      	push	{r7}
 8006f80:	b085      	sub	sp, #20
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006f86:	2300      	movs	r3, #0
 8006f88:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	73fb      	strb	r3, [r7, #15]
 8006f8e:	e00e      	b.n	8006fae <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006f90:	7bfa      	ldrb	r2, [r7, #15]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	32e0      	adds	r2, #224	; 0xe0
 8006f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d102      	bne.n	8006fa8 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8006fa2:	7bfb      	ldrb	r3, [r7, #15]
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	e007      	b.n	8006fb8 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8006fa8:	7bfb      	ldrb	r3, [r7, #15]
 8006faa:	3301      	adds	r3, #1
 8006fac:	73fb      	strb	r3, [r7, #15]
 8006fae:	7bfb      	ldrb	r3, [r7, #15]
 8006fb0:	2b0a      	cmp	r3, #10
 8006fb2:	d9ed      	bls.n	8006f90 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8006fb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3714      	adds	r7, #20
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b09c      	sub	sp, #112	; 0x70
 8006fc8:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006fca:	f7f9 fa85 	bl	80004d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006fce:	f000 f923 	bl	8007218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006fd2:	f000 fa61 	bl	8007498 <MX_GPIO_Init>
  MX_I2C1_Init();
 8006fd6:	f000 f9a1 	bl	800731c <MX_I2C1_Init>
  MX_I2S3_Init();
 8006fda:	f000 f9cd 	bl	8007378 <MX_I2S3_Init>
  MX_SPI1_Init();
 8006fde:	f000 f9fb 	bl	80073d8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8006fe2:	f000 fd4d 	bl	8007a80 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8006fe6:	f000 fa2d 	bl	8007444 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int prev = 0;
 8006fea:	2300      	movs	r3, #0
 8006fec:	66fb      	str	r3, [r7, #108]	; 0x6c
  int prev2 =10;
 8006fee:	230a      	movs	r3, #10
 8006ff0:	66bb      	str	r3, [r7, #104]	; 0x68
  int cnt = 0;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	667b      	str	r3, [r7, #100]	; 0x64
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8006ff6:	f000 fd69 	bl	8007acc <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
	if (!HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4) && !HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_5)){
 8006ffa:	2110      	movs	r1, #16
 8006ffc:	4883      	ldr	r0, [pc, #524]	; (800720c <main+0x248>)
 8006ffe:	f7f9 fdab 	bl	8000b58 <HAL_GPIO_ReadPin>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d107      	bne.n	8007018 <main+0x54>
 8007008:	2120      	movs	r1, #32
 800700a:	4880      	ldr	r0, [pc, #512]	; (800720c <main+0x248>)
 800700c:	f7f9 fda4 	bl	8000b58 <HAL_GPIO_ReadPin>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	f000 80f6 	beq.w	8007204 <main+0x240>
		  continue;
	}
	else if (!HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4)){
 8007018:	2110      	movs	r1, #16
 800701a:	487c      	ldr	r0, [pc, #496]	; (800720c <main+0x248>)
 800701c:	f7f9 fd9c 	bl	8000b58 <HAL_GPIO_ReadPin>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d126      	bne.n	8007074 <main+0xb0>
    	if (prev == 0){
 8007026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007028:	2b00      	cmp	r3, #0
 800702a:	d102      	bne.n	8007032 <main+0x6e>
    		prev = 4;
 800702c:	2304      	movs	r3, #4
 800702e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007030:	e064      	b.n	80070fc <main+0x138>
//        	char out[100];
//        	sprintf(out, "In Pin4 Prev is %d\r\n", prev);
//        	HAL_UART_Transmit(&huart2, out, strlen(out), 1000);
    	}
    	else if (prev == 4){
 8007032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007034:	2b04      	cmp	r3, #4
 8007036:	d102      	bne.n	800703e <main+0x7a>
    		prev = 4;
 8007038:	2304      	movs	r3, #4
 800703a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800703c:	e05e      	b.n	80070fc <main+0x138>
    	}
    	else if (prev == 5){
 800703e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007040:	2b05      	cmp	r3, #5
 8007042:	d111      	bne.n	8007068 <main+0xa4>
    		prev = 45;
 8007044:	232d      	movs	r3, #45	; 0x2d
 8007046:	66fb      	str	r3, [r7, #108]	; 0x6c
			char out[100];
//			cnt ++;
			sprintf(out, "1");
 8007048:	463b      	mov	r3, r7
 800704a:	2231      	movs	r2, #49	; 0x31
 800704c:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, out, strlen(out), 1000);
 800704e:	463b      	mov	r3, r7
 8007050:	4618      	mov	r0, r3
 8007052:	f7f9 f8b9 	bl	80001c8 <strlen>
 8007056:	4603      	mov	r3, r0
 8007058:	b29a      	uxth	r2, r3
 800705a:	4639      	mov	r1, r7
 800705c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007060:	486b      	ldr	r0, [pc, #428]	; (8007210 <main+0x24c>)
 8007062:	f7fc fe3a 	bl	8003cda <HAL_UART_Transmit>
 8007066:	e049      	b.n	80070fc <main+0x138>
    	}
    	else if (prev == 54){
 8007068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800706a:	2b36      	cmp	r3, #54	; 0x36
 800706c:	d146      	bne.n	80070fc <main+0x138>
    		prev = 54;
 800706e:	2336      	movs	r3, #54	; 0x36
 8007070:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007072:	e043      	b.n	80070fc <main+0x138>
    	}
    }
	else if (!HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_5)){
 8007074:	2120      	movs	r1, #32
 8007076:	4865      	ldr	r0, [pc, #404]	; (800720c <main+0x248>)
 8007078:	f7f9 fd6e 	bl	8000b58 <HAL_GPIO_ReadPin>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d126      	bne.n	80070d0 <main+0x10c>
    	if (prev == 0){
 8007082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007084:	2b00      	cmp	r3, #0
 8007086:	d102      	bne.n	800708e <main+0xca>
    		prev = 5;
 8007088:	2305      	movs	r3, #5
 800708a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800708c:	e036      	b.n	80070fc <main+0x138>
//        	char out[100];
//        	sprintf(out, "In Pin5 Prev is %d\r\n", prev);
//        	HAL_UART_Transmit(&huart2, out, strlen(out), 1000);
    	}
    	else if (prev == 5){
 800708e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007090:	2b05      	cmp	r3, #5
 8007092:	d102      	bne.n	800709a <main+0xd6>
    		prev = 5;
 8007094:	2305      	movs	r3, #5
 8007096:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007098:	e030      	b.n	80070fc <main+0x138>
    	}
    	else if (prev == 4){
 800709a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800709c:	2b04      	cmp	r3, #4
 800709e:	d111      	bne.n	80070c4 <main+0x100>
    		prev = 45;
 80070a0:	232d      	movs	r3, #45	; 0x2d
 80070a2:	66fb      	str	r3, [r7, #108]	; 0x6c
        	char out[100];
//        	cnt--;
        	sprintf(out, "0");
 80070a4:	463b      	mov	r3, r7
 80070a6:	2230      	movs	r2, #48	; 0x30
 80070a8:	801a      	strh	r2, [r3, #0]
        	HAL_UART_Transmit(&huart2, out, strlen(out), 1000);
 80070aa:	463b      	mov	r3, r7
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7f9 f88b 	bl	80001c8 <strlen>
 80070b2:	4603      	mov	r3, r0
 80070b4:	b29a      	uxth	r2, r3
 80070b6:	4639      	mov	r1, r7
 80070b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80070bc:	4854      	ldr	r0, [pc, #336]	; (8007210 <main+0x24c>)
 80070be:	f7fc fe0c 	bl	8003cda <HAL_UART_Transmit>
 80070c2:	e01b      	b.n	80070fc <main+0x138>
		}
    	else if (prev == 45){
 80070c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070c6:	2b2d      	cmp	r3, #45	; 0x2d
 80070c8:	d118      	bne.n	80070fc <main+0x138>
    		prev = 45;
 80070ca:	232d      	movs	r3, #45	; 0x2d
 80070cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070ce:	e015      	b.n	80070fc <main+0x138>
    	}
    }
	else if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4) && HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_5)){
 80070d0:	2110      	movs	r1, #16
 80070d2:	484e      	ldr	r0, [pc, #312]	; (800720c <main+0x248>)
 80070d4:	f7f9 fd40 	bl	8000b58 <HAL_GPIO_ReadPin>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00e      	beq.n	80070fc <main+0x138>
 80070de:	2120      	movs	r1, #32
 80070e0:	484a      	ldr	r0, [pc, #296]	; (800720c <main+0x248>)
 80070e2:	f7f9 fd39 	bl	8000b58 <HAL_GPIO_ReadPin>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d007      	beq.n	80070fc <main+0x138>
		if(prev == 45 || prev == 54)
 80070ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070ee:	2b2d      	cmp	r3, #45	; 0x2d
 80070f0:	d002      	beq.n	80070f8 <main+0x134>
 80070f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070f4:	2b36      	cmp	r3, #54	; 0x36
 80070f6:	d101      	bne.n	80070fc <main+0x138>
			prev = 0;
 80070f8:	2300      	movs	r3, #0
 80070fa:	66fb      	str	r3, [r7, #108]	; 0x6c
	}


	if (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) && !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)){
 80070fc:	2110      	movs	r1, #16
 80070fe:	4845      	ldr	r0, [pc, #276]	; (8007214 <main+0x250>)
 8007100:	f7f9 fd2a 	bl	8000b58 <HAL_GPIO_ReadPin>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d106      	bne.n	8007118 <main+0x154>
 800710a:	2120      	movs	r1, #32
 800710c:	4841      	ldr	r0, [pc, #260]	; (8007214 <main+0x250>)
 800710e:	f7f9 fd23 	bl	8000b58 <HAL_GPIO_ReadPin>
 8007112:	4603      	mov	r3, r0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d077      	beq.n	8007208 <main+0x244>
			  continue;
		}
		else if (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){
 8007118:	2110      	movs	r1, #16
 800711a:	483e      	ldr	r0, [pc, #248]	; (8007214 <main+0x250>)
 800711c:	f7f9 fd1c 	bl	8000b58 <HAL_GPIO_ReadPin>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d126      	bne.n	8007174 <main+0x1b0>
	    	if (prev2 == 10){
 8007126:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007128:	2b0a      	cmp	r3, #10
 800712a:	d102      	bne.n	8007132 <main+0x16e>
	    		prev2 = 14;
 800712c:	230e      	movs	r3, #14
 800712e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007130:	e064      	b.n	80071fc <main+0x238>
//	        	char out[100];
//	        	sprintf(out, "In Pin4 Prev2 is %d\r\n", prev2);
//	        	HAL_UART_Transmit(&huart2, out, strlen(out), 1000);
	    	}
	    	else if (prev2 == 14){
 8007132:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007134:	2b0e      	cmp	r3, #14
 8007136:	d102      	bne.n	800713e <main+0x17a>
	    		prev2 = 14;
 8007138:	230e      	movs	r3, #14
 800713a:	66bb      	str	r3, [r7, #104]	; 0x68
 800713c:	e05e      	b.n	80071fc <main+0x238>
	    	}
	    	else if (prev2 == 15){
 800713e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007140:	2b0f      	cmp	r3, #15
 8007142:	d111      	bne.n	8007168 <main+0x1a4>
	    		prev2 = 145;
 8007144:	2391      	movs	r3, #145	; 0x91
 8007146:	66bb      	str	r3, [r7, #104]	; 0x68
				char out[100];
//				cnt++;
				sprintf(out, "1");
 8007148:	463b      	mov	r3, r7
 800714a:	2231      	movs	r2, #49	; 0x31
 800714c:	801a      	strh	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, out, strlen(out), 1000);
 800714e:	463b      	mov	r3, r7
 8007150:	4618      	mov	r0, r3
 8007152:	f7f9 f839 	bl	80001c8 <strlen>
 8007156:	4603      	mov	r3, r0
 8007158:	b29a      	uxth	r2, r3
 800715a:	4639      	mov	r1, r7
 800715c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007160:	482b      	ldr	r0, [pc, #172]	; (8007210 <main+0x24c>)
 8007162:	f7fc fdba 	bl	8003cda <HAL_UART_Transmit>
 8007166:	e049      	b.n	80071fc <main+0x238>
	    	}
	    	else if (prev2 == 154){
 8007168:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800716a:	2b9a      	cmp	r3, #154	; 0x9a
 800716c:	d146      	bne.n	80071fc <main+0x238>
	    		prev2 = 154;
 800716e:	239a      	movs	r3, #154	; 0x9a
 8007170:	66bb      	str	r3, [r7, #104]	; 0x68
 8007172:	e043      	b.n	80071fc <main+0x238>
	    	}
	    }
		else if (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)){
 8007174:	2120      	movs	r1, #32
 8007176:	4827      	ldr	r0, [pc, #156]	; (8007214 <main+0x250>)
 8007178:	f7f9 fcee 	bl	8000b58 <HAL_GPIO_ReadPin>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d126      	bne.n	80071d0 <main+0x20c>
	    	if (prev2 == 10){
 8007182:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007184:	2b0a      	cmp	r3, #10
 8007186:	d102      	bne.n	800718e <main+0x1ca>
	    		prev2 = 15;
 8007188:	230f      	movs	r3, #15
 800718a:	66bb      	str	r3, [r7, #104]	; 0x68
 800718c:	e036      	b.n	80071fc <main+0x238>
//	        	char out[100];
//	        	sprintf(out, "In Pin5 Prev2 is %d\r\n", prev2);
//	        	HAL_UART_Transmit(&huart2, out, strlen(out), 1000);
	    	}
	    	else if (prev2 == 15){
 800718e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007190:	2b0f      	cmp	r3, #15
 8007192:	d102      	bne.n	800719a <main+0x1d6>
	    		prev2 = 15;
 8007194:	230f      	movs	r3, #15
 8007196:	66bb      	str	r3, [r7, #104]	; 0x68
 8007198:	e030      	b.n	80071fc <main+0x238>
	    	}
	    	else if (prev2 == 14){
 800719a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800719c:	2b0e      	cmp	r3, #14
 800719e:	d111      	bne.n	80071c4 <main+0x200>
	    		prev2 = 145;
 80071a0:	2391      	movs	r3, #145	; 0x91
 80071a2:	66bb      	str	r3, [r7, #104]	; 0x68
	        	char out[100];
//	        	cnt--;
	        	sprintf(out, "0");
 80071a4:	463b      	mov	r3, r7
 80071a6:	2230      	movs	r2, #48	; 0x30
 80071a8:	801a      	strh	r2, [r3, #0]
	        	HAL_UART_Transmit(&huart2, out, strlen(out), 1000);
 80071aa:	463b      	mov	r3, r7
 80071ac:	4618      	mov	r0, r3
 80071ae:	f7f9 f80b 	bl	80001c8 <strlen>
 80071b2:	4603      	mov	r3, r0
 80071b4:	b29a      	uxth	r2, r3
 80071b6:	4639      	mov	r1, r7
 80071b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80071bc:	4814      	ldr	r0, [pc, #80]	; (8007210 <main+0x24c>)
 80071be:	f7fc fd8c 	bl	8003cda <HAL_UART_Transmit>
 80071c2:	e01b      	b.n	80071fc <main+0x238>
			}
	    	else if (prev2 == 145){
 80071c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80071c6:	2b91      	cmp	r3, #145	; 0x91
 80071c8:	d118      	bne.n	80071fc <main+0x238>
	    		prev2 = 145;
 80071ca:	2391      	movs	r3, #145	; 0x91
 80071cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80071ce:	e015      	b.n	80071fc <main+0x238>
	    	}
	    }
		else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)){
 80071d0:	2110      	movs	r1, #16
 80071d2:	4810      	ldr	r0, [pc, #64]	; (8007214 <main+0x250>)
 80071d4:	f7f9 fcc0 	bl	8000b58 <HAL_GPIO_ReadPin>
 80071d8:	4603      	mov	r3, r0
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00e      	beq.n	80071fc <main+0x238>
 80071de:	2120      	movs	r1, #32
 80071e0:	480c      	ldr	r0, [pc, #48]	; (8007214 <main+0x250>)
 80071e2:	f7f9 fcb9 	bl	8000b58 <HAL_GPIO_ReadPin>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d007      	beq.n	80071fc <main+0x238>
			if(prev2 == 145 || prev2 == 154)
 80071ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80071ee:	2b91      	cmp	r3, #145	; 0x91
 80071f0:	d002      	beq.n	80071f8 <main+0x234>
 80071f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80071f4:	2b9a      	cmp	r3, #154	; 0x9a
 80071f6:	d101      	bne.n	80071fc <main+0x238>
				prev2 = 10;
 80071f8:	230a      	movs	r3, #10
 80071fa:	66bb      	str	r3, [r7, #104]	; 0x68
		}
    HAL_Delay(100);
 80071fc:	2064      	movs	r0, #100	; 0x64
 80071fe:	f7f9 f9dd 	bl	80005bc <HAL_Delay>
 8007202:	e6f8      	b.n	8006ff6 <main+0x32>
		  continue;
 8007204:	bf00      	nop
 8007206:	e6f6      	b.n	8006ff6 <main+0x32>
			  continue;
 8007208:	bf00      	nop
    MX_USB_HOST_Process();
 800720a:	e6f4      	b.n	8006ff6 <main+0x32>
 800720c:	40021000 	.word	0x40021000
 8007210:	20000170 	.word	0x20000170
 8007214:	40020400 	.word	0x40020400

08007218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b098      	sub	sp, #96	; 0x60
 800721c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800721e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007222:	2230      	movs	r2, #48	; 0x30
 8007224:	2100      	movs	r1, #0
 8007226:	4618      	mov	r0, r3
 8007228:	f000 ff96 	bl	8008158 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800722c:	f107 031c 	add.w	r3, r7, #28
 8007230:	2200      	movs	r2, #0
 8007232:	601a      	str	r2, [r3, #0]
 8007234:	605a      	str	r2, [r3, #4]
 8007236:	609a      	str	r2, [r3, #8]
 8007238:	60da      	str	r2, [r3, #12]
 800723a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800723c:	f107 030c 	add.w	r3, r7, #12
 8007240:	2200      	movs	r2, #0
 8007242:	601a      	str	r2, [r3, #0]
 8007244:	605a      	str	r2, [r3, #4]
 8007246:	609a      	str	r2, [r3, #8]
 8007248:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800724a:	2300      	movs	r3, #0
 800724c:	60bb      	str	r3, [r7, #8]
 800724e:	4b31      	ldr	r3, [pc, #196]	; (8007314 <SystemClock_Config+0xfc>)
 8007250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007252:	4a30      	ldr	r2, [pc, #192]	; (8007314 <SystemClock_Config+0xfc>)
 8007254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007258:	6413      	str	r3, [r2, #64]	; 0x40
 800725a:	4b2e      	ldr	r3, [pc, #184]	; (8007314 <SystemClock_Config+0xfc>)
 800725c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007262:	60bb      	str	r3, [r7, #8]
 8007264:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007266:	2300      	movs	r3, #0
 8007268:	607b      	str	r3, [r7, #4]
 800726a:	4b2b      	ldr	r3, [pc, #172]	; (8007318 <SystemClock_Config+0x100>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a2a      	ldr	r2, [pc, #168]	; (8007318 <SystemClock_Config+0x100>)
 8007270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007274:	6013      	str	r3, [r2, #0]
 8007276:	4b28      	ldr	r3, [pc, #160]	; (8007318 <SystemClock_Config+0x100>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800727e:	607b      	str	r3, [r7, #4]
 8007280:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007282:	2301      	movs	r3, #1
 8007284:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007286:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800728a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800728c:	2302      	movs	r3, #2
 800728e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007290:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007294:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8007296:	2308      	movs	r3, #8
 8007298:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800729a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800729e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80072a0:	2302      	movs	r3, #2
 80072a2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80072a4:	2307      	movs	r3, #7
 80072a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80072a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80072ac:	4618      	mov	r0, r3
 80072ae:	f7fb fec3 	bl	8003038 <HAL_RCC_OscConfig>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d001      	beq.n	80072bc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80072b8:	f000 f9f8 	bl	80076ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80072bc:	230f      	movs	r3, #15
 80072be:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80072c0:	2302      	movs	r3, #2
 80072c2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80072c4:	2300      	movs	r3, #0
 80072c6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80072c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80072cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80072ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80072d4:	f107 031c 	add.w	r3, r7, #28
 80072d8:	2105      	movs	r1, #5
 80072da:	4618      	mov	r0, r3
 80072dc:	f7fc f91c 	bl	8003518 <HAL_RCC_ClockConfig>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d001      	beq.n	80072ea <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80072e6:	f000 f9e1 	bl	80076ac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80072ea:	2301      	movs	r3, #1
 80072ec:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80072ee:	23c0      	movs	r3, #192	; 0xc0
 80072f0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80072f2:	2302      	movs	r3, #2
 80072f4:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80072f6:	f107 030c 	add.w	r3, r7, #12
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7fc fafe 	bl	80038fc <HAL_RCCEx_PeriphCLKConfig>
 8007300:	4603      	mov	r3, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d001      	beq.n	800730a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8007306:	f000 f9d1 	bl	80076ac <Error_Handler>
  }
}
 800730a:	bf00      	nop
 800730c:	3760      	adds	r7, #96	; 0x60
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	40023800 	.word	0x40023800
 8007318:	40007000 	.word	0x40007000

0800731c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007320:	4b12      	ldr	r3, [pc, #72]	; (800736c <MX_I2C1_Init+0x50>)
 8007322:	4a13      	ldr	r2, [pc, #76]	; (8007370 <MX_I2C1_Init+0x54>)
 8007324:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8007326:	4b11      	ldr	r3, [pc, #68]	; (800736c <MX_I2C1_Init+0x50>)
 8007328:	4a12      	ldr	r2, [pc, #72]	; (8007374 <MX_I2C1_Init+0x58>)
 800732a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800732c:	4b0f      	ldr	r3, [pc, #60]	; (800736c <MX_I2C1_Init+0x50>)
 800732e:	2200      	movs	r2, #0
 8007330:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007332:	4b0e      	ldr	r3, [pc, #56]	; (800736c <MX_I2C1_Init+0x50>)
 8007334:	2200      	movs	r2, #0
 8007336:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007338:	4b0c      	ldr	r3, [pc, #48]	; (800736c <MX_I2C1_Init+0x50>)
 800733a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800733e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007340:	4b0a      	ldr	r3, [pc, #40]	; (800736c <MX_I2C1_Init+0x50>)
 8007342:	2200      	movs	r2, #0
 8007344:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007346:	4b09      	ldr	r3, [pc, #36]	; (800736c <MX_I2C1_Init+0x50>)
 8007348:	2200      	movs	r2, #0
 800734a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800734c:	4b07      	ldr	r3, [pc, #28]	; (800736c <MX_I2C1_Init+0x50>)
 800734e:	2200      	movs	r2, #0
 8007350:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007352:	4b06      	ldr	r3, [pc, #24]	; (800736c <MX_I2C1_Init+0x50>)
 8007354:	2200      	movs	r2, #0
 8007356:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007358:	4804      	ldr	r0, [pc, #16]	; (800736c <MX_I2C1_Init+0x50>)
 800735a:	f7fb f895 	bl	8002488 <HAL_I2C_Init>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d001      	beq.n	8007368 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007364:	f000 f9a2 	bl	80076ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007368:	bf00      	nop
 800736a:	bd80      	pop	{r7, pc}
 800736c:	200000c4 	.word	0x200000c4
 8007370:	40005400 	.word	0x40005400
 8007374:	000186a0 	.word	0x000186a0

08007378 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800737c:	4b13      	ldr	r3, [pc, #76]	; (80073cc <MX_I2S3_Init+0x54>)
 800737e:	4a14      	ldr	r2, [pc, #80]	; (80073d0 <MX_I2S3_Init+0x58>)
 8007380:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8007382:	4b12      	ldr	r3, [pc, #72]	; (80073cc <MX_I2S3_Init+0x54>)
 8007384:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007388:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800738a:	4b10      	ldr	r3, [pc, #64]	; (80073cc <MX_I2S3_Init+0x54>)
 800738c:	2200      	movs	r2, #0
 800738e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8007390:	4b0e      	ldr	r3, [pc, #56]	; (80073cc <MX_I2S3_Init+0x54>)
 8007392:	2200      	movs	r2, #0
 8007394:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8007396:	4b0d      	ldr	r3, [pc, #52]	; (80073cc <MX_I2S3_Init+0x54>)
 8007398:	f44f 7200 	mov.w	r2, #512	; 0x200
 800739c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800739e:	4b0b      	ldr	r3, [pc, #44]	; (80073cc <MX_I2S3_Init+0x54>)
 80073a0:	4a0c      	ldr	r2, [pc, #48]	; (80073d4 <MX_I2S3_Init+0x5c>)
 80073a2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80073a4:	4b09      	ldr	r3, [pc, #36]	; (80073cc <MX_I2S3_Init+0x54>)
 80073a6:	2200      	movs	r2, #0
 80073a8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80073aa:	4b08      	ldr	r3, [pc, #32]	; (80073cc <MX_I2S3_Init+0x54>)
 80073ac:	2200      	movs	r2, #0
 80073ae:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80073b0:	4b06      	ldr	r3, [pc, #24]	; (80073cc <MX_I2S3_Init+0x54>)
 80073b2:	2200      	movs	r2, #0
 80073b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80073b6:	4805      	ldr	r0, [pc, #20]	; (80073cc <MX_I2S3_Init+0x54>)
 80073b8:	f7fb f99e 	bl	80026f8 <HAL_I2S_Init>
 80073bc:	4603      	mov	r3, r0
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d001      	beq.n	80073c6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80073c2:	f000 f973 	bl	80076ac <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80073c6:	bf00      	nop
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	200001b0 	.word	0x200001b0
 80073d0:	40003c00 	.word	0x40003c00
 80073d4:	00017700 	.word	0x00017700

080073d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80073dc:	4b17      	ldr	r3, [pc, #92]	; (800743c <MX_SPI1_Init+0x64>)
 80073de:	4a18      	ldr	r2, [pc, #96]	; (8007440 <MX_SPI1_Init+0x68>)
 80073e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80073e2:	4b16      	ldr	r3, [pc, #88]	; (800743c <MX_SPI1_Init+0x64>)
 80073e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80073e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80073ea:	4b14      	ldr	r3, [pc, #80]	; (800743c <MX_SPI1_Init+0x64>)
 80073ec:	2200      	movs	r2, #0
 80073ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80073f0:	4b12      	ldr	r3, [pc, #72]	; (800743c <MX_SPI1_Init+0x64>)
 80073f2:	2200      	movs	r2, #0
 80073f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80073f6:	4b11      	ldr	r3, [pc, #68]	; (800743c <MX_SPI1_Init+0x64>)
 80073f8:	2200      	movs	r2, #0
 80073fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80073fc:	4b0f      	ldr	r3, [pc, #60]	; (800743c <MX_SPI1_Init+0x64>)
 80073fe:	2200      	movs	r2, #0
 8007400:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8007402:	4b0e      	ldr	r3, [pc, #56]	; (800743c <MX_SPI1_Init+0x64>)
 8007404:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007408:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800740a:	4b0c      	ldr	r3, [pc, #48]	; (800743c <MX_SPI1_Init+0x64>)
 800740c:	2200      	movs	r2, #0
 800740e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007410:	4b0a      	ldr	r3, [pc, #40]	; (800743c <MX_SPI1_Init+0x64>)
 8007412:	2200      	movs	r2, #0
 8007414:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007416:	4b09      	ldr	r3, [pc, #36]	; (800743c <MX_SPI1_Init+0x64>)
 8007418:	2200      	movs	r2, #0
 800741a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800741c:	4b07      	ldr	r3, [pc, #28]	; (800743c <MX_SPI1_Init+0x64>)
 800741e:	2200      	movs	r2, #0
 8007420:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8007422:	4b06      	ldr	r3, [pc, #24]	; (800743c <MX_SPI1_Init+0x64>)
 8007424:	220a      	movs	r2, #10
 8007426:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007428:	4804      	ldr	r0, [pc, #16]	; (800743c <MX_SPI1_Init+0x64>)
 800742a:	f7fc fba5 	bl	8003b78 <HAL_SPI_Init>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d001      	beq.n	8007438 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8007434:	f000 f93a 	bl	80076ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8007438:	bf00      	nop
 800743a:	bd80      	pop	{r7, pc}
 800743c:	20000118 	.word	0x20000118
 8007440:	40013000 	.word	0x40013000

08007444 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007448:	4b11      	ldr	r3, [pc, #68]	; (8007490 <MX_USART2_UART_Init+0x4c>)
 800744a:	4a12      	ldr	r2, [pc, #72]	; (8007494 <MX_USART2_UART_Init+0x50>)
 800744c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800744e:	4b10      	ldr	r3, [pc, #64]	; (8007490 <MX_USART2_UART_Init+0x4c>)
 8007450:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007454:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007456:	4b0e      	ldr	r3, [pc, #56]	; (8007490 <MX_USART2_UART_Init+0x4c>)
 8007458:	2200      	movs	r2, #0
 800745a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800745c:	4b0c      	ldr	r3, [pc, #48]	; (8007490 <MX_USART2_UART_Init+0x4c>)
 800745e:	2200      	movs	r2, #0
 8007460:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007462:	4b0b      	ldr	r3, [pc, #44]	; (8007490 <MX_USART2_UART_Init+0x4c>)
 8007464:	2200      	movs	r2, #0
 8007466:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007468:	4b09      	ldr	r3, [pc, #36]	; (8007490 <MX_USART2_UART_Init+0x4c>)
 800746a:	220c      	movs	r2, #12
 800746c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800746e:	4b08      	ldr	r3, [pc, #32]	; (8007490 <MX_USART2_UART_Init+0x4c>)
 8007470:	2200      	movs	r2, #0
 8007472:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007474:	4b06      	ldr	r3, [pc, #24]	; (8007490 <MX_USART2_UART_Init+0x4c>)
 8007476:	2200      	movs	r2, #0
 8007478:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800747a:	4805      	ldr	r0, [pc, #20]	; (8007490 <MX_USART2_UART_Init+0x4c>)
 800747c:	f7fc fbe0 	bl	8003c40 <HAL_UART_Init>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	d001      	beq.n	800748a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8007486:	f000 f911 	bl	80076ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800748a:	bf00      	nop
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	20000170 	.word	0x20000170
 8007494:	40004400 	.word	0x40004400

08007498 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b08c      	sub	sp, #48	; 0x30
 800749c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800749e:	f107 031c 	add.w	r3, r7, #28
 80074a2:	2200      	movs	r2, #0
 80074a4:	601a      	str	r2, [r3, #0]
 80074a6:	605a      	str	r2, [r3, #4]
 80074a8:	609a      	str	r2, [r3, #8]
 80074aa:	60da      	str	r2, [r3, #12]
 80074ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80074ae:	2300      	movs	r3, #0
 80074b0:	61bb      	str	r3, [r7, #24]
 80074b2:	4b77      	ldr	r3, [pc, #476]	; (8007690 <MX_GPIO_Init+0x1f8>)
 80074b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b6:	4a76      	ldr	r2, [pc, #472]	; (8007690 <MX_GPIO_Init+0x1f8>)
 80074b8:	f043 0310 	orr.w	r3, r3, #16
 80074bc:	6313      	str	r3, [r2, #48]	; 0x30
 80074be:	4b74      	ldr	r3, [pc, #464]	; (8007690 <MX_GPIO_Init+0x1f8>)
 80074c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c2:	f003 0310 	and.w	r3, r3, #16
 80074c6:	61bb      	str	r3, [r7, #24]
 80074c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80074ca:	2300      	movs	r3, #0
 80074cc:	617b      	str	r3, [r7, #20]
 80074ce:	4b70      	ldr	r3, [pc, #448]	; (8007690 <MX_GPIO_Init+0x1f8>)
 80074d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d2:	4a6f      	ldr	r2, [pc, #444]	; (8007690 <MX_GPIO_Init+0x1f8>)
 80074d4:	f043 0304 	orr.w	r3, r3, #4
 80074d8:	6313      	str	r3, [r2, #48]	; 0x30
 80074da:	4b6d      	ldr	r3, [pc, #436]	; (8007690 <MX_GPIO_Init+0x1f8>)
 80074dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074de:	f003 0304 	and.w	r3, r3, #4
 80074e2:	617b      	str	r3, [r7, #20]
 80074e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80074e6:	2300      	movs	r3, #0
 80074e8:	613b      	str	r3, [r7, #16]
 80074ea:	4b69      	ldr	r3, [pc, #420]	; (8007690 <MX_GPIO_Init+0x1f8>)
 80074ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ee:	4a68      	ldr	r2, [pc, #416]	; (8007690 <MX_GPIO_Init+0x1f8>)
 80074f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074f4:	6313      	str	r3, [r2, #48]	; 0x30
 80074f6:	4b66      	ldr	r3, [pc, #408]	; (8007690 <MX_GPIO_Init+0x1f8>)
 80074f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074fe:	613b      	str	r3, [r7, #16]
 8007500:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007502:	2300      	movs	r3, #0
 8007504:	60fb      	str	r3, [r7, #12]
 8007506:	4b62      	ldr	r3, [pc, #392]	; (8007690 <MX_GPIO_Init+0x1f8>)
 8007508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750a:	4a61      	ldr	r2, [pc, #388]	; (8007690 <MX_GPIO_Init+0x1f8>)
 800750c:	f043 0301 	orr.w	r3, r3, #1
 8007510:	6313      	str	r3, [r2, #48]	; 0x30
 8007512:	4b5f      	ldr	r3, [pc, #380]	; (8007690 <MX_GPIO_Init+0x1f8>)
 8007514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007516:	f003 0301 	and.w	r3, r3, #1
 800751a:	60fb      	str	r3, [r7, #12]
 800751c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800751e:	2300      	movs	r3, #0
 8007520:	60bb      	str	r3, [r7, #8]
 8007522:	4b5b      	ldr	r3, [pc, #364]	; (8007690 <MX_GPIO_Init+0x1f8>)
 8007524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007526:	4a5a      	ldr	r2, [pc, #360]	; (8007690 <MX_GPIO_Init+0x1f8>)
 8007528:	f043 0302 	orr.w	r3, r3, #2
 800752c:	6313      	str	r3, [r2, #48]	; 0x30
 800752e:	4b58      	ldr	r3, [pc, #352]	; (8007690 <MX_GPIO_Init+0x1f8>)
 8007530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007532:	f003 0302 	and.w	r3, r3, #2
 8007536:	60bb      	str	r3, [r7, #8]
 8007538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800753a:	2300      	movs	r3, #0
 800753c:	607b      	str	r3, [r7, #4]
 800753e:	4b54      	ldr	r3, [pc, #336]	; (8007690 <MX_GPIO_Init+0x1f8>)
 8007540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007542:	4a53      	ldr	r2, [pc, #332]	; (8007690 <MX_GPIO_Init+0x1f8>)
 8007544:	f043 0308 	orr.w	r3, r3, #8
 8007548:	6313      	str	r3, [r2, #48]	; 0x30
 800754a:	4b51      	ldr	r3, [pc, #324]	; (8007690 <MX_GPIO_Init+0x1f8>)
 800754c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800754e:	f003 0308 	and.w	r3, r3, #8
 8007552:	607b      	str	r3, [r7, #4]
 8007554:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8007556:	2200      	movs	r2, #0
 8007558:	2108      	movs	r1, #8
 800755a:	484e      	ldr	r0, [pc, #312]	; (8007694 <MX_GPIO_Init+0x1fc>)
 800755c:	f7f9 fb14 	bl	8000b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8007560:	2201      	movs	r2, #1
 8007562:	2101      	movs	r1, #1
 8007564:	484c      	ldr	r0, [pc, #304]	; (8007698 <MX_GPIO_Init+0x200>)
 8007566:	f7f9 fb0f 	bl	8000b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800756a:	2200      	movs	r2, #0
 800756c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8007570:	484a      	ldr	r0, [pc, #296]	; (800769c <MX_GPIO_Init+0x204>)
 8007572:	f7f9 fb09 	bl	8000b88 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8007576:	2308      	movs	r3, #8
 8007578:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800757a:	2301      	movs	r3, #1
 800757c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800757e:	2300      	movs	r3, #0
 8007580:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007582:	2300      	movs	r3, #0
 8007584:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8007586:	f107 031c 	add.w	r3, r7, #28
 800758a:	4619      	mov	r1, r3
 800758c:	4841      	ldr	r0, [pc, #260]	; (8007694 <MX_GPIO_Init+0x1fc>)
 800758e:	f7f9 f949 	bl	8000824 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007592:	2330      	movs	r3, #48	; 0x30
 8007594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007596:	2300      	movs	r3, #0
 8007598:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800759a:	2300      	movs	r3, #0
 800759c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800759e:	f107 031c 	add.w	r3, r7, #28
 80075a2:	4619      	mov	r1, r3
 80075a4:	483b      	ldr	r0, [pc, #236]	; (8007694 <MX_GPIO_Init+0x1fc>)
 80075a6:	f7f9 f93d 	bl	8000824 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80075aa:	2301      	movs	r3, #1
 80075ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80075ae:	2301      	movs	r3, #1
 80075b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075b2:	2300      	movs	r3, #0
 80075b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075b6:	2300      	movs	r3, #0
 80075b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80075ba:	f107 031c 	add.w	r3, r7, #28
 80075be:	4619      	mov	r1, r3
 80075c0:	4835      	ldr	r0, [pc, #212]	; (8007698 <MX_GPIO_Init+0x200>)
 80075c2:	f7f9 f92f 	bl	8000824 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80075c6:	2308      	movs	r3, #8
 80075c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075ca:	2302      	movs	r3, #2
 80075cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075ce:	2300      	movs	r3, #0
 80075d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075d2:	2300      	movs	r3, #0
 80075d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80075d6:	2305      	movs	r3, #5
 80075d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80075da:	f107 031c 	add.w	r3, r7, #28
 80075de:	4619      	mov	r1, r3
 80075e0:	482d      	ldr	r0, [pc, #180]	; (8007698 <MX_GPIO_Init+0x200>)
 80075e2:	f7f9 f91f 	bl	8000824 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80075e6:	2301      	movs	r3, #1
 80075e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80075ea:	4b2d      	ldr	r3, [pc, #180]	; (80076a0 <MX_GPIO_Init+0x208>)
 80075ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075ee:	2300      	movs	r3, #0
 80075f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80075f2:	f107 031c 	add.w	r3, r7, #28
 80075f6:	4619      	mov	r1, r3
 80075f8:	482a      	ldr	r0, [pc, #168]	; (80076a4 <MX_GPIO_Init+0x20c>)
 80075fa:	f7f9 f913 	bl	8000824 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOT1_Pin PB4 PB5 */
  GPIO_InitStruct.Pin = BOOT1_Pin|GPIO_PIN_4|GPIO_PIN_5;
 80075fe:	2334      	movs	r3, #52	; 0x34
 8007600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007602:	2300      	movs	r3, #0
 8007604:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007606:	2300      	movs	r3, #0
 8007608:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800760a:	f107 031c 	add.w	r3, r7, #28
 800760e:	4619      	mov	r1, r3
 8007610:	4825      	ldr	r0, [pc, #148]	; (80076a8 <MX_GPIO_Init+0x210>)
 8007612:	f7f9 f907 	bl	8000824 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8007616:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800761a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800761c:	2302      	movs	r3, #2
 800761e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007620:	2300      	movs	r3, #0
 8007622:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007624:	2300      	movs	r3, #0
 8007626:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007628:	2305      	movs	r3, #5
 800762a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800762c:	f107 031c 	add.w	r3, r7, #28
 8007630:	4619      	mov	r1, r3
 8007632:	481d      	ldr	r0, [pc, #116]	; (80076a8 <MX_GPIO_Init+0x210>)
 8007634:	f7f9 f8f6 	bl	8000824 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8007638:	f24f 0310 	movw	r3, #61456	; 0xf010
 800763c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800763e:	2301      	movs	r3, #1
 8007640:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007642:	2300      	movs	r3, #0
 8007644:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007646:	2300      	movs	r3, #0
 8007648:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800764a:	f107 031c 	add.w	r3, r7, #28
 800764e:	4619      	mov	r1, r3
 8007650:	4812      	ldr	r0, [pc, #72]	; (800769c <MX_GPIO_Init+0x204>)
 8007652:	f7f9 f8e7 	bl	8000824 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8007656:	2320      	movs	r3, #32
 8007658:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800765a:	2300      	movs	r3, #0
 800765c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800765e:	2300      	movs	r3, #0
 8007660:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8007662:	f107 031c 	add.w	r3, r7, #28
 8007666:	4619      	mov	r1, r3
 8007668:	480c      	ldr	r0, [pc, #48]	; (800769c <MX_GPIO_Init+0x204>)
 800766a:	f7f9 f8db 	bl	8000824 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800766e:	2302      	movs	r3, #2
 8007670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8007672:	4b0b      	ldr	r3, [pc, #44]	; (80076a0 <MX_GPIO_Init+0x208>)
 8007674:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007676:	2300      	movs	r3, #0
 8007678:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800767a:	f107 031c 	add.w	r3, r7, #28
 800767e:	4619      	mov	r1, r3
 8007680:	4804      	ldr	r0, [pc, #16]	; (8007694 <MX_GPIO_Init+0x1fc>)
 8007682:	f7f9 f8cf 	bl	8000824 <HAL_GPIO_Init>

}
 8007686:	bf00      	nop
 8007688:	3730      	adds	r7, #48	; 0x30
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	40023800 	.word	0x40023800
 8007694:	40021000 	.word	0x40021000
 8007698:	40020800 	.word	0x40020800
 800769c:	40020c00 	.word	0x40020c00
 80076a0:	10120000 	.word	0x10120000
 80076a4:	40020000 	.word	0x40020000
 80076a8:	40020400 	.word	0x40020400

080076ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80076ac:	b480      	push	{r7}
 80076ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80076b0:	bf00      	nop
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
	...

080076bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80076c2:	2300      	movs	r3, #0
 80076c4:	607b      	str	r3, [r7, #4]
 80076c6:	4b10      	ldr	r3, [pc, #64]	; (8007708 <HAL_MspInit+0x4c>)
 80076c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ca:	4a0f      	ldr	r2, [pc, #60]	; (8007708 <HAL_MspInit+0x4c>)
 80076cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80076d0:	6453      	str	r3, [r2, #68]	; 0x44
 80076d2:	4b0d      	ldr	r3, [pc, #52]	; (8007708 <HAL_MspInit+0x4c>)
 80076d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076da:	607b      	str	r3, [r7, #4]
 80076dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80076de:	2300      	movs	r3, #0
 80076e0:	603b      	str	r3, [r7, #0]
 80076e2:	4b09      	ldr	r3, [pc, #36]	; (8007708 <HAL_MspInit+0x4c>)
 80076e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e6:	4a08      	ldr	r2, [pc, #32]	; (8007708 <HAL_MspInit+0x4c>)
 80076e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076ec:	6413      	str	r3, [r2, #64]	; 0x40
 80076ee:	4b06      	ldr	r3, [pc, #24]	; (8007708 <HAL_MspInit+0x4c>)
 80076f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076f6:	603b      	str	r3, [r7, #0]
 80076f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80076fa:	bf00      	nop
 80076fc:	370c      	adds	r7, #12
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
 8007706:	bf00      	nop
 8007708:	40023800 	.word	0x40023800

0800770c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b08a      	sub	sp, #40	; 0x28
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007714:	f107 0314 	add.w	r3, r7, #20
 8007718:	2200      	movs	r2, #0
 800771a:	601a      	str	r2, [r3, #0]
 800771c:	605a      	str	r2, [r3, #4]
 800771e:	609a      	str	r2, [r3, #8]
 8007720:	60da      	str	r2, [r3, #12]
 8007722:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a19      	ldr	r2, [pc, #100]	; (8007790 <HAL_I2C_MspInit+0x84>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d12c      	bne.n	8007788 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800772e:	2300      	movs	r3, #0
 8007730:	613b      	str	r3, [r7, #16]
 8007732:	4b18      	ldr	r3, [pc, #96]	; (8007794 <HAL_I2C_MspInit+0x88>)
 8007734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007736:	4a17      	ldr	r2, [pc, #92]	; (8007794 <HAL_I2C_MspInit+0x88>)
 8007738:	f043 0302 	orr.w	r3, r3, #2
 800773c:	6313      	str	r3, [r2, #48]	; 0x30
 800773e:	4b15      	ldr	r3, [pc, #84]	; (8007794 <HAL_I2C_MspInit+0x88>)
 8007740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007742:	f003 0302 	and.w	r3, r3, #2
 8007746:	613b      	str	r3, [r7, #16]
 8007748:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800774a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800774e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007750:	2312      	movs	r3, #18
 8007752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007754:	2301      	movs	r3, #1
 8007756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007758:	2300      	movs	r3, #0
 800775a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800775c:	2304      	movs	r3, #4
 800775e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007760:	f107 0314 	add.w	r3, r7, #20
 8007764:	4619      	mov	r1, r3
 8007766:	480c      	ldr	r0, [pc, #48]	; (8007798 <HAL_I2C_MspInit+0x8c>)
 8007768:	f7f9 f85c 	bl	8000824 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800776c:	2300      	movs	r3, #0
 800776e:	60fb      	str	r3, [r7, #12]
 8007770:	4b08      	ldr	r3, [pc, #32]	; (8007794 <HAL_I2C_MspInit+0x88>)
 8007772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007774:	4a07      	ldr	r2, [pc, #28]	; (8007794 <HAL_I2C_MspInit+0x88>)
 8007776:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800777a:	6413      	str	r3, [r2, #64]	; 0x40
 800777c:	4b05      	ldr	r3, [pc, #20]	; (8007794 <HAL_I2C_MspInit+0x88>)
 800777e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007780:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007784:	60fb      	str	r3, [r7, #12]
 8007786:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007788:	bf00      	nop
 800778a:	3728      	adds	r7, #40	; 0x28
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	40005400 	.word	0x40005400
 8007794:	40023800 	.word	0x40023800
 8007798:	40020400 	.word	0x40020400

0800779c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b08a      	sub	sp, #40	; 0x28
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077a4:	f107 0314 	add.w	r3, r7, #20
 80077a8:	2200      	movs	r2, #0
 80077aa:	601a      	str	r2, [r3, #0]
 80077ac:	605a      	str	r2, [r3, #4]
 80077ae:	609a      	str	r2, [r3, #8]
 80077b0:	60da      	str	r2, [r3, #12]
 80077b2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a28      	ldr	r2, [pc, #160]	; (800785c <HAL_I2S_MspInit+0xc0>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d14a      	bne.n	8007854 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80077be:	2300      	movs	r3, #0
 80077c0:	613b      	str	r3, [r7, #16]
 80077c2:	4b27      	ldr	r3, [pc, #156]	; (8007860 <HAL_I2S_MspInit+0xc4>)
 80077c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c6:	4a26      	ldr	r2, [pc, #152]	; (8007860 <HAL_I2S_MspInit+0xc4>)
 80077c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077cc:	6413      	str	r3, [r2, #64]	; 0x40
 80077ce:	4b24      	ldr	r3, [pc, #144]	; (8007860 <HAL_I2S_MspInit+0xc4>)
 80077d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077d6:	613b      	str	r3, [r7, #16]
 80077d8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077da:	2300      	movs	r3, #0
 80077dc:	60fb      	str	r3, [r7, #12]
 80077de:	4b20      	ldr	r3, [pc, #128]	; (8007860 <HAL_I2S_MspInit+0xc4>)
 80077e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e2:	4a1f      	ldr	r2, [pc, #124]	; (8007860 <HAL_I2S_MspInit+0xc4>)
 80077e4:	f043 0301 	orr.w	r3, r3, #1
 80077e8:	6313      	str	r3, [r2, #48]	; 0x30
 80077ea:	4b1d      	ldr	r3, [pc, #116]	; (8007860 <HAL_I2S_MspInit+0xc4>)
 80077ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ee:	f003 0301 	and.w	r3, r3, #1
 80077f2:	60fb      	str	r3, [r7, #12]
 80077f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80077f6:	2300      	movs	r3, #0
 80077f8:	60bb      	str	r3, [r7, #8]
 80077fa:	4b19      	ldr	r3, [pc, #100]	; (8007860 <HAL_I2S_MspInit+0xc4>)
 80077fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077fe:	4a18      	ldr	r2, [pc, #96]	; (8007860 <HAL_I2S_MspInit+0xc4>)
 8007800:	f043 0304 	orr.w	r3, r3, #4
 8007804:	6313      	str	r3, [r2, #48]	; 0x30
 8007806:	4b16      	ldr	r3, [pc, #88]	; (8007860 <HAL_I2S_MspInit+0xc4>)
 8007808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780a:	f003 0304 	and.w	r3, r3, #4
 800780e:	60bb      	str	r3, [r7, #8]
 8007810:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8007812:	2310      	movs	r3, #16
 8007814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007816:	2302      	movs	r3, #2
 8007818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800781a:	2300      	movs	r3, #0
 800781c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800781e:	2300      	movs	r3, #0
 8007820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007822:	2306      	movs	r3, #6
 8007824:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8007826:	f107 0314 	add.w	r3, r7, #20
 800782a:	4619      	mov	r1, r3
 800782c:	480d      	ldr	r0, [pc, #52]	; (8007864 <HAL_I2S_MspInit+0xc8>)
 800782e:	f7f8 fff9 	bl	8000824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8007832:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8007836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007838:	2302      	movs	r3, #2
 800783a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800783c:	2300      	movs	r3, #0
 800783e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007840:	2300      	movs	r3, #0
 8007842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007844:	2306      	movs	r3, #6
 8007846:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007848:	f107 0314 	add.w	r3, r7, #20
 800784c:	4619      	mov	r1, r3
 800784e:	4806      	ldr	r0, [pc, #24]	; (8007868 <HAL_I2S_MspInit+0xcc>)
 8007850:	f7f8 ffe8 	bl	8000824 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8007854:	bf00      	nop
 8007856:	3728      	adds	r7, #40	; 0x28
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	40003c00 	.word	0x40003c00
 8007860:	40023800 	.word	0x40023800
 8007864:	40020000 	.word	0x40020000
 8007868:	40020800 	.word	0x40020800

0800786c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b08a      	sub	sp, #40	; 0x28
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007874:	f107 0314 	add.w	r3, r7, #20
 8007878:	2200      	movs	r2, #0
 800787a:	601a      	str	r2, [r3, #0]
 800787c:	605a      	str	r2, [r3, #4]
 800787e:	609a      	str	r2, [r3, #8]
 8007880:	60da      	str	r2, [r3, #12]
 8007882:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a19      	ldr	r2, [pc, #100]	; (80078f0 <HAL_SPI_MspInit+0x84>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d12b      	bne.n	80078e6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800788e:	2300      	movs	r3, #0
 8007890:	613b      	str	r3, [r7, #16]
 8007892:	4b18      	ldr	r3, [pc, #96]	; (80078f4 <HAL_SPI_MspInit+0x88>)
 8007894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007896:	4a17      	ldr	r2, [pc, #92]	; (80078f4 <HAL_SPI_MspInit+0x88>)
 8007898:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800789c:	6453      	str	r3, [r2, #68]	; 0x44
 800789e:	4b15      	ldr	r3, [pc, #84]	; (80078f4 <HAL_SPI_MspInit+0x88>)
 80078a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078a6:	613b      	str	r3, [r7, #16]
 80078a8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80078aa:	2300      	movs	r3, #0
 80078ac:	60fb      	str	r3, [r7, #12]
 80078ae:	4b11      	ldr	r3, [pc, #68]	; (80078f4 <HAL_SPI_MspInit+0x88>)
 80078b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b2:	4a10      	ldr	r2, [pc, #64]	; (80078f4 <HAL_SPI_MspInit+0x88>)
 80078b4:	f043 0301 	orr.w	r3, r3, #1
 80078b8:	6313      	str	r3, [r2, #48]	; 0x30
 80078ba:	4b0e      	ldr	r3, [pc, #56]	; (80078f4 <HAL_SPI_MspInit+0x88>)
 80078bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078be:	f003 0301 	and.w	r3, r3, #1
 80078c2:	60fb      	str	r3, [r7, #12]
 80078c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80078c6:	23e0      	movs	r3, #224	; 0xe0
 80078c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078ca:	2302      	movs	r3, #2
 80078cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078ce:	2300      	movs	r3, #0
 80078d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078d2:	2300      	movs	r3, #0
 80078d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80078d6:	2305      	movs	r3, #5
 80078d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078da:	f107 0314 	add.w	r3, r7, #20
 80078de:	4619      	mov	r1, r3
 80078e0:	4805      	ldr	r0, [pc, #20]	; (80078f8 <HAL_SPI_MspInit+0x8c>)
 80078e2:	f7f8 ff9f 	bl	8000824 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80078e6:	bf00      	nop
 80078e8:	3728      	adds	r7, #40	; 0x28
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	40013000 	.word	0x40013000
 80078f4:	40023800 	.word	0x40023800
 80078f8:	40020000 	.word	0x40020000

080078fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b08a      	sub	sp, #40	; 0x28
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007904:	f107 0314 	add.w	r3, r7, #20
 8007908:	2200      	movs	r2, #0
 800790a:	601a      	str	r2, [r3, #0]
 800790c:	605a      	str	r2, [r3, #4]
 800790e:	609a      	str	r2, [r3, #8]
 8007910:	60da      	str	r2, [r3, #12]
 8007912:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a19      	ldr	r2, [pc, #100]	; (8007980 <HAL_UART_MspInit+0x84>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d12b      	bne.n	8007976 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800791e:	2300      	movs	r3, #0
 8007920:	613b      	str	r3, [r7, #16]
 8007922:	4b18      	ldr	r3, [pc, #96]	; (8007984 <HAL_UART_MspInit+0x88>)
 8007924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007926:	4a17      	ldr	r2, [pc, #92]	; (8007984 <HAL_UART_MspInit+0x88>)
 8007928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800792c:	6413      	str	r3, [r2, #64]	; 0x40
 800792e:	4b15      	ldr	r3, [pc, #84]	; (8007984 <HAL_UART_MspInit+0x88>)
 8007930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007936:	613b      	str	r3, [r7, #16]
 8007938:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800793a:	2300      	movs	r3, #0
 800793c:	60fb      	str	r3, [r7, #12]
 800793e:	4b11      	ldr	r3, [pc, #68]	; (8007984 <HAL_UART_MspInit+0x88>)
 8007940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007942:	4a10      	ldr	r2, [pc, #64]	; (8007984 <HAL_UART_MspInit+0x88>)
 8007944:	f043 0301 	orr.w	r3, r3, #1
 8007948:	6313      	str	r3, [r2, #48]	; 0x30
 800794a:	4b0e      	ldr	r3, [pc, #56]	; (8007984 <HAL_UART_MspInit+0x88>)
 800794c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800794e:	f003 0301 	and.w	r3, r3, #1
 8007952:	60fb      	str	r3, [r7, #12]
 8007954:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007956:	230c      	movs	r3, #12
 8007958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800795a:	2302      	movs	r3, #2
 800795c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800795e:	2301      	movs	r3, #1
 8007960:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007962:	2303      	movs	r3, #3
 8007964:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007966:	2307      	movs	r3, #7
 8007968:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800796a:	f107 0314 	add.w	r3, r7, #20
 800796e:	4619      	mov	r1, r3
 8007970:	4805      	ldr	r0, [pc, #20]	; (8007988 <HAL_UART_MspInit+0x8c>)
 8007972:	f7f8 ff57 	bl	8000824 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007976:	bf00      	nop
 8007978:	3728      	adds	r7, #40	; 0x28
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	40004400 	.word	0x40004400
 8007984:	40023800 	.word	0x40023800
 8007988:	40020000 	.word	0x40020000

0800798c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800798c:	b480      	push	{r7}
 800798e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007990:	bf00      	nop
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr

0800799a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800799a:	b480      	push	{r7}
 800799c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800799e:	e7fe      	b.n	800799e <HardFault_Handler+0x4>

080079a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80079a0:	b480      	push	{r7}
 80079a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80079a4:	e7fe      	b.n	80079a4 <MemManage_Handler+0x4>

080079a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80079a6:	b480      	push	{r7}
 80079a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80079aa:	e7fe      	b.n	80079aa <BusFault_Handler+0x4>

080079ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80079ac:	b480      	push	{r7}
 80079ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80079b0:	e7fe      	b.n	80079b0 <UsageFault_Handler+0x4>

080079b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80079b2:	b480      	push	{r7}
 80079b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80079b6:	bf00      	nop
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80079c0:	b480      	push	{r7}
 80079c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80079c4:	bf00      	nop
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr

080079ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80079ce:	b480      	push	{r7}
 80079d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80079d2:	bf00      	nop
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80079e0:	f7f8 fdcc 	bl	800057c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80079e4:	bf00      	nop
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80079ec:	4802      	ldr	r0, [pc, #8]	; (80079f8 <OTG_FS_IRQHandler+0x10>)
 80079ee:	f7f9 fb69 	bl	80010c4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80079f2:	bf00      	nop
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	200005c4 	.word	0x200005c4

080079fc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007a04:	4b11      	ldr	r3, [pc, #68]	; (8007a4c <_sbrk+0x50>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d102      	bne.n	8007a12 <_sbrk+0x16>
		heap_end = &end;
 8007a0c:	4b0f      	ldr	r3, [pc, #60]	; (8007a4c <_sbrk+0x50>)
 8007a0e:	4a10      	ldr	r2, [pc, #64]	; (8007a50 <_sbrk+0x54>)
 8007a10:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007a12:	4b0e      	ldr	r3, [pc, #56]	; (8007a4c <_sbrk+0x50>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007a18:	4b0c      	ldr	r3, [pc, #48]	; (8007a4c <_sbrk+0x50>)
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4413      	add	r3, r2
 8007a20:	466a      	mov	r2, sp
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d907      	bls.n	8007a36 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007a26:	f000 fb5d 	bl	80080e4 <__errno>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	230c      	movs	r3, #12
 8007a2e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007a30:	f04f 33ff 	mov.w	r3, #4294967295
 8007a34:	e006      	b.n	8007a44 <_sbrk+0x48>
	}

	heap_end += incr;
 8007a36:	4b05      	ldr	r3, [pc, #20]	; (8007a4c <_sbrk+0x50>)
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	4a03      	ldr	r2, [pc, #12]	; (8007a4c <_sbrk+0x50>)
 8007a40:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007a42:	68fb      	ldr	r3, [r7, #12]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	200000b0 	.word	0x200000b0
 8007a50:	20000890 	.word	0x20000890

08007a54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007a54:	b480      	push	{r7}
 8007a56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007a58:	4b08      	ldr	r3, [pc, #32]	; (8007a7c <SystemInit+0x28>)
 8007a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a5e:	4a07      	ldr	r2, [pc, #28]	; (8007a7c <SystemInit+0x28>)
 8007a60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007a68:	4b04      	ldr	r3, [pc, #16]	; (8007a7c <SystemInit+0x28>)
 8007a6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007a6e:	609a      	str	r2, [r3, #8]
#endif
}
 8007a70:	bf00      	nop
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop
 8007a7c:	e000ed00 	.word	0xe000ed00

08007a80 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007a84:	2201      	movs	r2, #1
 8007a86:	490e      	ldr	r1, [pc, #56]	; (8007ac0 <MX_USB_HOST_Init+0x40>)
 8007a88:	480e      	ldr	r0, [pc, #56]	; (8007ac4 <MX_USB_HOST_Init+0x44>)
 8007a8a:	f7fe f85d 	bl	8005b48 <USBH_Init>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d001      	beq.n	8007a98 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007a94:	f7ff fe0a 	bl	80076ac <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007a98:	490b      	ldr	r1, [pc, #44]	; (8007ac8 <MX_USB_HOST_Init+0x48>)
 8007a9a:	480a      	ldr	r0, [pc, #40]	; (8007ac4 <MX_USB_HOST_Init+0x44>)
 8007a9c:	f7fe f8c7 	bl	8005c2e <USBH_RegisterClass>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d001      	beq.n	8007aaa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007aa6:	f7ff fe01 	bl	80076ac <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007aaa:	4806      	ldr	r0, [pc, #24]	; (8007ac4 <MX_USB_HOST_Init+0x44>)
 8007aac:	f7fe f94c 	bl	8005d48 <USBH_Start>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d001      	beq.n	8007aba <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007ab6:	f7ff fdf9 	bl	80076ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007aba:	bf00      	nop
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	08007ae1 	.word	0x08007ae1
 8007ac4:	200001f8 	.word	0x200001f8
 8007ac8:	20000008 	.word	0x20000008

08007acc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007ad0:	4802      	ldr	r0, [pc, #8]	; (8007adc <MX_USB_HOST_Process+0x10>)
 8007ad2:	f7fe f949 	bl	8005d68 <USBH_Process>
}
 8007ad6:	bf00      	nop
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop
 8007adc:	200001f8 	.word	0x200001f8

08007ae0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	460b      	mov	r3, r1
 8007aea:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007aec:	78fb      	ldrb	r3, [r7, #3]
 8007aee:	3b01      	subs	r3, #1
 8007af0:	2b04      	cmp	r3, #4
 8007af2:	d819      	bhi.n	8007b28 <USBH_UserProcess+0x48>
 8007af4:	a201      	add	r2, pc, #4	; (adr r2, 8007afc <USBH_UserProcess+0x1c>)
 8007af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007afa:	bf00      	nop
 8007afc:	08007b29 	.word	0x08007b29
 8007b00:	08007b19 	.word	0x08007b19
 8007b04:	08007b29 	.word	0x08007b29
 8007b08:	08007b21 	.word	0x08007b21
 8007b0c:	08007b11 	.word	0x08007b11
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007b10:	4b09      	ldr	r3, [pc, #36]	; (8007b38 <USBH_UserProcess+0x58>)
 8007b12:	2203      	movs	r2, #3
 8007b14:	701a      	strb	r2, [r3, #0]
  break;
 8007b16:	e008      	b.n	8007b2a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007b18:	4b07      	ldr	r3, [pc, #28]	; (8007b38 <USBH_UserProcess+0x58>)
 8007b1a:	2202      	movs	r2, #2
 8007b1c:	701a      	strb	r2, [r3, #0]
  break;
 8007b1e:	e004      	b.n	8007b2a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007b20:	4b05      	ldr	r3, [pc, #20]	; (8007b38 <USBH_UserProcess+0x58>)
 8007b22:	2201      	movs	r2, #1
 8007b24:	701a      	strb	r2, [r3, #0]
  break;
 8007b26:	e000      	b.n	8007b2a <USBH_UserProcess+0x4a>

  default:
  break;
 8007b28:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007b2a:	bf00      	nop
 8007b2c:	370c      	adds	r7, #12
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr
 8007b36:	bf00      	nop
 8007b38:	200000b4 	.word	0x200000b4

08007b3c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b08a      	sub	sp, #40	; 0x28
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b44:	f107 0314 	add.w	r3, r7, #20
 8007b48:	2200      	movs	r2, #0
 8007b4a:	601a      	str	r2, [r3, #0]
 8007b4c:	605a      	str	r2, [r3, #4]
 8007b4e:	609a      	str	r2, [r3, #8]
 8007b50:	60da      	str	r2, [r3, #12]
 8007b52:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b5c:	d147      	bne.n	8007bee <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b5e:	2300      	movs	r3, #0
 8007b60:	613b      	str	r3, [r7, #16]
 8007b62:	4b25      	ldr	r3, [pc, #148]	; (8007bf8 <HAL_HCD_MspInit+0xbc>)
 8007b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b66:	4a24      	ldr	r2, [pc, #144]	; (8007bf8 <HAL_HCD_MspInit+0xbc>)
 8007b68:	f043 0301 	orr.w	r3, r3, #1
 8007b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8007b6e:	4b22      	ldr	r3, [pc, #136]	; (8007bf8 <HAL_HCD_MspInit+0xbc>)
 8007b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b72:	f003 0301 	and.w	r3, r3, #1
 8007b76:	613b      	str	r3, [r7, #16]
 8007b78:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007b7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007b80:	2300      	movs	r3, #0
 8007b82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b84:	2300      	movs	r3, #0
 8007b86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007b88:	f107 0314 	add.w	r3, r7, #20
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	481b      	ldr	r0, [pc, #108]	; (8007bfc <HAL_HCD_MspInit+0xc0>)
 8007b90:	f7f8 fe48 	bl	8000824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007b94:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b9a:	2302      	movs	r3, #2
 8007b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007ba6:	230a      	movs	r3, #10
 8007ba8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007baa:	f107 0314 	add.w	r3, r7, #20
 8007bae:	4619      	mov	r1, r3
 8007bb0:	4812      	ldr	r0, [pc, #72]	; (8007bfc <HAL_HCD_MspInit+0xc0>)
 8007bb2:	f7f8 fe37 	bl	8000824 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007bb6:	4b10      	ldr	r3, [pc, #64]	; (8007bf8 <HAL_HCD_MspInit+0xbc>)
 8007bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bba:	4a0f      	ldr	r2, [pc, #60]	; (8007bf8 <HAL_HCD_MspInit+0xbc>)
 8007bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bc0:	6353      	str	r3, [r2, #52]	; 0x34
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	60fb      	str	r3, [r7, #12]
 8007bc6:	4b0c      	ldr	r3, [pc, #48]	; (8007bf8 <HAL_HCD_MspInit+0xbc>)
 8007bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bca:	4a0b      	ldr	r2, [pc, #44]	; (8007bf8 <HAL_HCD_MspInit+0xbc>)
 8007bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8007bd2:	4b09      	ldr	r3, [pc, #36]	; (8007bf8 <HAL_HCD_MspInit+0xbc>)
 8007bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bda:	60fb      	str	r3, [r7, #12]
 8007bdc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007bde:	2200      	movs	r2, #0
 8007be0:	2100      	movs	r1, #0
 8007be2:	2043      	movs	r0, #67	; 0x43
 8007be4:	f7f8 fde7 	bl	80007b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007be8:	2043      	movs	r0, #67	; 0x43
 8007bea:	f7f8 fe00 	bl	80007ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007bee:	bf00      	nop
 8007bf0:	3728      	adds	r7, #40	; 0x28
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	40023800 	.word	0x40023800
 8007bfc:	40020000 	.word	0x40020000

08007c00 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7fe fb5b 	bl	80062ca <USBH_LL_IncTimer>
}
 8007c14:	bf00      	nop
 8007c16:	3708      	adds	r7, #8
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7fe fba0 	bl	8006370 <USBH_LL_Connect>
}
 8007c30:	bf00      	nop
 8007c32:	3708      	adds	r7, #8
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7fe fbb8 	bl	80063bc <USBH_LL_Disconnect>
}
 8007c4c:	bf00      	nop
 8007c4e:	3708      	adds	r7, #8
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	70fb      	strb	r3, [r7, #3]
 8007c60:	4613      	mov	r3, r2
 8007c62:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007c64:	bf00      	nop
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7fe fb4d 	bl	800631e <USBH_LL_PortEnabled>
} 
 8007c84:	bf00      	nop
 8007c86:	3708      	adds	r7, #8
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7fe fb4d 	bl	800633a <USBH_LL_PortDisabled>
} 
 8007ca0:	bf00      	nop
 8007ca2:	3708      	adds	r7, #8
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d12a      	bne.n	8007d10 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007cba:	4a18      	ldr	r2, [pc, #96]	; (8007d1c <USBH_LL_Init+0x74>)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	4a15      	ldr	r2, [pc, #84]	; (8007d1c <USBH_LL_Init+0x74>)
 8007cc6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007cca:	4b14      	ldr	r3, [pc, #80]	; (8007d1c <USBH_LL_Init+0x74>)
 8007ccc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007cd0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007cd2:	4b12      	ldr	r3, [pc, #72]	; (8007d1c <USBH_LL_Init+0x74>)
 8007cd4:	2208      	movs	r2, #8
 8007cd6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007cd8:	4b10      	ldr	r3, [pc, #64]	; (8007d1c <USBH_LL_Init+0x74>)
 8007cda:	2201      	movs	r2, #1
 8007cdc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007cde:	4b0f      	ldr	r3, [pc, #60]	; (8007d1c <USBH_LL_Init+0x74>)
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007ce4:	4b0d      	ldr	r3, [pc, #52]	; (8007d1c <USBH_LL_Init+0x74>)
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007cea:	4b0c      	ldr	r3, [pc, #48]	; (8007d1c <USBH_LL_Init+0x74>)
 8007cec:	2200      	movs	r2, #0
 8007cee:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007cf0:	480a      	ldr	r0, [pc, #40]	; (8007d1c <USBH_LL_Init+0x74>)
 8007cf2:	f7f8 ff62 	bl	8000bba <HAL_HCD_Init>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d001      	beq.n	8007d00 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007cfc:	f7ff fcd6 	bl	80076ac <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007d00:	4806      	ldr	r0, [pc, #24]	; (8007d1c <USBH_LL_Init+0x74>)
 8007d02:	f7f9 fb5d 	bl	80013c0 <HAL_HCD_GetCurrentFrame>
 8007d06:	4603      	mov	r3, r0
 8007d08:	4619      	mov	r1, r3
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f7fe face 	bl	80062ac <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3708      	adds	r7, #8
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop
 8007d1c:	200005c4 	.word	0x200005c4

08007d20 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d36:	4618      	mov	r0, r3
 8007d38:	f7f9 faca 	bl	80012d0 <HAL_HCD_Start>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007d40:	7bfb      	ldrb	r3, [r7, #15]
 8007d42:	4618      	mov	r0, r3
 8007d44:	f000 f95c 	bl	8008000 <USBH_Get_USB_Status>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007d4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b084      	sub	sp, #16
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007d62:	2300      	movs	r3, #0
 8007d64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f7f9 fad2 	bl	8001316 <HAL_HCD_Stop>
 8007d72:	4603      	mov	r3, r0
 8007d74:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007d76:	7bfb      	ldrb	r3, [r7, #15]
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f000 f941 	bl	8008000 <USBH_Get_USB_Status>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8007d82:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3710      	adds	r7, #16
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007d94:	2301      	movs	r3, #1
 8007d96:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7f9 fb1c 	bl	80013dc <HAL_HCD_GetCurrentSpeed>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d007      	beq.n	8007dba <USBH_LL_GetSpeed+0x2e>
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d302      	bcc.n	8007db4 <USBH_LL_GetSpeed+0x28>
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	d006      	beq.n	8007dc0 <USBH_LL_GetSpeed+0x34>
 8007db2:	e008      	b.n	8007dc6 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007db4:	2300      	movs	r3, #0
 8007db6:	73fb      	strb	r3, [r7, #15]
    break;
 8007db8:	e008      	b.n	8007dcc <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	73fb      	strb	r3, [r7, #15]
    break;
 8007dbe:	e005      	b.n	8007dcc <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007dc0:	2302      	movs	r3, #2
 8007dc2:	73fb      	strb	r3, [r7, #15]
    break;
 8007dc4:	e002      	b.n	8007dcc <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	73fb      	strb	r3, [r7, #15]
    break;
 8007dca:	bf00      	nop
  }
  return  speed;
 8007dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b084      	sub	sp, #16
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dde:	2300      	movs	r3, #0
 8007de0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007de2:	2300      	movs	r3, #0
 8007de4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7f9 faaf 	bl	8001350 <HAL_HCD_ResetPort>
 8007df2:	4603      	mov	r3, r0
 8007df4:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8007df6:	7bfb      	ldrb	r3, [r7, #15]
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f000 f901 	bl	8008000 <USBH_Get_USB_Status>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007e02:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3710      	adds	r7, #16
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	460b      	mov	r3, r1
 8007e16:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e1e:	78fa      	ldrb	r2, [r7, #3]
 8007e20:	4611      	mov	r1, r2
 8007e22:	4618      	mov	r0, r3
 8007e24:	f7f9 fab7 	bl	8001396 <HAL_HCD_HC_GetXferCount>
 8007e28:	4603      	mov	r3, r0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3708      	adds	r7, #8
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}

08007e32 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007e32:	b590      	push	{r4, r7, lr}
 8007e34:	b089      	sub	sp, #36	; 0x24
 8007e36:	af04      	add	r7, sp, #16
 8007e38:	6078      	str	r0, [r7, #4]
 8007e3a:	4608      	mov	r0, r1
 8007e3c:	4611      	mov	r1, r2
 8007e3e:	461a      	mov	r2, r3
 8007e40:	4603      	mov	r3, r0
 8007e42:	70fb      	strb	r3, [r7, #3]
 8007e44:	460b      	mov	r3, r1
 8007e46:	70bb      	strb	r3, [r7, #2]
 8007e48:	4613      	mov	r3, r2
 8007e4a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007e50:	2300      	movs	r3, #0
 8007e52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8007e5a:	787c      	ldrb	r4, [r7, #1]
 8007e5c:	78ba      	ldrb	r2, [r7, #2]
 8007e5e:	78f9      	ldrb	r1, [r7, #3]
 8007e60:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007e62:	9302      	str	r3, [sp, #8]
 8007e64:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007e68:	9301      	str	r3, [sp, #4]
 8007e6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007e6e:	9300      	str	r3, [sp, #0]
 8007e70:	4623      	mov	r3, r4
 8007e72:	f7f8 ff04 	bl	8000c7e <HAL_HCD_HC_Init>
 8007e76:	4603      	mov	r3, r0
 8007e78:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007e7a:	7bfb      	ldrb	r3, [r7, #15]
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f000 f8bf 	bl	8008000 <USBH_Get_USB_Status>
 8007e82:	4603      	mov	r3, r0
 8007e84:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007e86:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3714      	adds	r7, #20
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd90      	pop	{r4, r7, pc}

08007e90 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	460b      	mov	r3, r1
 8007e9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007eaa:	78fa      	ldrb	r2, [r7, #3]
 8007eac:	4611      	mov	r1, r2
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7f8 ff7d 	bl	8000dae <HAL_HCD_HC_Halt>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007eb8:	7bfb      	ldrb	r3, [r7, #15]
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f000 f8a0 	bl	8008000 <USBH_Get_USB_Status>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007ec4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3710      	adds	r7, #16
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007ece:	b590      	push	{r4, r7, lr}
 8007ed0:	b089      	sub	sp, #36	; 0x24
 8007ed2:	af04      	add	r7, sp, #16
 8007ed4:	6078      	str	r0, [r7, #4]
 8007ed6:	4608      	mov	r0, r1
 8007ed8:	4611      	mov	r1, r2
 8007eda:	461a      	mov	r2, r3
 8007edc:	4603      	mov	r3, r0
 8007ede:	70fb      	strb	r3, [r7, #3]
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	70bb      	strb	r3, [r7, #2]
 8007ee4:	4613      	mov	r3, r2
 8007ee6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007eec:	2300      	movs	r3, #0
 8007eee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8007ef6:	787c      	ldrb	r4, [r7, #1]
 8007ef8:	78ba      	ldrb	r2, [r7, #2]
 8007efa:	78f9      	ldrb	r1, [r7, #3]
 8007efc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007f00:	9303      	str	r3, [sp, #12]
 8007f02:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007f04:	9302      	str	r3, [sp, #8]
 8007f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f08:	9301      	str	r3, [sp, #4]
 8007f0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007f0e:	9300      	str	r3, [sp, #0]
 8007f10:	4623      	mov	r3, r4
 8007f12:	f7f8 ff6f 	bl	8000df4 <HAL_HCD_HC_SubmitRequest>
 8007f16:	4603      	mov	r3, r0
 8007f18:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007f1a:	7bfb      	ldrb	r3, [r7, #15]
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f000 f86f 	bl	8008000 <USBH_Get_USB_Status>
 8007f22:	4603      	mov	r3, r0
 8007f24:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007f26:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3714      	adds	r7, #20
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd90      	pop	{r4, r7, pc}

08007f30 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	460b      	mov	r3, r1
 8007f3a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f42:	78fa      	ldrb	r2, [r7, #3]
 8007f44:	4611      	mov	r1, r2
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7f9 fa10 	bl	800136c <HAL_HCD_HC_GetURBState>
 8007f4c:	4603      	mov	r3, r0
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3708      	adds	r7, #8
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}

08007f56 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007f56:	b580      	push	{r7, lr}
 8007f58:	b082      	sub	sp, #8
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
 8007f5e:	460b      	mov	r3, r1
 8007f60:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d103      	bne.n	8007f74 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007f6c:	78fb      	ldrb	r3, [r7, #3]
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f000 f872 	bl	8008058 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007f74:	20c8      	movs	r0, #200	; 0xc8
 8007f76:	f7f8 fb21 	bl	80005bc <HAL_Delay>
  return USBH_OK;
 8007f7a:	2300      	movs	r3, #0
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3708      	adds	r7, #8
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b085      	sub	sp, #20
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	70fb      	strb	r3, [r7, #3]
 8007f90:	4613      	mov	r3, r2
 8007f92:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f9a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007f9c:	78fa      	ldrb	r2, [r7, #3]
 8007f9e:	68f9      	ldr	r1, [r7, #12]
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	4413      	add	r3, r2
 8007fa6:	00db      	lsls	r3, r3, #3
 8007fa8:	440b      	add	r3, r1
 8007faa:	333b      	adds	r3, #59	; 0x3b
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d00a      	beq.n	8007fc8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007fb2:	78fa      	ldrb	r2, [r7, #3]
 8007fb4:	68f9      	ldr	r1, [r7, #12]
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	4413      	add	r3, r2
 8007fbc:	00db      	lsls	r3, r3, #3
 8007fbe:	440b      	add	r3, r1
 8007fc0:	3350      	adds	r3, #80	; 0x50
 8007fc2:	78ba      	ldrb	r2, [r7, #2]
 8007fc4:	701a      	strb	r2, [r3, #0]
 8007fc6:	e009      	b.n	8007fdc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007fc8:	78fa      	ldrb	r2, [r7, #3]
 8007fca:	68f9      	ldr	r1, [r7, #12]
 8007fcc:	4613      	mov	r3, r2
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	4413      	add	r3, r2
 8007fd2:	00db      	lsls	r3, r3, #3
 8007fd4:	440b      	add	r3, r1
 8007fd6:	3351      	adds	r3, #81	; 0x51
 8007fd8:	78ba      	ldrb	r2, [r7, #2]
 8007fda:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3714      	adds	r7, #20
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr

08007fea <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b082      	sub	sp, #8
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f7f8 fae2 	bl	80005bc <HAL_Delay>
}
 8007ff8:	bf00      	nop
 8007ffa:	3708      	adds	r7, #8
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008000:	b480      	push	{r7}
 8008002:	b085      	sub	sp, #20
 8008004:	af00      	add	r7, sp, #0
 8008006:	4603      	mov	r3, r0
 8008008:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800800a:	2300      	movs	r3, #0
 800800c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800800e:	79fb      	ldrb	r3, [r7, #7]
 8008010:	2b03      	cmp	r3, #3
 8008012:	d817      	bhi.n	8008044 <USBH_Get_USB_Status+0x44>
 8008014:	a201      	add	r2, pc, #4	; (adr r2, 800801c <USBH_Get_USB_Status+0x1c>)
 8008016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800801a:	bf00      	nop
 800801c:	0800802d 	.word	0x0800802d
 8008020:	08008033 	.word	0x08008033
 8008024:	08008039 	.word	0x08008039
 8008028:	0800803f 	.word	0x0800803f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800802c:	2300      	movs	r3, #0
 800802e:	73fb      	strb	r3, [r7, #15]
    break;
 8008030:	e00b      	b.n	800804a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008032:	2302      	movs	r3, #2
 8008034:	73fb      	strb	r3, [r7, #15]
    break;
 8008036:	e008      	b.n	800804a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008038:	2301      	movs	r3, #1
 800803a:	73fb      	strb	r3, [r7, #15]
    break;
 800803c:	e005      	b.n	800804a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800803e:	2302      	movs	r3, #2
 8008040:	73fb      	strb	r3, [r7, #15]
    break;
 8008042:	e002      	b.n	800804a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008044:	2302      	movs	r3, #2
 8008046:	73fb      	strb	r3, [r7, #15]
    break;
 8008048:	bf00      	nop
  }
  return usb_status;
 800804a:	7bfb      	ldrb	r3, [r7, #15]
}
 800804c:	4618      	mov	r0, r3
 800804e:	3714      	adds	r7, #20
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	4603      	mov	r3, r0
 8008060:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8008062:	79fb      	ldrb	r3, [r7, #7]
 8008064:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008066:	79fb      	ldrb	r3, [r7, #7]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d102      	bne.n	8008072 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800806c:	2301      	movs	r3, #1
 800806e:	73fb      	strb	r3, [r7, #15]
 8008070:	e001      	b.n	8008076 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8008072:	2300      	movs	r3, #0
 8008074:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008076:	7bfb      	ldrb	r3, [r7, #15]
 8008078:	461a      	mov	r2, r3
 800807a:	2101      	movs	r1, #1
 800807c:	4803      	ldr	r0, [pc, #12]	; (800808c <MX_DriverVbusFS+0x34>)
 800807e:	f7f8 fd83 	bl	8000b88 <HAL_GPIO_WritePin>
}
 8008082:	bf00      	nop
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	40020800 	.word	0x40020800

08008090 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008090:	f8df d034 	ldr.w	sp, [pc, #52]	; 80080c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008094:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008096:	e003      	b.n	80080a0 <LoopCopyDataInit>

08008098 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008098:	4b0c      	ldr	r3, [pc, #48]	; (80080cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800809a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800809c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800809e:	3104      	adds	r1, #4

080080a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80080a0:	480b      	ldr	r0, [pc, #44]	; (80080d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80080a2:	4b0c      	ldr	r3, [pc, #48]	; (80080d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80080a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80080a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80080a8:	d3f6      	bcc.n	8008098 <CopyDataInit>
  ldr  r2, =_sbss
 80080aa:	4a0b      	ldr	r2, [pc, #44]	; (80080d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80080ac:	e002      	b.n	80080b4 <LoopFillZerobss>

080080ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80080ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80080b0:	f842 3b04 	str.w	r3, [r2], #4

080080b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80080b4:	4b09      	ldr	r3, [pc, #36]	; (80080dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80080b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80080b8:	d3f9      	bcc.n	80080ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80080ba:	f7ff fccb 	bl	8007a54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80080be:	f000 f817 	bl	80080f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80080c2:	f7fe ff7f 	bl	8006fc4 <main>
  bx  lr    
 80080c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80080c8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80080cc:	08008320 	.word	0x08008320
  ldr  r0, =_sdata
 80080d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80080d4:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 80080d8:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 80080dc:	2000088c 	.word	0x2000088c

080080e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80080e0:	e7fe      	b.n	80080e0 <ADC_IRQHandler>
	...

080080e4 <__errno>:
 80080e4:	4b01      	ldr	r3, [pc, #4]	; (80080ec <__errno+0x8>)
 80080e6:	6818      	ldr	r0, [r3, #0]
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	2000002c 	.word	0x2000002c

080080f0 <__libc_init_array>:
 80080f0:	b570      	push	{r4, r5, r6, lr}
 80080f2:	4e0d      	ldr	r6, [pc, #52]	; (8008128 <__libc_init_array+0x38>)
 80080f4:	4c0d      	ldr	r4, [pc, #52]	; (800812c <__libc_init_array+0x3c>)
 80080f6:	1ba4      	subs	r4, r4, r6
 80080f8:	10a4      	asrs	r4, r4, #2
 80080fa:	2500      	movs	r5, #0
 80080fc:	42a5      	cmp	r5, r4
 80080fe:	d109      	bne.n	8008114 <__libc_init_array+0x24>
 8008100:	4e0b      	ldr	r6, [pc, #44]	; (8008130 <__libc_init_array+0x40>)
 8008102:	4c0c      	ldr	r4, [pc, #48]	; (8008134 <__libc_init_array+0x44>)
 8008104:	f000 f8ea 	bl	80082dc <_init>
 8008108:	1ba4      	subs	r4, r4, r6
 800810a:	10a4      	asrs	r4, r4, #2
 800810c:	2500      	movs	r5, #0
 800810e:	42a5      	cmp	r5, r4
 8008110:	d105      	bne.n	800811e <__libc_init_array+0x2e>
 8008112:	bd70      	pop	{r4, r5, r6, pc}
 8008114:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008118:	4798      	blx	r3
 800811a:	3501      	adds	r5, #1
 800811c:	e7ee      	b.n	80080fc <__libc_init_array+0xc>
 800811e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008122:	4798      	blx	r3
 8008124:	3501      	adds	r5, #1
 8008126:	e7f2      	b.n	800810e <__libc_init_array+0x1e>
 8008128:	08008318 	.word	0x08008318
 800812c:	08008318 	.word	0x08008318
 8008130:	08008318 	.word	0x08008318
 8008134:	0800831c 	.word	0x0800831c

08008138 <malloc>:
 8008138:	4b02      	ldr	r3, [pc, #8]	; (8008144 <malloc+0xc>)
 800813a:	4601      	mov	r1, r0
 800813c:	6818      	ldr	r0, [r3, #0]
 800813e:	f000 b861 	b.w	8008204 <_malloc_r>
 8008142:	bf00      	nop
 8008144:	2000002c 	.word	0x2000002c

08008148 <free>:
 8008148:	4b02      	ldr	r3, [pc, #8]	; (8008154 <free+0xc>)
 800814a:	4601      	mov	r1, r0
 800814c:	6818      	ldr	r0, [r3, #0]
 800814e:	f000 b80b 	b.w	8008168 <_free_r>
 8008152:	bf00      	nop
 8008154:	2000002c 	.word	0x2000002c

08008158 <memset>:
 8008158:	4402      	add	r2, r0
 800815a:	4603      	mov	r3, r0
 800815c:	4293      	cmp	r3, r2
 800815e:	d100      	bne.n	8008162 <memset+0xa>
 8008160:	4770      	bx	lr
 8008162:	f803 1b01 	strb.w	r1, [r3], #1
 8008166:	e7f9      	b.n	800815c <memset+0x4>

08008168 <_free_r>:
 8008168:	b538      	push	{r3, r4, r5, lr}
 800816a:	4605      	mov	r5, r0
 800816c:	2900      	cmp	r1, #0
 800816e:	d045      	beq.n	80081fc <_free_r+0x94>
 8008170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008174:	1f0c      	subs	r4, r1, #4
 8008176:	2b00      	cmp	r3, #0
 8008178:	bfb8      	it	lt
 800817a:	18e4      	addlt	r4, r4, r3
 800817c:	f000 f8ac 	bl	80082d8 <__malloc_lock>
 8008180:	4a1f      	ldr	r2, [pc, #124]	; (8008200 <_free_r+0x98>)
 8008182:	6813      	ldr	r3, [r2, #0]
 8008184:	4610      	mov	r0, r2
 8008186:	b933      	cbnz	r3, 8008196 <_free_r+0x2e>
 8008188:	6063      	str	r3, [r4, #4]
 800818a:	6014      	str	r4, [r2, #0]
 800818c:	4628      	mov	r0, r5
 800818e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008192:	f000 b8a2 	b.w	80082da <__malloc_unlock>
 8008196:	42a3      	cmp	r3, r4
 8008198:	d90c      	bls.n	80081b4 <_free_r+0x4c>
 800819a:	6821      	ldr	r1, [r4, #0]
 800819c:	1862      	adds	r2, r4, r1
 800819e:	4293      	cmp	r3, r2
 80081a0:	bf04      	itt	eq
 80081a2:	681a      	ldreq	r2, [r3, #0]
 80081a4:	685b      	ldreq	r3, [r3, #4]
 80081a6:	6063      	str	r3, [r4, #4]
 80081a8:	bf04      	itt	eq
 80081aa:	1852      	addeq	r2, r2, r1
 80081ac:	6022      	streq	r2, [r4, #0]
 80081ae:	6004      	str	r4, [r0, #0]
 80081b0:	e7ec      	b.n	800818c <_free_r+0x24>
 80081b2:	4613      	mov	r3, r2
 80081b4:	685a      	ldr	r2, [r3, #4]
 80081b6:	b10a      	cbz	r2, 80081bc <_free_r+0x54>
 80081b8:	42a2      	cmp	r2, r4
 80081ba:	d9fa      	bls.n	80081b2 <_free_r+0x4a>
 80081bc:	6819      	ldr	r1, [r3, #0]
 80081be:	1858      	adds	r0, r3, r1
 80081c0:	42a0      	cmp	r0, r4
 80081c2:	d10b      	bne.n	80081dc <_free_r+0x74>
 80081c4:	6820      	ldr	r0, [r4, #0]
 80081c6:	4401      	add	r1, r0
 80081c8:	1858      	adds	r0, r3, r1
 80081ca:	4282      	cmp	r2, r0
 80081cc:	6019      	str	r1, [r3, #0]
 80081ce:	d1dd      	bne.n	800818c <_free_r+0x24>
 80081d0:	6810      	ldr	r0, [r2, #0]
 80081d2:	6852      	ldr	r2, [r2, #4]
 80081d4:	605a      	str	r2, [r3, #4]
 80081d6:	4401      	add	r1, r0
 80081d8:	6019      	str	r1, [r3, #0]
 80081da:	e7d7      	b.n	800818c <_free_r+0x24>
 80081dc:	d902      	bls.n	80081e4 <_free_r+0x7c>
 80081de:	230c      	movs	r3, #12
 80081e0:	602b      	str	r3, [r5, #0]
 80081e2:	e7d3      	b.n	800818c <_free_r+0x24>
 80081e4:	6820      	ldr	r0, [r4, #0]
 80081e6:	1821      	adds	r1, r4, r0
 80081e8:	428a      	cmp	r2, r1
 80081ea:	bf04      	itt	eq
 80081ec:	6811      	ldreq	r1, [r2, #0]
 80081ee:	6852      	ldreq	r2, [r2, #4]
 80081f0:	6062      	str	r2, [r4, #4]
 80081f2:	bf04      	itt	eq
 80081f4:	1809      	addeq	r1, r1, r0
 80081f6:	6021      	streq	r1, [r4, #0]
 80081f8:	605c      	str	r4, [r3, #4]
 80081fa:	e7c7      	b.n	800818c <_free_r+0x24>
 80081fc:	bd38      	pop	{r3, r4, r5, pc}
 80081fe:	bf00      	nop
 8008200:	200000b8 	.word	0x200000b8

08008204 <_malloc_r>:
 8008204:	b570      	push	{r4, r5, r6, lr}
 8008206:	1ccd      	adds	r5, r1, #3
 8008208:	f025 0503 	bic.w	r5, r5, #3
 800820c:	3508      	adds	r5, #8
 800820e:	2d0c      	cmp	r5, #12
 8008210:	bf38      	it	cc
 8008212:	250c      	movcc	r5, #12
 8008214:	2d00      	cmp	r5, #0
 8008216:	4606      	mov	r6, r0
 8008218:	db01      	blt.n	800821e <_malloc_r+0x1a>
 800821a:	42a9      	cmp	r1, r5
 800821c:	d903      	bls.n	8008226 <_malloc_r+0x22>
 800821e:	230c      	movs	r3, #12
 8008220:	6033      	str	r3, [r6, #0]
 8008222:	2000      	movs	r0, #0
 8008224:	bd70      	pop	{r4, r5, r6, pc}
 8008226:	f000 f857 	bl	80082d8 <__malloc_lock>
 800822a:	4a21      	ldr	r2, [pc, #132]	; (80082b0 <_malloc_r+0xac>)
 800822c:	6814      	ldr	r4, [r2, #0]
 800822e:	4621      	mov	r1, r4
 8008230:	b991      	cbnz	r1, 8008258 <_malloc_r+0x54>
 8008232:	4c20      	ldr	r4, [pc, #128]	; (80082b4 <_malloc_r+0xb0>)
 8008234:	6823      	ldr	r3, [r4, #0]
 8008236:	b91b      	cbnz	r3, 8008240 <_malloc_r+0x3c>
 8008238:	4630      	mov	r0, r6
 800823a:	f000 f83d 	bl	80082b8 <_sbrk_r>
 800823e:	6020      	str	r0, [r4, #0]
 8008240:	4629      	mov	r1, r5
 8008242:	4630      	mov	r0, r6
 8008244:	f000 f838 	bl	80082b8 <_sbrk_r>
 8008248:	1c43      	adds	r3, r0, #1
 800824a:	d124      	bne.n	8008296 <_malloc_r+0x92>
 800824c:	230c      	movs	r3, #12
 800824e:	6033      	str	r3, [r6, #0]
 8008250:	4630      	mov	r0, r6
 8008252:	f000 f842 	bl	80082da <__malloc_unlock>
 8008256:	e7e4      	b.n	8008222 <_malloc_r+0x1e>
 8008258:	680b      	ldr	r3, [r1, #0]
 800825a:	1b5b      	subs	r3, r3, r5
 800825c:	d418      	bmi.n	8008290 <_malloc_r+0x8c>
 800825e:	2b0b      	cmp	r3, #11
 8008260:	d90f      	bls.n	8008282 <_malloc_r+0x7e>
 8008262:	600b      	str	r3, [r1, #0]
 8008264:	50cd      	str	r5, [r1, r3]
 8008266:	18cc      	adds	r4, r1, r3
 8008268:	4630      	mov	r0, r6
 800826a:	f000 f836 	bl	80082da <__malloc_unlock>
 800826e:	f104 000b 	add.w	r0, r4, #11
 8008272:	1d23      	adds	r3, r4, #4
 8008274:	f020 0007 	bic.w	r0, r0, #7
 8008278:	1ac3      	subs	r3, r0, r3
 800827a:	d0d3      	beq.n	8008224 <_malloc_r+0x20>
 800827c:	425a      	negs	r2, r3
 800827e:	50e2      	str	r2, [r4, r3]
 8008280:	e7d0      	b.n	8008224 <_malloc_r+0x20>
 8008282:	428c      	cmp	r4, r1
 8008284:	684b      	ldr	r3, [r1, #4]
 8008286:	bf16      	itet	ne
 8008288:	6063      	strne	r3, [r4, #4]
 800828a:	6013      	streq	r3, [r2, #0]
 800828c:	460c      	movne	r4, r1
 800828e:	e7eb      	b.n	8008268 <_malloc_r+0x64>
 8008290:	460c      	mov	r4, r1
 8008292:	6849      	ldr	r1, [r1, #4]
 8008294:	e7cc      	b.n	8008230 <_malloc_r+0x2c>
 8008296:	1cc4      	adds	r4, r0, #3
 8008298:	f024 0403 	bic.w	r4, r4, #3
 800829c:	42a0      	cmp	r0, r4
 800829e:	d005      	beq.n	80082ac <_malloc_r+0xa8>
 80082a0:	1a21      	subs	r1, r4, r0
 80082a2:	4630      	mov	r0, r6
 80082a4:	f000 f808 	bl	80082b8 <_sbrk_r>
 80082a8:	3001      	adds	r0, #1
 80082aa:	d0cf      	beq.n	800824c <_malloc_r+0x48>
 80082ac:	6025      	str	r5, [r4, #0]
 80082ae:	e7db      	b.n	8008268 <_malloc_r+0x64>
 80082b0:	200000b8 	.word	0x200000b8
 80082b4:	200000bc 	.word	0x200000bc

080082b8 <_sbrk_r>:
 80082b8:	b538      	push	{r3, r4, r5, lr}
 80082ba:	4c06      	ldr	r4, [pc, #24]	; (80082d4 <_sbrk_r+0x1c>)
 80082bc:	2300      	movs	r3, #0
 80082be:	4605      	mov	r5, r0
 80082c0:	4608      	mov	r0, r1
 80082c2:	6023      	str	r3, [r4, #0]
 80082c4:	f7ff fb9a 	bl	80079fc <_sbrk>
 80082c8:	1c43      	adds	r3, r0, #1
 80082ca:	d102      	bne.n	80082d2 <_sbrk_r+0x1a>
 80082cc:	6823      	ldr	r3, [r4, #0]
 80082ce:	b103      	cbz	r3, 80082d2 <_sbrk_r+0x1a>
 80082d0:	602b      	str	r3, [r5, #0]
 80082d2:	bd38      	pop	{r3, r4, r5, pc}
 80082d4:	20000888 	.word	0x20000888

080082d8 <__malloc_lock>:
 80082d8:	4770      	bx	lr

080082da <__malloc_unlock>:
 80082da:	4770      	bx	lr

080082dc <_init>:
 80082dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082de:	bf00      	nop
 80082e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082e2:	bc08      	pop	{r3}
 80082e4:	469e      	mov	lr, r3
 80082e6:	4770      	bx	lr

080082e8 <_fini>:
 80082e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ea:	bf00      	nop
 80082ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ee:	bc08      	pop	{r3}
 80082f0:	469e      	mov	lr, r3
 80082f2:	4770      	bx	lr
